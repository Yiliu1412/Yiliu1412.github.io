<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《网络是怎样连接的》学习笔记</title>
    <link href="/2023/07/17/web-learning/"/>
    <url>/2023/07/17/web-learning/</url>
    
    <content type="html"><![CDATA[<h2 id="网络是怎样连接的"><a href="#网络是怎样连接的" class="headerlink" title="网络是怎样连接的"></a>网络是怎样连接的</h2><h1 id="浏览器生成消息——探索浏览器内部"><a href="#浏览器生成消息——探索浏览器内部" class="headerlink" title="浏览器生成消息——探索浏览器内部"></a>浏览器生成消息——探索浏览器内部</h1><blockquote><p><a href="http://www.nikkeibp.co.jp/">http://www.nikkeibp.co.jp/</a> 中的www只是Web服务器上的一种命名。而且，World Wide Web也不是一个协议的名字，而是Web的提出者最早开发的浏览器兼HTML编辑器的名字。<br>浏览器等网络应用程序实际上并不具备网络控制功能，而是委托操作系统来控制网络。</p></blockquote><h2 id="生成HTTP请求消息"><a href="#生成HTTP请求消息" class="headerlink" title="生成HTTP请求消息"></a>生成HTTP请求消息</h2><h3 id="探索之旅从输入网址开始"><a href="#探索之旅从输入网址开始" class="headerlink" title="探索之旅从输入网址开始"></a>探索之旅从输入网址开始</h3><p>介绍浏览器的工作方式之前， 让我们先来介绍一下网址。 网址，准确来说应该叫URL (<em>Uniform Resource Locator，统一资源定位符</em>)。如果我说它就是以 <code>http://</code> 开头的那一串东西， 恐怕大家一下子就明白了， 但实际上除了<code>http:</code>， 网址还可以以其他一些文字开头， 例如<code>ftp:</code> <code>file:</code> <code>mailto:</code>等。</p><p>浏览器是一个具备多种客户端功能的综合性客户端软件，因此它需要一些东西来判断应该使用其中哪种功能来访问相应的数据，而各种不同的URL就是用来干这个的。</p><blockquote><p>FTP： File Transfer Protocol，文件传送协议。这是一种在上传、下载文件<br>时使用的协议。使用 FTP 协议来传送文件的程序也被叫作 FTP。<br>HTTP： Hypertext Transfer Protocol，超文本传送协议。</p></blockquote><p>在访问 Web 服务器和 FTP 服务器时， URL 中会包含服务器的域名 E 和要访问的文件的路径名等， 而发邮件的 URL 则包含收件人的邮件地址。 此外， 根据需要， URL 中还会包含用户名、 密码、服务器端口号等信息。 URL 开头的文字， 即<code>ftp:</code> <code>file:</code> <code>mailto:</code>这部分文字都表示浏览器应当使用的访问方法。理解为访问时使用的<strong>协议类型</strong>。</p><p><img src="/../img/mk-2023-07-17-23-45-48.png"></p><h3 id="浏览器先要解析URL"><a href="#浏览器先要解析URL" class="headerlink" title="浏览器先要解析URL"></a>浏览器先要解析URL</h3><p><strong>浏览器要做的第一步工作就是对 URL 进行解析</strong>， 从而生成发送给 Web 服务器的请求消息。 </p><p><img src="/../_posts/img/mk-2023-07-17-23-49-32.png"></p><p>根据 HTTP 的规格， URL 包含上图 （ a） 中的这几种元素。 当对 URL进行解析时， 首先需要按照上图 （ a） 的格式将其中的各个元素拆分出来，例如上图（ b） 中的 URL 会拆分成上图 （ c） 的样子。 然后， 通过拆分出来的这些元素， 我们就能够明白 URL 代表的含义。</p><h3 id="省略文件名的情况"><a href="#省略文件名的情况" class="headerlink" title="省略文件名的情况"></a>省略文件名的情况</h3><p><code>http://www.lab.glasscom.com/dir1/file1.html</code>是一个典型的<code>http:</code>开头的URL，但有时候我们也会见到一些不太一样的 URL， 例如<code>http://www.lab.glasscom.com/dir/</code>这个 URL 是以<code>/</code>来结尾的。 &#96;&#x2F;dir&#x2F;&#96;&#96; 后面本来应该有的文件名被<br>省略了。 根据 URL 的规则， 文件名可以像前面这样省略。</p><p>我们会在服务器上事先设置好文件名省略时要访问的默认文件名。 这个设置根据服务器不同而不同， 大多数情况下是 <code>index.html</code> 或者 <code>default.htm</code> 之类的<br>文件名。 因此， 像前面这样省略文件名时， 服务器就会访问 <code>/dir/index.html</code><br>或者 <code>/dir/default.htm</code>。</p><p>还有一些 URL 是像<code>http://www.lab.glasscom.com/</code>这样只有 Web 服务器的域名的， 这也是一种省略了文件名的形式。 这个 URL 也是以<code>/</code> 结尾的， 也就是说它表示访问一个名叫<code>/</code>的目录 A。 而且， 由于省略了文件名， 所以结果就是访问 <code>/index.html</code>或者<code>/default.htm</code>这样的文件了。</p><blockquote><p><code>/</code>目录表示目录层级中最顶层的“根目录”。</p></blockquote><p>连目录名都省略时，就代表访问根目录下事先设置的默认文件。最早的时候这个文件被叫作“主页”（ home page），意思就是当省略文件名时访问的那个默认的页面。随着 Web 的普及，这个词的意义似乎并没有被正确理解，现在不光是默认页面，似乎随便什么网页都可以被叫作主页了（笑）。</p><h3 id="HTTP的基本思路"><a href="#HTTP的基本思路" class="headerlink" title="HTTP的基本思路"></a>HTTP的基本思路</h3><p>解析完 URL 之后， 我们就知道应该要访问的目标在哪里了。 接下来，浏览器会使用 HTTP 协议来访问 Web 服务器。</p><p><img src="/../_posts/img/mk-2023-07-18-00-05-20.png"></p><p>HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤， 其基本思路非常简单。  </p><p>首先， 客户端会向服务器发送请求消息（ 图 1.4）。 请求消息中包含的内容是“对什么” 和“进行怎样的操作” 两个部分。 其中相当于“对什么” 的部分称为 URI(<em>Uniform Resource Identifier，统一资源标识符</em>)。 一般来说， URI 的内容是一个存放网页数据的文件名或者是一个 CGI 程序的文件名， 例如&#96;&#96; &#x2F;dir1&#x2F;file1.html”<br>“&#x2F;dir1&#x2F;program1.cgi&#96; 等。</p><blockquote><p>实际上，这个文件在 Web 服务器上未必是真实存在的，因为 Web 服务器可以通过重写规则对虚拟的 URI 进行映射。</p></blockquote><p>不过，URI 不仅限于此， 也可以直接使用<code>http:</code>开头的 URL 来作为 URI。 换句话说就是，<strong>这里的各种访问目标统称为 URI</strong>。</p><p>相当于接下来“进行怎样的操作” 的部分称为<em>方法</em>（<em>也叫 HTTP 谓词，或者 HTTP 动词</em>）。<em>方法</em>表示需要让Web 服务器完成怎样的工作， 其中典型的例子包括读取 URI 表示的数据、将客户端输入的数据发送给 URI 表示的程序等。 表 1.1 列举了主要的<em>方法</em>。</p><p><img src="/../_posts/img/mk-2023-07-18-00-10-59.png"></p><p>除了图 1.4 中的内容之外， HTTP 消息中还有一些用来表示附加信息的头字段。 客户端向 Web 服务器发送数据时， 会先发送头字段， 然后再发送数据。</p><p><strong>收到请求消息之后， Web 服务器会对其中的内容进行解析</strong>， 通过 URI和方法来判断“对什么”“进行怎样的操作”， 并根据这些要求来完成自己的工作， 然后将结果存放在响应消息中。 在响应消息的开头有一个状态码，它用来表示操作的执行结果是成功还是发生了错误。 </p>]]></content>
    
    
    <categories>
      
      <category>大学学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记整理</tag>
      
      <tag>大学</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无职转生摘抄</title>
    <link href="/2023/06/19/mushoku-tensei/"/>
    <url>/2023/06/19/mushoku-tensei/</url>
    
    <content type="html"><![CDATA[<p>鲁迪乌斯名言<br>著：鲁迪乌斯·格雷拉特<br>译：金恩·RF·马格特<br>注：英文是鲁迪的原话，中文是后世的翻译</p><p>小说本篇<br>第一卷<br>眼前是悬崖。要往前踏出一步狠狠摔向地面，<br>或者想裹足不前继续承受辱骂，都是你的自由。<br>I do not want to work,whatever it may be said by whom.</p><p>第二卷<br>获得自由羽翼的人，将会失去双脚作为代价吧。<br>It is difficult for inoccupation to attach a leg to the ground and to work.</p><p>第三卷<br>我能轻松办到的事情，你无法办到；<br>你能轻松办到的事情，我无法办到。就只是这么一回事。<br>Since working is very difficult,please do not say simply.</p><p>第四卷<br>人人不同，每个人都好；人人相同，那就更好。<br>It will not be blameed if it can be the same as everybody.</p><p>第五卷<br>懂得败北滋味的人，是强者。<br>The way of daring to become inoccupation.</p><p>第六卷<br>并非每个人，都能够活得自由自在。<br>The moment hope could be seen,it is the easiest to be thrust down into hell.</p><p>第七卷<br>要在女人面前耍猴戏是无所谓，但是要被当猴子耍可就完全免谈。<br>Two dimensions are most as expected.</p><p>第八卷<br>若想求苦，就往前行；如要寻乐，另去他方。<br>True prosperity is ahead of the pain.</p><p>第九卷<br>即使被人摆布、嘲笑，仍然会有所收获。<br>When having to exert oneself,I have that.</p><p>第十卷<br>结婚是人生的坟墓。<br>Neet is zombie.</p><p>第十一卷<br>兄弟姊妹适合自己最接近，最相像，也是最难以理解的生物。<br>When it coule be understood so,it’ll be the best family.</p><p>第十二卷<br>残酷到让人无法正视的现实想必会到来。<br>When my father dies and my mother has got ill,what should be made neatness?</p><p>第十三卷<br>把认定为多余并舍弃的事物再度捡回时，就会明白其价值。<br>The person who abandoned his family has got the family who isn’t deserted.</p><p>第十四卷<br>我没有在努力？是因为你的目标在其他地方，才会这么认为。<br>It’s because I’m looking for the place where I should aim at an unemployed one.</p><p>第十五卷<br>就算吃了败仗，人生还是得继续过下去。<br>Defeat isn’t shame.Compliance is significant.</p><p>第十六卷<br>与其辱骂，不如给予喝彩。<br>People wish for the king who can shower cheer.</p><p>第十七卷<br>行动、言语以及金钱，有各式各样的事物会破坏信赖。<br>The will which isn’t broken maintains trust.</p><p>第十八卷<br>在这个世上，有些事能够原谅，有些事则无法饶恕。<br>It’s decided whether a person or doesn’t permit.</p><p>第十九卷<br>我一辈子都无法和他互相理解。<br>after died understand.</p><p>第二十卷<br>时间残酷。总是会要求我们做出选择。<br>Time is gentle.Always make us choose.</p><p>第二十一卷<br>再怎么混蛋，父母还是父母。<br>Ever if it’s wrongit’s affection.</p><p>第二十二卷<br>是从何时开始呢？<br>回过神来，已经能轻松地拜托朋友。<br>Grow in my communication ability.</p><p>第二十三卷<br>不幸是由细枝末节的小事开始。<br>I don’t need anything special happily.</p><p>第二十四卷<br>根本没有天才。<br>There is man who accomplished a great achievement.</p><p>第二十五卷<br>只要以七成的力量或者，人生就会一帆风顺。<br>When challenging to exceed one hundred percent,it can grow.</p><p>第二十六卷<br>我踏出了一步，因为诸多幸运的加持，让我走完了自己的人生。<br>不是每个人都会死，也不是每个人都很好运。<br>要怎么做，是你的自由。<br>I worked hard, lived hard, died happy. I was satisfied.</p><p>蛇足篇<br>第一卷<br>旁人眼里波澜不惊的人生，于其本人而言，也可谓是波乱万丈。<br>——It may look like a calm life, but it’s hard.</p><p>漫画<br>第一卷<br>眼前是悬崖。要往前踏出一步狠狠摔向地面，<br>或者想裹足不前继续承受辱骂，都是你的自由。<br>I do not want to work,whatever it may be said by whom.</p><p>第二卷<br>获得自由羽翼的人，将会失去双脚作为代价吧。<br>It is difficult for inoccupation to attach a leg to the ground and to work.</p><p>第三卷<br>金钱名誉皆非必须，唯有觉悟才是。<br>The resolution judged from a white eye from the world.</p><p>第四卷<br>我能轻松办到的事情，你无法办到；<br>然而也有你才能轻易完成的事。如此而已。<br>Since working is very difficult,please do not say simply.</p><p>第五卷<br>以言语开始的友情，十分脆弱易毁。<br>Friendship is made with time and behabior.</p><p>第六卷<br>人人不同，每个人都好；人人相同，那就更好。<br>It will not be blameed if it can be the same as everybody.</p><p>第七卷<br>懂得败北滋味的人，是强者。<br>The way of daring to become inoccupation.</p><p>第八卷<br>新朋友未必是品行良善之人。<br>I get away for the friend who doesn’t have to be good man.</p><p>第九卷<br>并非每个人，都能够活得自由自在。<br>The moment hope could be seen,it is the easiest to be thrust down into hell.</p><p>第十卷<br>要在女人面前耍猴戏是无所谓，但是要被当猴子耍可就完全免谈。<br>Two dimensions are most as expected.</p><p>第十一卷<br>若想求苦，就往前行；如要寻乐，另去他方。<br>True prosperity is ahead of the pain.</p><p>第十二卷<br>即使被人摆布、嘲笑，仍然会有所收获。<br>When having to exert oneself,I have that.</p><p>第十三卷<br>唯有伸出手的人，才能摘得高岭之花。<br>Only the person who brought up with affection can make a flower of a large wheelbloom.</p><p>第十四卷<br>狐假虎威之人，无需恐惧。<br>It’s unnecessary,I’m afraid.</p><p>第十五卷<br>有两处家乡者，会视何处为他乡？<br>The home for you is the foreign land fo me.</p><p>第十六卷<br>即使如何努力，仍然会有无能为力的事。<br>When there is also help by an impoosible thing by itself,it’s got over.</p><p>第十七卷<br>结婚是人生的坟墓。<br>Neet is zombie.</p><p>第十八卷（无台版）<br>衣食住的住可不单单是指睡觉用的床。<br>Living means connecting with people and blending into the environment.</p><p>转移迷宫篇广播剧cd（无台版）<br>昨天失去的东西很多，但明天得到的东西会更多<br>The one you have got is the compilation by which everything is the past.</p>]]></content>
    
    
    <categories>
      
      <category>ACG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记整理</tag>
      
      <tag>无职转生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日随笔</title>
    <link href="/2023/05/07/daily-blog/"/>
    <url>/2023/05/07/daily-blog/</url>
    
    <content type="html"><![CDATA[<p>搬运自我在水源社区的贴子<a href="https://shuiyuan.sjtu.edu.cn/t/topic/144302">Elysia的日记♪~</a></p><p>原话题是一个吐槽日记楼，记录一下每天的胡言乱语<br><del>同时又是用户名是Elysia，行文大多用爱莉说话的语气 后面发现太难了</del></p><p>因为论坛是支持Emoji功能的，我也还没有在博客上部署PyMdown Extensions之类的插件，所以会有不少<code>: :</code>包裹的单词，其实是Emoji哈~</p><hr><p>不会照搬原贴 一些水的日记会筛掉 也许也不会x</p><p>原文放了很多表情包 搬运的过程中可能不会搬 懒了x</p><p>这里会写一些更多的个人意见和看法吧</p><hr><h1 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h1><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><h3 id="2023年3月21日"><a href="#2023年3月21日" class="headerlink" title="2023年3月21日"></a>2023年3月21日</h3><p>昨天下雨被淋到了 :crying_cat_face:今天手里紧紧拿着伞，车筐备着雨衣，绝对不会再被淋到了 :kissing_cat:</p><p> 2023年3月21日凌晨12点01分 今天凌晨的时候在聊天群里开了一起听，分享了一些最近循环的歌，结果一整天都有人在呢♪～</p><p>今天是第二十三个世界睡眠日，所以要早睡（指0点）。明天下午会拿着相机陪出cos的水友逛百团 :kissing_heart:</p><h3 id="2023年3月22日"><a href="#2023年3月22日" class="headerlink" title="2023年3月22日"></a>2023年3月22日</h3><p>百团百团，逮到好多水友，大家都好有才华好帅好漂亮哦♪~</p><p>工科创工科创，万用表测出来相当漂亮的数据，老师调侃说回去要第一个拆我的看 :smirk_cat:</p><p>那就拆罢，他会看见我用了一堆焊锡的板子</p><p>形策形策，意外地发现北老师@北北雁南飞飞南宴北来代课了，激情地听了两节课，真的是有东西的 :hugs:</p><p>睡觉睡觉，下雨天好适合睡觉，差点睡过早八睡过早十睡过这个世界</p><h3 id="2023年3月23日"><a href="#2023年3月23日" class="headerlink" title="2023年3月23日"></a>2023年3月23日</h3><p>听着电机V曲写了一晚上工科创实验报告，很带感，已经变成电机了</p><p>不过Word排版真的好难操作，每一个小操作得到的结果永远和预期不符，插入图片更是逆天，好好的文字版面直接炸掉力</p><p>BTW，还听到好多同学说万用表在拆机检测，真的感觉好奇怪的事情，突然工科创就起节奏，通知回收拆机，还明确指出查淘宝购买，甚至水源还有人半实名开喷授课老师x)</p><p>唉，不过今天在致远游泳馆看到好漂亮的垂丝海棠，真的好喜欢校园现在的样子，在北方都看不到这么多属于春天的多姿多色 :cherry_blossom::cherry_blossom::cherry_blossom:</p><h3 id="2023年3月24日"><a href="#2023年3月24日" class="headerlink" title="2023年3月24日"></a>2023年3月24日</h3><p>嗨呀，当然在咯，爱莉什么时候都会回应期待但是写日记让我想起一些小学作业不好的回忆了</p><p>今天也好冷好冷，什么时候才能转暖呢，明明都入春了<br>上海市人民政府——确认：申城3月4日正式入春 上海明天最高气温可达26℃ </p><p>上午在东转排到了鸭鸭的抱枕，但是没晚会票<br>下午又被雨淋了x)，但是没晚会票<br>得知晚会有《Da Capo》的演唱，好羡慕但是没晚会票<br>但是没晚会票但是没晚会票但是没晚会票但是没晚会票但是没晚会票<br>做梦都想去米哈游但是没晚会票<br>星穹铁道定档了但是没晚会票<br>但是没晚会票</p><h3 id="2023年3月25日"><a href="#2023年3月25日" class="headerlink" title="2023年3月25日"></a>2023年3月25日</h3><p>今天被疯狂开盒，<br>半马被面试，面试官问我：你是水源的爱莉希雅吗？<br>东下院自习室里：你是水源的爱莉希雅吗？<br>QQ被加好友：你是水源的爱莉希雅吗？<br>甚至还变成问你是爱莉希雅的狗吗<br>:crying_cat_face:到底是怎么回事 开盒那种事情不要啊<br>所以我是水源的爱莉希雅吗？</p><p>今天上午还是研究生毕业典礼，看着学校里穿着学士服的学哥学姐们，不禁感慨自己还能不能毕业<br>每天都好摸鱼，而且才刚刚踏入大学校园……</p><p>对了，吃完晚饭路过东中院门口，帮毕业的学哥学姐拍照留念了 :smiling_face_with_three_hearts:</p><p>明天下午菁菁堂看《铃芽户缔》 :smiling_face_with_three_hearts: 在开票第一时间买了5张，好耶</p><h3 id="2023年3月26日"><a href="#2023年3月26日" class="headerlink" title="2023年3月26日"></a>2023年3月26日</h3><p>菁菁堂看电影喱，虽然放映机器一言难尽…… </p><p>现在趁热回忆一下，<del>写完发现好像没那么简单</del>写个影评吧——</p><blockquote><p>details&#x3D;”影评（含剧透）<br>我想从三条线——梦境线&#x2F;封印线&#x2F;感情线来展开先回忆剧情。</p><ul><li>梦境线<br>或者说女主的成长线。<br>故事的开始是女主铃芽的梦境，梦中看到了星空下的草坪，后续我们得知这就是剧中设定【常世】，一个逝去之人才能抵达的地方。<br>女主还多次见到梦中的场景，全片看完得知梦就是女主的回忆。梦中的故事大概是这样的，小时候的女主在一片<em>着火</em>废墟中寻找自己的母亲，她向幸存者哭诉，寻找自己失散的母亲。废墟中，小铃芽找到了一扇<em>门</em>，推开后，她看到了常世的美景，找到了自己的“妈妈”，到此戛然而止——<br>在影片的开始我们会觉得小铃芽找到了自己的母亲，但故事的最后我们才知道，铃芽把椅子交给小时候的自己，并告诉小铃芽，虽然世界并不美好<del>为世界上所有的美好而战</del>，但是现在的我就是未来的铃芽，就是在给小时候的自己传递出去希望。并目送小铃芽走出去。这个椅子是铃芽妈妈的遗物，也是最后铃芽之旅之后达成自我和解的象征。铃芽最后才终于领悟，其实最珍惜的东西她早就得到了。那就是关爱和希望。</li><li>封印线<br>首先我想说，新海诚还是那么爱自然灾害，陨石——暴雨——地震……<br>影片中女主小时候经历的地震就是日本3.11大地震，同时闪回的记忆中有船出现在屋顶的画面，这是地震引发的海啸——向地震中所有受害的人们表达默哀 :candle:<br>影片中，地震原因被做出了艺术演绎的阐释：蚓厄，一种具现化的物质。蚓厄从“往门”中涌出，在空中聚集成一定大小后，被金色的线牵引、坠落，引发地震。在门被关上的过程中有这样几个意象：蚓厄、要石、猫猫、往门、金色的线、念动咒语后显现的蓝色的能量、和闭门师封印所显现的锁孔和锁。</li><li>地震原因的艺术化演绎——蚓厄与往门<br>电影中铃芽在草太家翻阅闭门师记录的文献时，呈现的最早的一场地震是 <strong>1923年东京大地震</strong>，查阅相关资料得知当时日本军方有人将地震归罪于朝鲜人，在震后开展的大屠杀，杀死数千朝鲜族和中国劳工。更是把东京大地震用来佐证他们对东亚大陆的侵略政策，在戒严期间清洗了保守派政客，掌握政权后开始推行军国主义。在天灾之后，开启了远甚天灾的人祸历程。<br>所以沿用知乎用户的观点，我也认为蚓厄也许是 <strong>军国主义的怨灵</strong>。电影中蚓厄诱发地震，从日本九州、四国岛，然后前进到东京。很容易联想到日本西南明治维新四强藩的故事，以及他们后来在侵略战争时对日本海陆军方的控制。而影片中草太下坠时水下的场景和最后铃芽跳入往门后寻找草太见到的景色，遍地的并不是地震诱发的洪水，而是熊熊燃烧的火焰。故而联想，更可能是 1945年东京大轰炸的现场。这下倒是感觉给这部青春浪漫电影添上了反战的色彩。<br>当然查阅考据资料还有这两种说法：</li><li>日本传统信仰中，频发地震的一种来源是地底的巨型鲶鱼(ナマズ&#x2F;namazu)。电影里因为女主角的名字是すずめ&#x2F;suzume，谐音是麻雀，因此将鲶鱼(ナマズ&#x2F;namazu)改成蚯蚓(みみず&#x2F;mimizu)，体现出天敌关系。</li><li>来自村上春树的小说集《神的孩子全跳舞》中的《青蛙君救东京》，文中有着潜伏在东京地下的巨大蚯蚓，主角通过与蚯蚓战斗阻止了地震等情节。其实《神的孩子全跳舞》就是一本以阪神大地震为主题的小说集，新海诚可能从这本书获得了《铃芽之旅》的灵感。<br>让我们继续回忆，这些“往门”出现在什么地方？一方面为由于自然灾害废弃的场所，比如小学教学楼和铃芽的故乡，另一方面则是经济等因素荒废的温泉街、游乐场，象征了日本的经济衰败。<br>而在东京，当我在思考东京都内的废墟是什么、往门在哪里时，很明显高度城市化、寸土寸金的东京大都市圈应该不会有这样的废墟，蚓厄居然在铁路轨道口涌出，而往门居然在河底——弱化了具体位置的洞穴，门本体呈现的是则日本神社门的模样。这里面是否也有新海诚对城市化影响的思考呢？</li><li>推动剧情发展的线索——要石和猫猫<br>剧情设定日本分别在东京与九州有东西两块「要石」镇压蚯蚓，在日本民间传说中也确实有要石镇压大鲶鱼的说法，在茨城县鹿岛神宫、千叶县香取神宫、三重县大村神社、宫城县鹿岛神社等地都有要石封印。 要石虽然只有十几公分露出地面，但据说底下非常深长，几乎不见底。<br>而影片中，西要石被女主无意拔出后（为什么封印那么麻烦，却都那么容易被解除……），变做了猫猫“大臣”。而出于对自然、动物的敬畏，日本人民把自己看不见、摸不着、无法控制的力量都称为妖怪”，<br>我倾向于认为猫猫是要石的化身，猫猫本体就是石头，而其具有的权能是人们对美好生活期望带来的，有了人们对美好的向往，蚓厄被镇压。<br>而猫猫被放出后，镇压蚓厄的权能被给出，则草太要作为新的要石，可能这种职责是闭门师世世代代背负的责任，所以爷爷无需听铃芽多言就能知道发生了什么，并且指出闭门师是愿意奉献自我来拯救千百万人性命的。虽然猫猫给出权能的理由很奇怪，是想和铃芽一起生活。但是最后猫猫见到铃芽也为了牺牲自己来拯救草太、镇压蚓厄，便又主动承担责任。<br>而对于左大臣为什么那么大，我猜测可能是镇压时长的原因，黑猫猫左大臣所在的往门很明显是神社风格、白猫猫大臣所在的则是温泉镇。<br>而大臣一路把铃芽往东要石处领，说不定是东西要石都需要重新镇压呢？毕竟爷爷说了，草太作为要石的职责会有数十年，那数十年之后呢？而且爷爷的说法很奇怪，<strong>草太变成要是后，蚓厄是还没有被完全镇压的</strong>。电影中我们发现，铃芽再次进入常世的时候，蚓厄并未被镇压，还是会逃出往门，所以左大臣和蚓厄立刻开始了搏斗，所以草太只镇住了一处，还是需要另一个。<br>当然这些就都是我自己瞎猜测的了了。<br>对生活美好的回忆——封印咒语<br>闭门师关闭往门时，要感知这片土地的记忆，想象曾经在这里人们的生活，并念诵咒语——<blockquote><p>思而复思，<br>祈唤日不见之神，<br>祈唤祖祖代代之土地神。<br>此山此河，承恩己久，不胜感激。<br>诚惶诚恐，诚惶诚恐。<br>谨遵神冒，予以奉还。</p></blockquote></li></ul><p>男主草太指导铃芽“锁门”的台词大概是这样的——<strong>请回忆这土地上平静生活曾经赐予过我们的美好与快乐，怀着感恩的心意去接受它的消亡，然后把恩情“奉还”以封印灾厄。</strong><br>人们说新海诚的电影重在人与人的联系，在本部作品中，我们并没有看到传统的人类反派。</p><ul><li>铃芽与草太、铃芽与姨妈、铃芽在旅行途中遇到的人们</li><li>草太与爷爷、草太与好兄弟</li><li>姨妈与铃芽、姨妈与好兄弟、姨妈与他的同事<br>在疫情之后，人们愈发珍惜和亲朋好友的关系，这种人与人交往发生联系的温情内核，我还是很喜欢的。<br>感情线<br>不想分析感情，会勾起不好的回忆 :crying_cat_face:<br>但是作品中的爱恋之情确实可以解释铃芽的行动，但是又感觉缺少很多增进感情互动（铃芽亲凳子？ ），所以对于感情线仁者见仁智者见智。<br>水友也可以发表自己的意见和看法，毕竟作为青春浪漫电影，感情线还是挺重要的，<del>对吧对吧对吧，不然那么多情侣去看什么呢</del>。</li></ul></blockquote><p>这是今天的日记哦，影评不算数√</p><p>下午菁菁堂看电影，体验真的一言难尽，那个抽风的画面 :innocent:。<br>但是画面和音乐还是一如既往地质量上乘，当然感情线真的勾起了一些不好的回忆，百味交杂啊 :crying_cat_face:</p><p>然后今天下围棋被薄纱了，我的传统围棋完全不行了，也许现在连业余一段都评不上了吧</p><p>ddl战士永远在和ddl搏斗，我一定会将ddl驱逐出这个世界。即使把自己的生命压进枪膛，也要开出这枪和ddl战至终章 :pouting_cat:</p><h3 id="2023年3月27日"><a href="#2023年3月27日" class="headerlink" title="2023年3月27日"></a>2023年3月27日</h3><p>今天忠实的二餐信徒被朋友拐到一餐了，干锅鸡感觉还不错x</p><p>但是我是忠诚的二餐信徒，主肯定会怜悯我的 :pray:t2:因为我每天都去圣所，对我的主祷告<br>╈升天╈升天╈升天╈升天╈升天╈升天╈升天╈<br>image</p><p>最近为什么好多熟人和我打招呼也都不喊我昵称了 :pleading_face:<br>直接当着好多生人的面喊爱莉希雅，不要这样<br>有宿舍楼底这么喊我的直接被我爆锤</p><h3 id="2023年3月28日"><a href="#2023年3月28日" class="headerlink" title="2023年3月28日"></a>2023年3月28日</h3><p>很佩服拿鼠标写板书的老师 :saluting_face: ，难以想象是如何控制的，之前玩你画我猜用鼠标画的那叫一个抽象呀<br>image</p><p>是努力写报告的一天，最常用的语言迟早有一天变成Tex，所以报考上海报告大学喵<br>image</p><p>然后Github Pro学生申请疯狂被拒 :crying_cat_face: 不是很懂为什么它老是这么拒绝我，profile就差把我三次元的名字写进去了</p><blockquote><p>You are unlikely to be verified until you have completed your GitHub user profile,with your full name as it appears in your academic affiliation document plus a short bio.<br>💖 The GitHub Education Team<br>image</p></blockquote><h3 id="2023年3月29日"><a href="#2023年3月29日" class="headerlink" title="2023年3月29日"></a>2023年3月29日</h3><p>本来是想窜访隔壁华师的，但是下午好忙 :crying_cat_face: 唉没去成<br>我怎么一读就读出来是华师大的，兄啊，你好重的口音</p><p>去瓦西大传播Elysia的威名～</p><p>image</p><p>今天被朋友拿GPT写了逆天同人，在食堂差点笑的不省人事，周围人的对我目光逐渐变的奇怪</p><p>不是，这GPT到底吃了些啥啊，同人写的真好，建议加大力度）））<br>image</p><p>冬季1月番剧逐渐收尾，要到春季4月番剧咯，时间过得好快呀，23年第一季度就要过去了<br>发现自从过了12岁，就开始了不在意自己的年龄了，今天几岁了呢啊啦啦好像是永远十八岁，小时候还天天数着什么时候到本命年呢<br>image</p><h3 id="2023年3月30日"><a href="#2023年3月30日" class="headerlink" title="2023年3月30日"></a>2023年3月30日</h3><p>还是好好写吧）</p><p>今天体育课是代课老师上的，是一位教擒拿格斗的老师傅，带着很浓江浙口音<br>就像习题课一样，老师傅问我们学了什么，它一个个指导 ，很有武侠剧的感觉:saluting_face: :saluting_face: :saluting_face:<br>image</p><p>习概课的bro减震程度有一手，全过程民主说着说着就感觉不是那么个意思了<br>要做小可爱，不可以减震<br>image</p><p>然后我真的好磕 @Cierra @wbzd ，两位什么时候结婚了，双向奔赴真的好甜</p><h3 id="2023年3月31日"><a href="#2023年3月31日" class="headerlink" title="2023年3月31日"></a>2023年3月31日</h3><p>今天美美地睡到早十，好惬意 :smiling_face_with_three_hearts:<br>image</p><p>中午下单了一个充电宝，过了4个小时就到了，感慨江浙沪包邮区的魅力<br>image</p><p>晚上在自习室听歌，突然耳机没电，音乐外放了，吓得我抓手机摁音量键 :crying_cat_face:<br>很抱歉打扰了自习的同学，真的想找个地缝钻进去<br>image</p><p>然后，然后，我的Github Pro学生包申请终于过了！！！<br>image<br>image</p><p>申请了9次，可算过了，哇的一声就噗通给github跪了<br>image<br>参考的申请攻略在这里，maybe useful for you</p><p><a href="https://zhuanlan.zhihu.com/p/617001126">2023.3申请github copilot x 学生认证以及Jetbrain专业版学生教育免费教程</a></p><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><h3 id="2023年4月1日"><a href="#2023年4月1日" class="headerlink" title="2023年4月1日"></a>2023年4月1日</h3><p>凌晨学会了全属性魔法，三相贯通，看到了海的那边 :exploding_head:<br>然后立马决定不看了，自己的辨别力还需要提高))xx 这个时候少看为好<br>image</p><p>下午凹深渊上班，然后想起来BA国服版号下来了，所以我要玩国际服<br>不会有人觉得国服会完完整整的下来吧<br>BA的赛璐璐画风好干净，大段的色块看起来单调但是突出了人物表情的表现<br>音乐也有future base和kawaii base的感觉，喜欢 :smiling_face_with_three_hearts:<br>image</p><p>晚上和朋友约饭海宁煲，好吃好吃好吃好吃，下次还吃<br>就是吃晚饭聊感情话题给我干沉默了…… :face_holding_back_tears:<br>现在还在收拾感情，唉<br>image</p><p>晚上还打了桌游，感慨朋友减震水平之高，玩桌游都能来）x<br>当然我不喜欢减震）））血别溅我身上 :pouting_cat:<br>image</p><p>分享一首歌</p><p><a href="https://www.bilibili.com/video/BV1LV4y1x7QD/?share_source=copy_web&vd_source=e28665bc9a3bb5434c7b89d5d4a25223">【Reol - ‘No title’ Seaside Remix】 Reol - ‘No title’ Seaside Remix_哔哩哔哩_bilibili</a></p><blockquote><p>慣れた痛み、焦る呼吸とビート<br>已经习惯的疼痛 急促起来的呼吸与心跳<br>気付かないふりしてまた一人<br>对其佯装不知仍独自一人<br>何が正当？ないな永劫<br>什么是正确的？没有什么永远啊<br>誰が間違った対価払うの<br>谁在付出着错误的回报</p></blockquote><h3 id="2023年4月2日"><a href="#2023年4月2日" class="headerlink" title="2023年4月2日"></a>2023年4月2日</h3><p>茶饱饭足，开写！</p><p>早上被 @Ink_mirror 几个电话喊醒，还以为暴雪又要搞幺蛾子寄了，结果我还迷迷糊糊地就接受了采访？)怪，太怪了</p><p>今天的爱莉是我叫醒的</p><p>image</p><p>宿舍群上午是志愿服务问卷，下午是校园开放问卷，看着那么多人发，不像是什么课程作业 :thinking:是有什么项目在搞面试招人吗，怎么都发问卷呢♪~<br>image</p><p>晚上和DDL搏斗，奇怪，爱莉在与DDL的搏斗中死去了，我怎么会做这样的梦</p><h3 id="2023年4月3日"><a href="#2023年4月3日" class="headerlink" title="2023年4月3日"></a>2023年4月3日</h3><p>又被淋了…… :crying_cat_face: 怎么和因果律武器似的，下雨必被淋</p><p>被淋</p><p>被雨淋了</p><p>image</p><p>今天好大的风呀♪~<br>让我想起在北方的冬日，刺骨寒风从袖口涌入，整个人缩成一团迎风回寝室；<br>也让我想到在南方的夏季，天色突的发狠变黄，忽而狂风大作要下暴雨，我就总是会和家里人开玩笑说“黑风老妖来啦哈哈”<br>image</p><p>转眼第八周了，好快）））））） 有点焦虑了要，为什么那么多课要期中考((x<br>image</p><h3 id="2023年4月4日"><a href="#2023年4月4日" class="headerlink" title="2023年4月4日"></a>2023年4月4日</h3><p>又被淋了，无所谓了，开始享受雨点落在身上的感觉……（怪<br>image</p><p>下晚课回去路上给家里人打了电话，清明节放假又不能回去上坟喽，因为疫情已经4年没回老家了<br>好想家呀，好想家呀……<br>image</p><p>工科创后半部分是微电子的老师，结果一个班没一个微电子的 :joy_cat:给老师整不会了，上课在说推荐大家转专业来我们微电子、考研也可以选择来微电子<br>image</p><h3 id="2023年4月5日"><a href="#2023年4月5日" class="headerlink" title="2023年4月5日"></a>2023年4月5日</h3><p>电脑有各种奇奇怪怪的feature :smile_cat:比如说gcc –version 是4.8 Python是32bit(逃)</p><p>玩了玩腾讯养的AI画图模型，微信小程序搜“腾讯智影”，它是不是吃了好多白毛</p><p>晚上在KTV唱了TruE :smiling_face_with_three_hearts: :smiling_face_with_three_hearts:英桀们的故事必须要有一个完美的结局♪</p><h3 id="2023年4月6日"><a href="#2023年4月6日" class="headerlink" title="2023年4月6日"></a>2023年4月6日</h3><p>下雨天真好，已经被调教好了，多下点多下点，反正都要被淋 :broken_heart:<br>image</p><p>然后完全没感觉昨天放了假））） 今天照样犯困，作业也依旧积压在那儿，这是怎么一绘世呢<br>image</p><p>下午习概课报告写着写着不小心睡过去了，结果一下课突然坐起来，整个人发懵，下一节体育课差点站着睡着…… :zzz::zzz::zzz:<br>image</p><p>学长突然要给我寄明信片，羡慕，自己也买了好多明信片和信封信纸，但是一直在摸鱼，没找到机会写一个寄出去 :smile_cat: 要开始考虑写回信回寄明信片了 :pouting_cat:<br>image</p><p>周末要做校友返校志愿者 :smiling_face_with_three_hearts: 希望不会临场糊嘴说错话</p><h3 id="2023年4月7日"><a href="#2023年4月7日" class="headerlink" title="2023年4月7日"></a>2023年4月7日</h3><p>今天起早八去参加设计学院新大楼启用仪式了，内部真的很有感觉，进去的第一感觉就是一种柔和和张力的结合感，内部光线柔和，大厅的木纹立柱和横梁又有一种向上的力量感 :smile_cat:<br>但是红色的外立面好奇怪 交大你就那么喜欢这种砖红色嘛<br>image</p><p>中午去喝了Manner，又逛了逛大楼，好多内饰和家具都没装，很轻松，走着走着困了<br>image</p><p>晚上被Coding折磨，怎么能有documentaion那么逆天 :rage::rage::rage:<br>image</p><p>明天做校庆志愿者 :kissing_cat: 好耶，但是领的文化衫不小心尺码大了）））可以当裙子穿了（什么）</p><h3 id="2023年4月8日"><a href="#2023年4月8日" class="headerlink" title="2023年4月8日"></a>2023年4月8日</h3><p>做了志愿者 上班 复习了</p><p>今天心情不是很好</p><p>咕了</p><h3 id="2023年4月9日"><a href="#2023年4月9日" class="headerlink" title="2023年4月9日"></a>2023年4月9日</h3><p>好好好，心情好起来了 :smiling_face_with_three_hearts:<br>朋友建议我出去溜达溜达，今天学校里转了转晒晒太阳果真心情好多了♪~<br>所以真不能在寝室干坐着发呆</p><p>image</p><p>起了个早去自习室，结果趴着睡到饭点，还不如在寝室躺床上睡个舒服呢<br>image</p><p>下午前面来了一对小情侣，又亲又搂，真让我忍不住想棒打鸳鸯 :imp:<br>image</p><p>晚上被中央财经大学的同学戳，说是小组作业要采访我 :pouting_cat: 太怪了 太怪了<br>imageimage</p><p>周末过去了，噩梦的下半学期要开始了 :persevere::persevere::persevere:<br>大物实验电路实验工程实践<br>希望自己别被创似了<br>image</p><h3 id="2023年4月10日"><a href="#2023年4月10日" class="headerlink" title="2023年4月10日"></a>2023年4月10日</h3><p>噩梦第九周开始了<br>掐指一算，怎么除了五一开始接下来到十三周几乎周周有考试啊 :scream_cat::scream_cat::scream_cat::scream_cat:<br>image</p><p>今天走在思源湖旁边<br>柳絮飞来飞去，要似了<br>石楠花杀不死我，柳絮直接迎头痛击<br>image</p><p>现在不是很想面对明天的工程实践+工科创，先摸一会儿吧，就摸一会儿…<br>image</p><h3 id="2023年4月11日"><a href="#2023年4月11日" class="headerlink" title="2023年4月11日"></a>2023年4月11日</h3><p>工程实践好好玩（？），学创的老师热情满满，体验很好！<br>希望工程实践不只是第一节课体验好<br>好像还有铣床，到时候弄什么出来呢 :thinking:</p><p>我急了 表情包相册加载不出来了</p><p>自习室到点了，回去再补完 补好了♪~</p><p>下晚课走在思源湖边，山樱花瓣在飘诶，好漂亮 :smiling_face_with_three_hearts:</p><p>出自习室这一个小时太奇妙了 :smiley_cat:</p><p>先是去高麦点了鸡蛋灌饼，边走边炫的时候，被路牙子什么东西绊了一下，低头一看是自助玫瑰</p><p>接着走路的时候Boar姐姐发了帖子，看帖子的时候还在炫鸡蛋灌饼，又差点被外卖小哥创翻</p><p>回了寝室和室友聊天，聊着聊着想喝水，发现水杯落在冬夏了）））xxxx 接完水给放在饮水机上面了 :face_holding_back_tears:<br>又光速下楼扫车飞去冬夏拿回来，我就这一个水杯，不能让它流落街头 :smiley_cat:</p><h3 id="2023年4月12日"><a href="#2023年4月12日" class="headerlink" title="2023年4月12日"></a>2023年4月12日</h3><p>考试退散，考试退散</p><p>下午参观了网络信息中心的机房，看了【数据删除】，感觉【数据删除】，真好啊，做梦都想去【数据删除】</p><blockquote><p>ErrorOccured:相关内容因当地政策原因不予显示</p></blockquote><p>今天第一次进图书馆（挨打），一进主图乍一看很新，但是细细的观察木楼梯上的阶痕，墙壁的粉漆，书籍的出版日期，感觉还是有些时间的沉积在里面的</p><p>没到创咖，可恶可恶可恶</p><p>晚上主图-电院-冬夏-电院-逸夫楼-主图到处跑，要似了 :persevere: 好累 饿了 抓个源友吃好了</p><blockquote><p>志愿者物资发放</p></blockquote><h3 id="2023年4月13日"><a href="#2023年4月13日" class="headerlink" title="2023年4月13日"></a>2023年4月13日</h3><p>下雨不必有我，淋雨必定有我</p><p>家人们，谁懂啊，今天走路走着走着就开始了下雨，这天也太下头了，九敏九敏<br>image</p><p>实验预习报告真的是贵物，还没弄清楚到底写多少算合适，只会照着PPT抄<br>虽然很想吐槽为什么要写实验报告，但还是认真写了x :smile_cat:<br>image</p><p>然后今天才想起来喜饼没拿，问班委说她那已经没了 :crying_cat_face:<br>这下只能留个念想明年再吃了</p><h3 id="2023年4月14日"><a href="#2023年4月14日" class="headerlink" title="2023年4月14日"></a>2023年4月14日</h3><p>美美的睡到早十，然后大英课被老师折磨 :scream_cat:<br>课文挖单词填空，一个一个点名，然后我没带书，拿头嗯回答<br>image</p><p>下午电路实验，做太快被老师拷问了))))x<br>实验原理一个个问 :smirk_cat: 还不让我走那么早，非要我帮一个同学做完一个实验才放行 :triumph:<br>image</p><p>晚上在图图，这儿灯好亮，比我电脑屏幕还亮，现在好精神……<br>image</p><p>明天电路理论，现在我翻开了第一页，开始学习电路元件是什么 :smile_cat:<br>哈哈 这下速成电路理论了<br>image</p><p>我要晒明信片！！！<br>非常好明信片<br>:heart:爱来自日本<br>赞美 @boar 姐姐 :kissing_cat::kissing_cat::kissing_cat:</p><h3 id="2023年4月15日"><a href="#2023年4月15日" class="headerlink" title="2023年4月15日"></a>2023年4月15日</h3><p>手机输入，今天没白圣女了 :face_holding_back_tears:放点手机里的奇怪图片</p><p>早上主图复习电路，是真的热啊，窗户都起雾了x</p><p>下午考试的时候，靠在窗边坐，电草的音乐声余音绕梁（物理）有点折磨啊</p><p>晚上看到两张照片 楼底的怪盗猫猫！<br>虽然看到了作案现场但是我没有阻止她，家人们我做的对吗</p><p>晚上出门，阿姨追出来提醒我添衣服，晚上冷，好暖心 </p><h3 id="2023年4月16日"><a href="#2023年4月16日" class="headerlink" title="2023年4月16日"></a>2023年4月16日</h3><p>累坏啦，去上马啦</p><p>凌晨一点多就去霍体哩，结果 @莲花南路厨师 的打光灯好亮 :sunny: 照的广场和白天似的</p><p>志愿者集合现场有台无人机炸了 替机主心痛<br>image</p><p>上了车之后就开始昏睡，然后3点多醒过来发现每日没做 玩原神玩的</p><p>image</p><p>在服务点位附近来了一个大胡碴叔叔，好帅好帅好帅，他说他是SiS品牌方的摄影师 :camera_flash:<br>接着锐评了这个能量胶太便宜，在这个点位拿补给的都是菜鸟，后面会有人大把大把抓进货</p><p>听到有跑者问有没有咖啡味的 :coffee:，很震惊，感觉对上海人微妙的刻板印象增加了，能量胶都要咖啡味的嘛</p><p>晚上激情肝ddl，太刺激啦<br>然后写一半起身发现腿酸爆了 差点再起不能 :persevere: :persevere:</p><h3 id="2023年4月17日"><a href="#2023年4月17日" class="headerlink" title="2023年4月17日"></a>2023年4月17日</h3><p>我都没有睡饱.ver流泪猫猫头.jpg<br>给大家看一下我周日的夜间睡眠时间 :innocent:<br>79adf411fc2371ea92df7829979b276<br>79adf411fc2371ea92df7829979b276<br>1170×944 72.5 KB<br>好困好困好困，困了一天，周末半马真的是把我折腾的没精神了<br>明明很精神的坐在位子上，怎么听着听着头就低下来，手就趴桌子上了呢 :pleading_face:<br>image</p><p>双腿还和灌铅似的，一伸直就和抽筋一样，酸的不行<br>差点倒在原地，差点就想爬着走路了（物理）<br>这下死宅贫弱体质暴露了<br>image</p><p>这周日上周二的课，早八到晚八，我真的好爱调休，好爱调休 :face_with_symbols_over_mouth:</p><h3 id="2023年4月18日"><a href="#2023年4月18日" class="headerlink" title="2023年4月18日"></a>2023年4月18日</h3><p>上午大英小测，给我听困了 x 只期待老师捞我了 :melting_face:<br>image</p><p>下午在学创思源楼，好闷啊，又闷又热 :hot_face::hot_face::hot_face:<br>受不了了，一拳打爆这破天气<br>image</p><p>晚上感觉有点中暑了x 亲妈给我递了一盒藿香正气水<br>吨吨吨炫下去 :triumph:<br>image</p><p>炫的时候我说这藿香正气水怎么没味儿啊，然后旁边同学说要不你闻闻<br>可我真的闻不出来 :smiling_face_with_tear: 不会是新冠后遗症吧<br>感觉寒假在家还是能闻出来饭菜香的</p><p>明天【宜】睡觉，【忌】考试。<br>最近被考试搞得好烦，攻击性拉满，见到不顺心的就想开怼 :melting_face:</p><h3 id="2023年4月19日"><a href="#2023年4月19日" class="headerlink" title="2023年4月19日"></a>2023年4月19日</h3><p>不行了 今天考了个试啥都没干xxx<br>日记没东西了 :innocent: 灵感枯竭.jpg<br>image</p><p>考完试下雨，我又**了 :persevere:<br>逃也逃不掉 躲也躲不了<br>image</p><p>晚上和几个同学聊天xx<br>狠狠地痛骂考试战线拖那么长<br>好崩溃 下周还有考试<br>image</p><p>再晚些时候和群友聊猫猫<br>真好啊猫猫 无忧无虑的<br>好想成为猫猫娘</p><h3 id="2023年4月20日"><a href="#2023年4月20日" class="headerlink" title="2023年4月20日"></a>2023年4月20日</h3><p>早上睡觉啦 哈哈 :kissing_cat:<br>平等的睡过每一个早八<br>已经学会安心摆烂啦<br>image</p><p>晚上freehug没去成<br>呜呜呜<br>好想抱抱 最近压力好大<br>image</p><p>晚上写实验报告<br>唉<br>好崩溃<br>好想出去遛弯儿</p><h3 id="2023年4月21日"><a href="#2023年4月21日" class="headerlink" title="2023年4月21日"></a>2023年4月21日</h3><p>哦 让我们康康日历<br>啊哈 明天是周六，后天是周二，大后天是周一<br>怎会如此 :persevere:<br>image</p><p>今天连做三个实验，好爽（？）<br>但是周末只有一天了 还要预习一下数电）X<br>image</p><p>羡慕储才的同学<br>恭喜我的几位朋友顺利进入储才八期 :smiling_face_with_three_hearts:</p><p>想回家x</p><h3 id="2023年4月22日"><a href="#2023年4月22日" class="headerlink" title="2023年4月22日"></a>2023年4月22日</h3><p>起床中午在食堂看到穿着校服的好多高中生（应该？）<br>好年轻啊（？） 而我当年什么学校都没参观过<br>学校只知道组织考试组织考试 :triumph::triumph::triumph:<br>image</p><p>绕着南洋路跑了一圈，好累<br>所以校园跑还是骑车比较好<br>奇怪的知识：你知道嘛，闵行校区内离北一门最近的宿舍楼是S70哦<br>image</p><p>好烦<br>明天又要上课了，还是早八到晚八的极致体验<br>然而我现在还在写周末作业<br>死了啦 都是调休害得</p><h3 id="2023年4月23日"><a href="#2023年4月23日" class="headerlink" title="2023年4月23日"></a>2023年4月23日</h3><p>哈哈 今天周二 明天周一 后天周二<br>我没有疯哈哈哈<br>我很清醒嘻嘻嘻嘻嘻<br>image</p><p>今天坐在党团活动室就被开盒了 :dizzy_face:<br>明明我是背着门坐的呀<br>突然被拍肩膀<br>——“你是水源的爱莉希雅嘛？”<br>吓死我了啦……<br>image</p><p>晚上下课去蔷薇园转了一圈<br>心情大好，但是下雨，然后浑身湿透<br>Re:0 从淋透开始的异世界生活</p><p>image</p><p>开始看推子Episode1 ♪~</p><h3 id="2023年4月24日"><a href="#2023年4月24日" class="headerlink" title="2023年4月24日"></a>2023年4月24日</h3><p>突然就降温了呢<br>最高温从32℃-&gt;15℃<br>源友们添衣保暖呀<br>image</p><p>雨后的早晨<br>骑车滑下一号桥洞的坡<br>会有一种很清新、惬意的感觉</p><p>image</p><p>写的有点久x<br>在看B站视频的iframe如何关闭自动播放<br>分享今年拜年祭的一首歌<br>ilem教主写的<br>虽然拜年祭质量对于某些人群也包括我来说下滑严重<br>但好听的曲、有深度的词还是蛮讨喜的<br>image</p><p>这首歌是关于小孩、关于成长的故事<br>歌词简单<br>但是触动了我很久</p><p>为什么明天又是周二？为什么明天又是周二？为什么明天又是周二？<br>为什么明天又是周二？为什么明天又是周二？为什么明天又是周二？<br>为什么明天又是周二？为什么明天又是周二？为什么明天又是周二？</p><blockquote><p>五一调休，今天是周一，昨天上的周二课，明天还是周二</p></blockquote><h3 id="2023年4月25日"><a href="#2023年4月25日" class="headerlink" title="2023年4月25日"></a>2023年4月25日</h3><p>楼上有讨论Elysia名字由来的<br>不禁想写点什么<br>毕竟我高低也算崩学家<br>对米忽悠世界观设定还是有了解的<br>可惜现在时间不够，晚点补上</p><p>周二-周一-周二的噩梦结束啦<br>明天考完数电<br>美美迎接假期<br>习概pre 通识课视频 形策论文<br>刚刚我在说什么啊 真不熟<br>image</p><p>玉兰面包真的好吃<br>一次都买好多<br>我还有在车筐里放一两个的习惯<br>当做储备粮<br>饿不死我的只会使我更饿（雾）</p><p>爱莉希雅Elysia是米哈游出品《崩坏3rd》的一名女性角色，前文明对抗崩坏组织逐火之蛾中背负逐火十三英桀称号的少女。</p><p>她只在喜欢的人上花时间，但每个人都很喜欢；只在有趣的事上花心思，但每件事都很有趣——心怀如此信念，带着真诚与热情拥抱每一天的纯真女孩♪~</p><p>Elysia之名来源于古希腊神话的极乐净土。而游戏中，玩家与爱莉希雅初次相遇的往世乐土 Elysian Realm也来源于此。而仔细观察Elysian Realm首尾相接可以发现出现了爱莉希雅的刻印真我Realme。</p><p>真我之铭，这是一个编剧和玩家开的最大的玩笑。</p><p>在二次元萌属性中，粉色头发的女孩子一般都被认为是腹黑，甚至有【粉切黑】【头发越粉，切开越黑】的共识。在剧情中，爱莉希雅的伙伴曾表现出对她的不信任，主角曾怀疑这个女人，她的动机、她的实力、她的目的、她的出生，对于几乎所有人来说都是一个谜。甚至游戏设定中每一位逐火十三英桀都对应的二字刻印，爱莉希雅的刻印是黑块打码呈现出「■■」的样式。<br>就是这样一个谜一样的少女，给无数玩家带来的最真挚的情感——对美好的追求。在玩家和剧情对她的猜疑到达顶峰时，她消失了。</p><p>爱莉希雅死了。<br>印有这样6个字的传单被不知名反派撒满了永世乐土。其余的英桀惊愕无比，我们操纵的主角焦急、不解——在这个时候，游戏的UI表现封神，代表角色记忆体的立牌破碎，这代表作为记忆体的爱莉希雅永远回不来了，她真的死了。</p><p>而后，英桀们的记忆体一个个破碎，他们有的被刺杀、有的被陷害、有的自我牺牲、有的燃尽一切——<br>英桀们为了阻止反派的计划，为主角争取希望，不约而同作出了慨然赴死的决定。<br>最后的最后，一位英桀留下的后门程序帮助主角找到了可以解决这一切的方法——通过利用【记忆】与【记忆体】的关联性，在脑海中回忆爱莉的点滴，可以重塑出爱莉希雅记忆体的形象。</p><p>故事的最后，就是经典的天降英雄救世。</p><p>但是引得玩家们反思，为何当初对这样一位纯真无瑕、一心爱人的女孩抱有那么大的恶意。</p><p>她的刻印是真我，她的角色曲是《TruE》。</p><p>她永远用真心和每一个相处，她爱每一个人。甚至她是律者——崩坏作品中反派的代表，但是她是“人之律者”，自始而终，她都不曾与人类为敌。</p><p>甚至，崩坏3故事最后的最后，五万年后本世代的人类能够击溃崩坏，也是因为爱莉希雅牺牲自己，改变了崩坏的轨迹……</p><p>她深知，在告别世界时，一个人理应带走属于自己的所有，以免余众哀伤。<br>她也同样知晓，那是自己绝对无法做到的事。<br>她在这世间所留下的，实在太多……遍及一切，远至永恒。<br>于是，她决定……要最后再任性一次。<br>任性地把她曾见证的所有，把她所爱的所有，把她留下的所有……<br>把这世间所有的一切，都汇集在一起，编纂成册——<br>是啊，她最终所留下的，不过就是一段故事而已。<br>关于曾经那美好的时代，关于那未能成为英雄的十三个人……<br>就只是一个这样简单的故事，仅此而已<br>。<br>《崩坏3》动画短片「因你而在的故事」</p><h3 id="2023年4月26日"><a href="#2023年4月26日" class="headerlink" title="2023年4月26日"></a>2023年4月26日</h3><p>坏啦 一停电把日记忘了:dizzy_face:<br>实验报告写到现在<br>image</p><p>晚上停电的时候我在想<br>如果现在的生活失去电力<br>会变成什么样子<br>image</p><p>晨起而作日落而息吗<br>顶着蜡烛看书吗<br>早上向着太阳奔跑吗<br>image</p><p>好累<br>我大抵是实验报告写迷糊了吧</p><h3 id="2023年4月27日"><a href="#2023年4月27日" class="headerlink" title="2023年4月27日"></a>2023年4月27日</h3><p>晚上去理科裙楼交实验报告<br>跑过去跑回去<br>结果交我办智慧体育只记录了0.23km<br>一拳打爆智慧体育 :persevere:<br>image</p><p>现在我桌子上放了玉兰面包买的早饭<br>但是我<br>写两笔看一眼<br>写两笔看一眼<br>它可能不能活着看到明天的太阳了<br>image</p><p>留守交大到30号<br>然后美美回老家<br>真好啊 因为一些错误的历史记忆众所周知的原因<br>已经4年没回去了<br>晚上和爷爷奶奶打电话告诉他们能回去了<br>好开心 好开心</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><h3 id="2023年5月1日"><a href="#2023年5月1日" class="headerlink" title="2023年5月1日"></a>2023年5月1日</h3><p>在家悠闲躺了半天<br>下午和家里人上坟去了<br>想来 如果不是因为念祖<br>我可能根本不想回去吧<br>因为我妈永远都会把家庭氛围弄的紧张兮兮</p><p>往公墓走是一段不近不远的路<br>穿过几个巷子<br>走一段石板路<br>再过一座木桥<br>就是老家的公墓了</p><p>打记事起<br>我还在南方的时候<br>每年清明节都去祭扫<br>今年一看一个横幅<br>“推行无纸化扫墓 推动文明社会新风气”<br>颇感几分无力<br>毕竟记忆中烧纸钱是扫墓必不可少的环节<br>爷爷还是带了纸钱</p><p>在打扫墓时<br>走过来一位管理员<br>和我爷爷交谈了几句<br>他说我爷爷老是来这儿<br>这几年第一次见带着子女<br>稍微烧点纸钱吧<br>没关系的</p><p>唉<br>是啊 离开老家5年<br>又因为疫情<br>4年春节没回去了<br>清明节更是只能遥寄相思</p><p>想起那时<br>爸妈在我很小的时候就去北方打拼<br>分别时我甚至不知道爷爷奶奶为什么要哭<br>我只知道爸爸妈妈去了很远的地方<br>爷爷奶奶把我拉扯大<br>现在想来 好像我也算留守儿童 哈哈</p><p>在老家的营业厅<br>我为老人开通了宽带业务<br>回家装了路由器<br>两位老人都还是十分好学的<br>几分钟就学会了如何打微信视频<br>这样也好<br>我终于可以 也终于有人有耐心<br>去教他们使用智能手机了<br>老人们终于可以随时看到子女了</p><h3 id="2023年5月7日"><a href="#2023年5月7日" class="headerlink" title="2023年5月7日"></a>2023年5月7日</h3>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown数学公式基本语法</title>
    <link href="/2023/02/18/MarkdownLearn/"/>
    <url>/2023/02/18/MarkdownLearn/</url>
    
    <content type="html"><![CDATA[<p>MarkDown数学公式基本语法</p><h1 id="公式排版"><a href="#公式排版" class="headerlink" title="公式排版"></a>公式排版</h1><p>MarkDown中公式公式的语法与LaTeX类似，排版可以分为两种：</p><ul><li>行内公式：使用 <code>$</code>包裹公式例如：<code>$E=mc^2$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.699ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 3845.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(2975.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></li><li>独立公式：使用 <code>$$</code>包裹公式，例如：</li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.699ex" height="2.185ex" role="img" focusable="false" viewBox="0 -883.9 3845.1 965.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(2975.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><ul><li><code>\boxed</code>命令给公式加一个边框，例如：</li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.79ex;" xmlns="http://www.w3.org/2000/svg" width="9.907ex" height="3.394ex" role="img" focusable="false" viewBox="0 -1150.9 4379.1 1499.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="menclose"><g transform="translate(267, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(2975.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></g><rect x="33.5" y="-315.5" width="4312.1" height="1432.9" fill="none" stroke-width="67"></rect></g></g></g></svg></mjx-container></p><h1 id="特殊转义字符"><a href="#特殊转义字符" class="headerlink" title="特殊转义字符"></a>特殊转义字符</h1><p><code># $ &amp; ~ _ ^ \ { } %</code>这些字符在MarkDown中有特殊的意义，在需要使用这些字符的时候，需要加 <code>\</code>进行转义：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\#</span> <span class="hljs-string">\$</span> <span class="hljs-string">\&amp;</span> <span class="hljs-string">\~</span> <span class="hljs-string">\_</span> <span class="hljs-string">\^</span> <span class="hljs-string">\\</span> <span class="hljs-string">\{</span> <span class="hljs-string">\}</span> <span class="hljs-string">\%</span> <br></code></pre></td></tr></table></figure><h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gams">名称大写TeX小写TeX<br>alphaA<span class="hljs-symbol">$</span>A<span class="hljs-symbol">$</span>α<span class="hljs-symbol">$</span>\alpha<span class="hljs-symbol">$</span><br><span class="hljs-built_in">beta</span>B<span class="hljs-symbol">$</span>B<span class="hljs-symbol">$</span>β<span class="hljs-symbol">$</span>\<span class="hljs-built_in">beta</span><span class="hljs-symbol">$</span><br><span class="hljs-built_in">gamma</span>Γ<span class="hljs-symbol">$</span>\<span class="hljs-built_in">Gamma</span><span class="hljs-symbol">$</span>γ<span class="hljs-symbol">$</span>\<span class="hljs-built_in">gamma</span><span class="hljs-symbol">$</span><br>deltaΔ<span class="hljs-symbol">$</span>\Delta<span class="hljs-symbol">$</span>δ<span class="hljs-symbol">$</span>\delta<span class="hljs-symbol">$</span><br>epsilonE<span class="hljs-symbol">$</span>E<span class="hljs-symbol">$</span>ϵ<span class="hljs-symbol">$</span>\epsilon<span class="hljs-symbol">$</span><br>zetaZ<span class="hljs-symbol">$</span>Z<span class="hljs-symbol">$</span>ζζ<br>etaH<span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>η<span class="hljs-symbol">$</span>\eta<span class="hljs-symbol">$</span><br>thetaΘ<span class="hljs-symbol">$</span>\Theta<span class="hljs-symbol">$</span>θθ<br>iotaI<span class="hljs-symbol">$</span>I<span class="hljs-symbol">$</span>ι<span class="hljs-symbol">$</span>\iota<span class="hljs-symbol">$</span><br>kappaK<span class="hljs-symbol">$</span>K<span class="hljs-symbol">$</span>κ<span class="hljs-symbol">$</span>\kappa<span class="hljs-symbol">$</span><br>lambdaΛ<span class="hljs-symbol">$</span>\Lambda<span class="hljs-symbol">$</span>λ<span class="hljs-symbol">$</span>\lambda<span class="hljs-symbol">$</span><br>muM<span class="hljs-symbol">$</span>M<span class="hljs-symbol">$</span>μ<span class="hljs-symbol">$</span>\mu<span class="hljs-symbol">$</span><br>nuN<span class="hljs-symbol">$</span>N<span class="hljs-symbol">$</span>ν<span class="hljs-symbol">$</span>\nu<span class="hljs-symbol">$</span><br>xiΞ<span class="hljs-symbol">$</span>\Xi<span class="hljs-symbol">$</span>ξ<span class="hljs-symbol">$</span>\xi<span class="hljs-symbol">$</span><br>omicronO<span class="hljs-symbol">$</span>O<span class="hljs-symbol">$</span>ο<span class="hljs-symbol">$</span>\omicron<span class="hljs-symbol">$</span><br><span class="hljs-built_in">pi</span>Π<span class="hljs-symbol">$</span>\<span class="hljs-built_in">Pi</span><span class="hljs-symbol">$</span>π<span class="hljs-symbol">$</span>\<span class="hljs-built_in">pi</span><span class="hljs-symbol">$</span><br>rhoP<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span>ρ<span class="hljs-symbol">$</span>\rho<span class="hljs-symbol">$</span><br>sigmaΣ<span class="hljs-symbol">$</span>\Sigma<span class="hljs-symbol">$</span>σ<span class="hljs-symbol">$</span>\sigma<span class="hljs-symbol">$</span><br>tauT<span class="hljs-symbol">$</span>T<span class="hljs-symbol">$</span>τ<span class="hljs-symbol">$</span>\tau<span class="hljs-symbol">$</span><br>upsilonΥ<span class="hljs-symbol">$</span>\Upsilon<span class="hljs-symbol">$</span>υ<span class="hljs-symbol">$</span>\upsilon<span class="hljs-symbol">$</span><br>phiΦ<span class="hljs-symbol">$</span>\Phi<span class="hljs-symbol">$</span>ϕ<span class="hljs-symbol">$</span>\phi<span class="hljs-symbol">$</span><br>chiX<span class="hljs-symbol">$</span>X<span class="hljs-symbol">$</span>χ<span class="hljs-symbol">$</span>\chi<span class="hljs-symbol">$</span><br>psiΨ<span class="hljs-symbol">$</span>\Psi<span class="hljs-symbol">$</span>ψ<span class="hljs-symbol">$</span>\psi<span class="hljs-symbol">$</span><br>omegaΩ<span class="hljs-symbol">$</span>\Omega<span class="hljs-symbol">$</span>ω<span class="hljs-symbol">$</span>\omega<span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><p>名称大写TeX小写TeX<br>alphaA<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container>α<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></svg></mjx-container><br>betaB<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 759 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>β<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container><br>gammaΓ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.414ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 625 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="393" d="M128 619Q121 626 117 628T101 631T58 634H25V680H554V676Q556 670 568 560T582 444V440H542V444Q542 445 538 478T523 545T492 598Q454 634 349 634H334Q264 634 249 633T233 621Q232 618 232 339L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path></g></g></g></svg></mjx-container>γ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container><br>deltaΔ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 833 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></svg></mjx-container>δ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.005ex" height="1.645ex" role="img" focusable="false" viewBox="0 -717 444 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container><br>epsilonE<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container>ϵ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewBox="0 -431 406 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container><br>zetaZ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.636ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 723 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g></g></g></svg></mjx-container>ζζ<br>etaH<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container>η<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.124ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 497 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><br>thetaΘ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 778 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path></g></g></g></svg></mjx-container>θθ<br>iotaI<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g></g></g></svg></mjx-container>ι<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="0.801ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 354 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D704" d="M139 -10Q111 -10 92 0T64 25T52 52T48 74Q48 89 55 109T85 199T135 375L137 384Q139 394 140 397T145 409T151 422T160 431T173 439T190 442Q202 442 213 435T225 410Q225 404 214 358T181 238T137 107Q126 74 126 54Q126 43 126 39T130 31T142 27H147Q206 27 255 78Q272 98 281 114T290 138T295 149T313 153Q321 153 324 153T329 152T332 149T332 143Q332 106 276 48T145 -10H139Z"></path></g></g></g></svg></mjx-container><br>kappaK<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.011ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 889 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g></g></svg></mjx-container>κ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.303ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 576 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D705" d="M83 -11Q70 -11 62 -4T51 8T49 17Q49 30 96 217T147 414Q160 442 193 442Q205 441 213 435T223 422T225 412Q225 401 208 337L192 270Q193 269 208 277T235 292Q252 304 306 349T396 412T467 431Q489 431 500 420T512 391Q512 366 494 347T449 327Q430 327 418 338T405 368Q405 370 407 380L397 375Q368 360 315 315L253 266L240 257H245Q262 257 300 251T366 230Q422 203 422 150Q422 140 417 114T411 67Q411 26 437 26Q484 26 513 137Q516 149 519 151T535 153Q554 153 554 144Q554 121 527 64T457 -7Q447 -10 431 -10Q386 -10 360 17T333 90Q333 108 336 122T339 146Q339 170 320 186T271 209T222 218T185 221H180L155 122Q129 22 126 16Q113 -11 83 -11Z"></path></g></g></g></svg></mjx-container><br>lambdaΛ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.57ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 694 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="39B" d="M320 708Q326 716 340 716H348H355Q367 716 372 708Q374 706 423 547T523 226T575 62Q581 52 591 50T634 46H661V0H653Q644 3 532 3Q411 3 390 0H379V46H392Q464 46 464 65Q463 70 390 305T316 539L246 316Q177 95 177 84Q177 72 198 59T248 46H253V0H245Q230 3 130 3Q47 3 38 0H32V46H45Q112 51 127 91Q128 92 224 399T320 708Z"></path></g></g></g></svg></mjx-container>λ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex;" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container><br>muM<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>μ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g></g></g></svg></mjx-container><br>nuN<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>ν<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.199ex" height="1ex" role="img" focusable="false" viewBox="0 -442 530 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D708" d="M74 431Q75 431 146 436T219 442Q231 442 231 434Q231 428 185 241L137 51H140L150 55Q161 59 177 67T214 86T261 119T312 165Q410 264 445 394Q458 442 496 442Q509 442 519 434T530 411Q530 390 516 352T469 262T388 162T267 70T106 5Q81 -2 71 -2Q66 -2 59 -1T51 1Q45 5 45 11Q45 13 88 188L132 364Q133 377 125 380T86 385H65Q59 391 59 393T61 412Q65 431 74 431Z"></path></g></g></g></svg></mjx-container><br>xiΞ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 667 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="39E" d="M47 509L55 676Q55 677 333 677T611 676L619 509Q619 508 599 508T579 510Q579 529 575 557T564 589Q550 594 333 594T102 589Q95 586 91 558T87 510Q87 508 67 508T47 509ZM139 260V445H179V394H487V445H527V260H487V311H179V260H139ZM50 0L42 180H62Q82 180 82 178Q82 133 89 105Q92 93 95 90T108 86Q137 83 333 83Q530 83 558 86Q568 87 571 90T577 105Q584 133 584 178Q584 180 604 180H624L616 0H50Z"></path></g></g></g></svg></mjx-container>ξ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="0.991ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 438 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g></g></g></svg></mjx-container><br>omicronO<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 763 726"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g></svg></mjx-container>ο<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.023ex" role="img" focusable="false" viewBox="0 -441 485 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70A" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></svg></mjx-container><br>piΠ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 750 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path></g></g></g></svg></mjx-container>π<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container><br>rhoP<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.699ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 751 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container>ρ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 517 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g></g></g></svg></mjx-container><br>sigmaΣ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.633ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 722 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A3" d="M666 247Q664 244 652 126T638 4V0H351Q131 0 95 0T57 5V6Q54 12 57 17L73 36Q89 54 121 90T182 159L305 299L56 644L55 658Q55 677 60 681Q63 683 351 683H638V679Q640 674 652 564T666 447V443H626V447Q618 505 604 543T559 605Q529 626 478 631T333 637H294H189L293 494Q314 465 345 422Q400 346 400 340Q400 338 399 337L154 57Q407 57 428 58Q476 60 508 68T551 83T575 103Q595 125 608 162T624 225L626 251H666V247Z"></path></g></g></g></svg></mjx-container>σ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></g></g></g></svg></mjx-container><br>tauT<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container>τ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container><br>upsilonΥ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.595ex" role="img" focusable="false" viewBox="0 -705 778 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A5" d="M55 551Q55 604 91 654T194 705Q240 705 277 681T334 624T367 556T385 498L389 474L392 488Q394 501 400 521T414 566T438 615T473 659T521 692T584 705Q620 705 648 689T691 647T714 597T722 551Q722 540 719 538T699 536Q680 536 677 541Q677 542 677 544T676 548Q676 576 650 596T588 616H582Q538 616 505 582Q466 543 454 477T441 318Q441 301 441 269T442 222V61Q448 55 452 53T478 48T542 46H569V0H557Q533 3 389 3T221 0H209V46H236Q256 46 270 46T295 47T311 48T322 51T328 54T332 57T337 61V209Q337 383 333 415Q313 616 189 616Q154 616 128 597T101 548Q101 540 97 538T78 536Q63 536 59 538T55 551Z"></path></g></g></g></svg></mjx-container>υ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.222ex" height="1.025ex" role="img" focusable="false" viewBox="0 -443 540 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D710" d="M413 384Q413 406 432 424T473 443Q492 443 507 425T523 367Q523 334 508 270T468 153Q424 63 373 27T282 -10H268Q220 -10 186 2T135 36T111 78T104 121Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Q200 441 225 419T250 355Q248 336 247 334Q247 331 232 291T201 199T185 118Q185 68 211 47T275 26Q317 26 355 57T416 132T452 216T465 277Q465 301 457 318T439 343T421 361T413 384Z"></path></g></g></g></svg></mjx-container><br>phiΦ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.633ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 722 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A6" d="M312 622Q310 623 307 625T303 629T297 631T286 634T270 635T246 636T211 637H184V683H196Q220 680 361 680T526 683H538V637H511Q468 637 447 635T422 631T411 622V533L425 531Q525 519 595 466T665 342Q665 301 642 267T583 209T506 172T425 152L411 150V61Q417 55 421 53T447 48T511 46H538V0H526Q502 3 361 3T196 0H184V46H211Q231 46 245 46T270 47T286 48T297 51T303 54T307 57T312 61V150H310Q309 151 289 153T232 166T160 195Q149 201 136 210T103 238T69 284T56 342Q56 414 128 467T294 530Q309 532 310 533H312V622ZM170 342Q170 207 307 188H312V495H309Q301 495 282 491T231 469T186 423Q170 389 170 342ZM415 188Q487 199 519 236T551 342Q551 384 539 414T507 459T470 481T434 491T415 495H410V188H415Z"></path></g></g></g></svg></mjx-container>ϕ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.348ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 596 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g></g></g></svg></mjx-container><br>chiX<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>χ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="1.416ex" height="1.462ex" role="img" focusable="false" viewBox="0 -442 626 646"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D712" d="M576 -125Q576 -147 547 -175T487 -204H476Q394 -204 363 -157Q334 -114 293 26L284 59Q283 58 248 19T170 -66T92 -151T53 -191Q49 -194 43 -194Q36 -194 31 -189T25 -177T38 -154T151 -30L272 102L265 131Q189 405 135 405Q104 405 87 358Q86 351 68 351Q48 351 48 361Q48 369 56 386T89 423T148 442Q224 442 258 400Q276 375 297 320T330 222L341 180Q344 180 455 303T573 429Q579 431 582 431Q600 431 600 414Q600 407 587 392T477 270Q356 138 353 134L362 102Q392 -10 428 -89T490 -168Q504 -168 517 -156T536 -126Q539 -116 543 -115T557 -114T571 -115Q576 -118 576 -125Z"></path></g></g></g></svg></mjx-container><br>psiΨ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 778 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A8" d="M340 622Q338 623 335 625T331 629T325 631T314 634T298 635T274 636T239 637H212V683H224Q248 680 389 680T554 683H566V637H539Q479 637 464 635T439 622L438 407Q438 192 439 192Q443 193 449 195T474 207T507 232T536 276T557 344Q560 365 562 417T573 493Q587 536 620 544Q627 546 671 546H715L722 540V515Q714 509 708 509Q680 505 671 476T658 392T644 307Q599 177 451 153L438 151V106L439 61Q446 54 451 52T476 48T539 46H566V0H554Q530 3 389 3T224 0H212V46H239Q259 46 273 46T298 47T314 48T325 51T331 54T335 57T340 61V151Q126 178 117 406Q115 503 69 509Q55 509 55 526Q55 541 59 543T86 546H107H120Q150 546 161 543T184 528Q198 514 204 493Q212 472 213 420T226 316T272 230Q287 216 303 207T330 194L339 192Q340 192 340 407V622Z"></path></g></g></g></svg></mjx-container>ψ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.473ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 651 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g></g></g></svg></mjx-container><br>omegaΩ<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.633ex" height="1.593ex" role="img" focusable="false" viewBox="0 -704 722 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="3A9" d="M55 454Q55 503 75 546T127 617T197 665T272 695T337 704H352Q396 704 404 703Q527 687 596 615T666 454Q666 392 635 330T559 200T499 83V80H543Q589 81 600 83T617 93Q622 102 629 135T636 172L637 177H677V175L660 89Q645 3 644 2V0H552H488Q461 0 456 3T451 20Q451 89 499 235T548 455Q548 512 530 555T483 622T424 656T361 668Q332 668 303 658T243 626T193 560T174 456Q174 380 222 233T270 20Q270 7 263 0H77V2Q76 3 61 89L44 175V177H84L85 172Q85 171 88 155T96 119T104 93Q109 86 120 84T178 80H222V83Q206 132 162 199T87 329T55 454Z"></path></g></g></g></svg></mjx-container>ω<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.407ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 622 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g></g></g></svg></mjx-container></p><h1 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h1><p>上下标分别使用 <code>^</code>和 <code>_</code>表示。例如：<br><code>$x^2$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 1008.6 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container><br><code>$x_2$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><p>默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用 <code>{}</code>包裹起来的内容。例如：<br><code>$10^10$</code>会得到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.381ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1936.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mn" transform="translate(1436.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，要得到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1790.1 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container>，应该写成 <code>$10^{10}$</code>。</p><p>大括号还能消除二义性，如 <code>$x^5^6$</code>会显示错误</p><p>必须使用大括号来界定^的结合性，如 <code>${x^5}^6$ $x^{5^6}$</code> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="3.269ex" height="2.36ex" role="img" focusable="false" viewBox="0 -1031.9 1445.1 1042.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g><g data-mml-node="mn" transform="translate(1041.6,561) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.98ex" height="2.18ex" role="img" focusable="false" viewBox="0 -952.7 1317.2 963.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></g></g></svg></mjx-container></p><p>注意区分 <code>$x_i^2$</code> : <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.661ex;" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="2.548ex" role="img" focusable="false" viewBox="0 -833.9 1008.6 1126.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(605,-284.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>和 <code>$x_{i^2}$</code>：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.433ex;" xmlns="http://www.w3.org/2000/svg" width="2.732ex" height="1.433ex" role="img" focusable="false" viewBox="0 -442 1207.6 633.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-183.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(378,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></g></svg></mjx-container></p><h1 id="根号、分数、括号、矢量"><a href="#根号、分数、括号、矢量" class="headerlink" title="根号、分数、括号、矢量"></a>根号、分数、括号、矢量</h1><h2 id="根号"><a href="#根号" class="headerlink" title="根号"></a>根号</h2><p>通用表达方式为 <code>$\sqrt[a]{b}$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.206ex;" xmlns="http://www.w3.org/2000/svg" width="2.9ex" height="2.398ex" role="img" focusable="false" viewBox="0 -969 1282 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mroot"><g><g data-mml-node="mi" transform="translate(853,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(247.3,464) scale(0.5)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="429" height="60" x="853" y="849"></rect></g></g></g></svg></mjx-container></p><ul><li>[]内的a表示开a次方，若省略则表示开平方，<code>$\sqrt{b}$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.206ex;" xmlns="http://www.w3.org/2000/svg" width="2.9ex" height="2.398ex" role="img" focusable="false" viewBox="0 -969 1282 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="429" height="60" x="853" y="849"></rect></g></g></g></svg></mjx-container></li><li>如果被开方的是单个字符，{}可以省略，<code>$\sqrt[a]b$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.206ex;" xmlns="http://www.w3.org/2000/svg" width="2.9ex" height="2.398ex" role="img" focusable="false" viewBox="0 -969 1282 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mroot"><g><g data-mml-node="mi" transform="translate(853,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mi" transform="translate(247.3,464) scale(0.5)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="429" height="60" x="853" y="849"></rect></g></g></g></svg></mjx-container></li></ul><h2 id="分式：分式有两种表示方法"><a href="#分式：分式有两种表示方法" class="headerlink" title="分式：分式有两种表示方法"></a>分式：分式有两种表示方法</h2><p>第一种使用 <code>$\frac {a}{b}$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="1.842ex" height="2.395ex" role="img" focusable="false" viewBox="0 -705.8 814.1 1058.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(255.4,-345) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><rect width="574.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container> 当a和b是单个字符时，可以省略 <code>{}</code>。<br>第二种使用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="0.995ex" height="1.672ex" role="img" focusable="false" viewBox="0 -394 440 739"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"></g><rect width="200" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>来分割一个组的前后两部分，<code>${a+1 \over b+1}$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex;" xmlns="http://www.w3.org/2000/svg" width="3.886ex" height="2.878ex" role="img" focusable="false" viewBox="0 -868.9 1717.7 1271.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1307,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mrow" transform="translate(255.4,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(429,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1207,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1477.7" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></p><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><h3 id="小括号和方括号"><a href="#小括号和方括号" class="headerlink" title="小括号和方括号"></a>小括号和方括号</h3><p>使用原始的 <code>()</code>和 <code>[]</code>即可。<code>$(2+3)[4+4]$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.074ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5778.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2111.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2611.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3000.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(3278.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(4000.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5000.9,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(5500.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container> 。</p><h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><p>由于大括号 <code>{}</code>被用来分组，因此需要使用 <code>\{</code>和 <code>\}</code>来进行转义表示大括号，也可以使用 <code>\lbrace</code>和 <code>\rbrace</code>来表示。如 <code>$\{a*b\}$</code>或者 <code>$\lbrace a*b \rbrace$</code>，都会显示为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.304ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1902.4 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(1473.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></svg></mjx-container>。</p><h3 id="尖括号"><a href="#尖括号" class="headerlink" title="尖括号"></a>尖括号</h3><p>使用 <code>\langle</code>和 <code>\rangle</code>分别表示左尖括号和右尖括号。<code>$\langle x \rangle$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.054ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1350 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="27E8" d="M333 -232Q332 -239 327 -244T313 -250Q303 -250 296 -240Q293 -233 202 6T110 250T201 494T296 740Q299 745 306 749L309 750Q312 750 313 750Q331 750 333 732Q333 727 243 489Q152 252 152 250T243 11Q333 -227 333 -232Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="27E9" d="M55 732Q56 739 61 744T75 750Q85 750 92 740Q95 733 186 494T278 250T187 6T92 -240Q85 -250 75 -250Q67 -250 62 -245T55 -232Q55 -227 145 11Q236 248 236 250T145 489Q55 727 55 732Z"></path></g></g></g></svg></mjx-container>。</p><h3 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h3><p>使用 <code>\lceil</code>和 <code>\rceil</code>表示。<code>$\lceil x \rceil$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.303ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1460 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1016,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g></g></svg></mjx-container>。</p><h3 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h3><p>使用 <code>\lfloor</code>和 <code>\rfloor</code>表示。<code>$\lfloor x \rfloor$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.303ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1460 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1016,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g></g></svg></mjx-container> 。</p><p><em>注</em> ： 原始括号不会随公式大小缩放。例如 <code>$(\frac {\frac 12}2)$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="4.025ex" height="3.485ex" role="img" focusable="false" viewBox="0 -1195.6 1779.1 1540.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(389,0)"><g data-mml-node="mfrac" transform="translate(220,584) scale(0.707)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mn" transform="translate(323.8,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="761.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1390.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 。使用 <code>\left( ...\right)</code>可以自适应地调整括号。例如 <code>$\left( \frac {\frac 12}2 \right)$</code> –&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="4.966ex" height="4.174ex" role="img" focusable="false" viewBox="0 -1195.6 2195.1 1845.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="mfrac" transform="translate(597,0)"><g data-mml-node="mfrac" transform="translate(220,584) scale(0.707)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mn" transform="translate(323.8,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="761.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1598.1,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g></g></g></svg></mjx-container></p><p>转载自：<br><a href="https://blog.csdn.net/qq_38342510/article/details/124064158">https://blog.csdn.net/qq_38342510/article/details/124064158</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>笔记整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【原神】岩神简史</title>
    <link href="/2023/01/12/genshin_2/"/>
    <url>/2023/01/12/genshin_2/</url>
    
    <content type="html"><![CDATA[<h1 id="岩神篇一、筚路蓝缕（岩神诞生到璃月港草创，约6000—3700年前）"><a href="#岩神篇一、筚路蓝缕（岩神诞生到璃月港草创，约6000—3700年前）" class="headerlink" title="岩神篇一、筚路蓝缕（岩神诞生到璃月港草创，约6000—3700年前）"></a>岩神篇一、筚路蓝缕（岩神诞生到璃月港草创，约6000—3700年前）</h1><p>据璃月古代史学家“子苌”的（致敬汉朝史学家司马迁，字子长）《石书辑录》记载，岩王帝君和先民们在建立如今的璃月之前，付出了很多的心血来开辟宜居的家园。</p><p>起初，摩拉克斯的领地地势较低，海水倒灌，洪水肆虐，自然条件很恶劣。他发动神力抬高地势使海潮退去，造出了如今的天衡山，他的子民们便在山上采矿为生。他们挖空了天衡山的矿脉，还建立了工厂，这便是如今璃月黑岩厂的前身。矿道甚至挖到了大陆深处，一些已覆灭文明的遗迹。但过度开采导致了灾难，矿洞坍塌，大量工人遇难。幸存的天衡之民，也无法再继续以采矿谋生了。（四星武器黑岩绯玉背景故事中提到了这段历史）事情的转机是与尘之魔神“归终”达成盟约——等一等，恪守“契约”之道的岩神认为，没有正式达成契约，不符合程序正义，还不能叫盟约。</p><p>岩神和尘神结盟，岩神子民走下天衡山，去归离原农耕，但归终的活泼和灵动，让岩神第一次没有平常那样的迂腐和死板，他收下了归终送来的结盟信物“尘世之锁”。几千年过去了，以钟离的身份大隐隐于市的岩神，仍然记得那天，在原野上盛开的琉璃百合。</p><p>尘神的智慧和岩神的力量强强联手，天衡之民走下大山，来到天衡山以北的平原，与归终的子民合流，开始以农耕为生。岩神和尘神还访问仙兽的洞府，将他们收为魔神眷属。在游戏中，玩家去留云借风真君所在的奥藏山，还可以通过石凳上的铭文了解当时归终和留云的聚会：此处居留云，此处坐归终，此处借帝君。留云也因此熟悉归终机，并在几千年后的群玉阁还发挥了一次作用。甚至还有魔神也加入了他们，炉灶之魔神司掌炉火与民生，是一位喜爱人类的魔神。他化出分身进入千家万户帮忙生火做饭，助人团圆。这片农耕文明的乐土盛极一时，市镇村落从石门到天衡山连绵不绝。归终为民众结束流离、安居乐业而高兴，提议将这片地区叫作“归离原”。</p><p>但似乎命中注定岩神和尘神的子民多灾多难，这样的好日子，并没有持续太久。归离原被一场大洪水摧毁，幸存的民众不得不迁回天衡山以南，在今天的璃月港定居。从璃月港在灾后成为定居点，到今天繁荣的贸易之都，有3700多年。岩神的子民也从“天衡之民”“归离之民”，改称“璃月人”。</p><h1 id="岩神篇二、魔神战争（璃月港草创到魔神战争结束，约3700—2600年前）"><a href="#岩神篇二、魔神战争（璃月港草创到魔神战争结束，约3700—2600年前）" class="headerlink" title="岩神篇二、魔神战争（璃月港草创到魔神战争结束，约3700—2600年前）"></a>岩神篇二、魔神战争（璃月港草创到魔神战争结束，约3700—2600年前）</h1><p>在讲魔神战争前，先谈一谈上文提到的毁灭归离原的大洪水。我认为自然的洪水不可能摧毁从石门到天衡山那么大一片地方，这应该是魔神战争的一部分。但是官方没有明说，我根据游戏中已有的信息推测，如有后续剧情填补这方面的故事，以官方为准。</p><p>书籍《绝云记闻·海神宫》记录了这样一个故事：一个村子向海之魔神供奉一个少女为妾，以求接下来一年风平浪静。少女不愿意侍奉海神，海神不强迫她，放她回到了村子。不过，海神料定人世险恶，少女迟早会后悔离开海神宫，于是临分别前给少女一只法螺，如果她后悔了，就吹响法螺呼唤海神。少女回到了村子过了几十年凡人的生活，结婚生女，自己的孩子后来也长成了一位少女。突然有一天，村里的长老把她的孩子抢走，要献给海神以求来年风平浪静。女人吹响了海螺，海神出现，淹没了这个不义的村子，女人和她的女儿跟着海神走了。</p><p>这个故事里提到了海之魔神，还提到海之魔神的眷属是两头螭兽，每一头都有天衡山那么大。璃月支线任务“古云有螭”告诉我们，轻策庄以前生活着恶螭，是大型水元素生物。我的猜测是，归离原大洪水，是海之魔神从地势较高的轻策庄向地势较低的归离原发动的攻击。这是魔神战争的一部分，但游戏中只有《绝云记闻》提到了海之魔神，主线支线都没有提到ta，因此不能确定。而在归离原遭到毁灭性打击、岩神灶神和麒麟等仙兽忙着组织难民南撤并在璃月港建立定居点时，敌对魔神（不知道是哪一位，官方没明说）对归离原发动了突袭。留守归离原的归终战死了。</p><p>岩神来不及为友人的死去而悲伤，身后还有数以万计的民众需要他的庇护，没有时间为已经死去的人耗费心力了，要战斗，要千方百计赢得战争，才能让自己的子民在这人间地狱活下来，才能不辜负归终生前的愿望。子民们遭受重大劫难后信心动摇，岩神便用金色石珀削成长刀，当着所有人的面，砍下一座山峰立誓：“离散的人，必将聚拢回归；背约的人，必然加以惩治。失去挚爱者，痛失珍宝者，蒙受不公者，将得到补偿。”这是岩神在璃月港对所有子民们定下的契约。而那把金色石珀做成的刀，便是“斫峰之刃”。岩神暂时扔掉了他温柔的一面，为了赢得战争，他严苛地用契约和规则约束部下和他自己，无情地杀戮着敌人以及背叛璃月背叛契约的人。这带来了不好的后果，被阵斩的魔神留下了怨念残渣，深为后人之害。岩神吸取教训，改用封印、镇压等方法对付漩涡魔神奥赛尔等敌人。</p><p>在战争中不断有人和岩神定下契约，加入他的麾下作战或者为璃月服务：深埋地底渴望光明的若陀龙王，与岩神约法三章后。岩神将他带到地面，并为龙王点睛，而他跟随岩神为璃月征战，庇佑璃月百姓。麒麟和凡人的女儿甘雨虽然年幼，但经师傅留云借风真君训练后也签订契约加入战争——甘雨小时候胖胖的，胖到什么程度呢？一头敌方的巨兽把她一口吞下，却差点被她噎死而投降。被另一魔神胁迫作恶的金鹏夜叉，在被岩神解救后，签订契约为璃月而战，他获得了另一个名字“魈”。</p><p>璃月凡人中身强力壮者，也自发组成军队。他们被称为“千岩军”，使用长枪结阵作战，结阵可战魔神。战火肆虐生灵涂炭，尸体得不到及时掩埋引发瘟疫，一些人专职治病和火化防疫，后来因为种种原因变成了专职丧事、平衡阴阳，这就是往生堂的由来。</p><p>另一方面，残酷的战争也让岩神失去了很多同伴：灶神把自己的力量注入大地，帮人们消除瘟疫平息灾害。自己耗尽魔力，知性大减，身体也缩到不足一人高。它留下能带来幸福的菜式和炉火的奥秘给大家，然后自己去山林间沉睡，直到几千年后，遇到了万民堂的小厨娘。</p><p>在一场决定性的战役中，天衡山险些被敌方轰倒，仙鹿移霄导天真君为了防止天衡山倾倒压毁璃月港，让战友（可能是魈）砍下自己的角支撑天衡山，自己坚持作战最后力战而亡。他的鲜血化作了如今的碧水河。魈的战友，同为夜叉的“铜雀”也不幸在战斗中战死，他生前很喜欢吃烤吃虎鱼。如今，王平安在璃月重修了铜雀夜叉的庙宇，玩家每天都可以去向他致敬。</p><p>与此同时，岩神的竞争对手之一，盐神赫乌利亚是一位温柔到有点懦弱的魔神，只想找个安全的地方躲起来。她探查了璃月很多地方，天衡山、瑶光滩、绝云间、轻策庄，这些地方都生灵涂炭惨不忍睹，璃月之大竟难容一处安宁。最后她定居在如今的地中之盐地区，完全不思进取，等待着其他魔神击杀自己。她的挚爱，同时也是盐民们的世俗国王，出于某种复杂的原因，用剑杀死了她，一瞬间爆裂的魔神能量也杀死了大厅里的人们。其他幸存的盐民投奔了璃月港，后来成为璃月七星八门中的“银原厅”。</p><h1 id="岩神篇三、曲折前进（魔神战争结束至若陀龙王反叛，约2600年前-1000年前）"><a href="#岩神篇三、曲折前进（魔神战争结束至若陀龙王反叛，约2600年前-1000年前）" class="headerlink" title="岩神篇三、曲折前进（魔神战争结束至若陀龙王反叛，约2600年前-1000年前）"></a>岩神篇三、曲折前进（魔神战争结束至若陀龙王反叛，约2600年前-1000年前）</h1><h2 id="港市兴起"><a href="#港市兴起" class="headerlink" title="港市兴起"></a>港市兴起</h2><p>岩神赢得了魔神战争，被天空岛封为尘世七执政之一。璃月从长期战争的创伤中慢慢恢复，璃月港开始以巧工、商贸为业，其中的佼佼者成为璃月七星，七星下辖八门来管理各行各业。璃月港开始繁荣起来。岩神以“契约”作为自己的统治理念，以保证商业的良性发展。他还割舍自己的部分血肉，做成了今天通行提瓦特大陆的货币——摩拉。</p><h2 id="靖妖祓魔"><a href="#靖妖祓魔" class="headerlink" title="靖妖祓魔"></a>靖妖祓魔</h2><p>但天下还没有太平，魔神战争中死去的魔神留下了怨念和残渣，这些东西对人危害很大。轻则让人幻听幻视精神失常，重则让人走火入魔发狂而死。它们还能滋生魔物、瘟疫、污染土地等。岩神召集护法夜叉，让他们与魔神残渣作战，保护璃月民众。<br>最强大的五名夜叉，他们也不能幸免被魔神怨念侵蚀，水夜叉伐难、岩夜叉弥怒发狂后自相残杀而死，火夜叉应达走火入魔而亡，雷夜叉浮舍也深受怨念影响，失忆后出走。只剩下金鹏夜叉，即魈。<br>其实魈也差一点在荻花洲走火入魔，关键时刻蒙德的风神用笛声唤醒了他。他也很幸运地成为被两位执政神搭救过的人。魈与魔神残渣的战斗持续至今，他做这些并不求璃月人回报——他自知身上杀气太多，普通人无法承受，于是他一般会躲开平民，避免进入璃月港，在凡人视线之外践行和岩王帝君的契约。璃月人相传这个神龙见首不见尾，抬头不见低头见的护法夜叉为“降魔大圣”。</p><h2 id="浮浪旧梦"><a href="#浮浪旧梦" class="headerlink" title="浮浪旧梦"></a>浮浪旧梦</h2><p>魔神残渣并非唯一的威胁，海中有大魔侵扰，山间有恶螭盘踞。岩神亲自征讨轻策庄的水元素螭兽（不确定它和海之魔神有无关系），将螭分五块分别镇压。至于海中的巨兽，则没有劳烦岩王帝君事事操心。一位擅使大剑的船师，豪迈地唱着歌去征讨巨兽。船师知道自己的实力和巨兽相差甚远，但他已经不在乎自己的命了。他在巨兽摧毁他上一条船、杀死他所有的船员时，就已经决定舍去性命复仇了。（书籍《浮浪记》）<br>而船师的大副，是一位被迫逃到璃月来的蒙德贵族（即风神篇提到的帕西法尔）。他们不知所踪，而几天后，海兽的尸体漂到了璃月港，人们能明显看到大剑给海兽造成的致命伤。后来，它的脊髓被抽出做成了一把大剑，被称为“螭骨剑”。（四星武器螭骨剑、沉沦之心圣遗物背景故事）<br>凡人没有依赖神，就做到了自己之前做不到的事。岩王帝君后来选择让凡人治理璃月港，或许最初的触动就来源于此吧。</p><h2 id="岁月磨损"><a href="#岁月磨损" class="headerlink" title="岁月磨损"></a>岁月磨损</h2><p>岩石的记忆并不很长，能留存其中的只有强烈的情感。时间越久，记忆便越模糊，越容易忘记自己当初为何而战，而只记得愤怒血腥和仇恨。这种现象，被称为“磨损”。作为岩元素创生物、元素之龙王，若陀龙王的诞生甚至比七执政中最年长的岩神还要早，受到的磨损也最多。岩神知道自己最重要的眷属正在遭罪，曾分出一部分力量给他，让他缓解痛苦，但无济于事。<br>磨损本就给它带来了痛苦，而璃月人在层岩巨渊的过度采矿，破坏了若陀及下属岩龙蜥一族赖以生存的环境，这更是火上浇油。失去理智的若陀龙王最终攻击了层岩巨渊的矿工。<br>一千多年后，占据名为昆钧的青年身体的若陀龙王问岩神：层岩巨渊那天，你犹豫过吗？已经失去神之心，以钟离的身份大隐隐于市的岩神说：“岩石尚有心，我自然如此。但我是契约之神，也曾是璃月人的神。”一边是并肩浴血千年的生死之交，一边是守护璃月的契约，岩神选择了后者，忍痛封印了发狂的故友。岩神知道，自己全盛时期也不一定能打赢若陀龙王，更不可能封印。若陀龙王残存的善念束缚了发狂巨龙的力量，使自己被岩神和众仙人合力封印在伏龙树下。若陀龙王的善念和恶念，也因此分出，在千年后闹出一场风波。<br>另外，昆钧来自“匠人世家”，而这家的祖先昆吾，本来是个学者，他准备前往须弥进修。但机缘巧合得到了岩神打造的日晷，他把玩日晷，发现它毫无瑕疵，于是对锻造器物产生了浓厚的兴趣，转而成为一名匠人，打造了四星武器“匣里龙吟”“匣里灭辰”“匣里日月”。这也算岩神和昆家跨越千年的缘分吧。</p><h2 id="七神欢聚"><a href="#七神欢聚" class="headerlink" title="七神欢聚"></a>七神欢聚</h2><p>璃月港在无数默默付出的人和仙的努力下曲折前进，变得越来越繁荣。岩神严格按契约之道治理璃月，不敢越雷池半步，这一现象则被邻国的风神改变了。岩神一开始只是觉得风神荒唐，居然为了送一瓶酒而擅离职守。风神自由而活泼，充满好奇心，总是问个不停，岩神拿他一点办法也没有。但岩神并不讨厌风神，甚至慢慢被风神改变了一些处事细节。渐渐的，尘世七执政都来璃月相聚——应该是八位，稻妻的雷电真把她的孪生妹妹雷电影也带来了，雷电影以影武者的身份与诸神共饮，居于末席。（见雷电将军角色语音）<br>参加当年聚会的，如今只剩岩神、风神和雷电影三人还在人世。欲买桂花同载酒，只可惜故人，何日再见呢？</p><h1 id="岩神篇四、漆黑灾厄（坎瑞亚战争、深渊灾厄，约500年前）"><a href="#岩神篇四、漆黑灾厄（坎瑞亚战争、深渊灾厄，约500年前）" class="headerlink" title="岩神篇四、漆黑灾厄（坎瑞亚战争、深渊灾厄，约500年前）"></a>岩神篇四、漆黑灾厄（坎瑞亚战争、深渊灾厄，约500年前）</h1><p>天理率七国围攻坎瑞亚。坎瑞亚的炼金术士，代号“黄金”的莱茵多特用“世界之外的力量”创造出大量魔物袭击七国，造成了大量的悲剧。武器突破材料漆黑陨铁系列告诉我们，莱茵多特的魔物身上的力量，与提瓦特世界中的能量完全不同。不少人戏称为“崩坏能”。2.5三界路飨祭活动中，阿祇告诉主角提瓦特世界目前有三种力量，拥有自然荒蛮元素力的光界（龙蜥界）、天空岛—七神体系中的七元素即人界、以及拥有深渊力量的虚无界。</p><p>岩神在云来海以东的暗之外海和魔物交战，细节不详，岩神获得了胜利，他砸下来的天星被魔物的血污染，形成了漆黑陨铁。<br>岩神在璃月的东边战斗时，另一波魔物通过遗迹巨蛇开挖的地道，趁虚在璃月西边的层岩巨渊发动了攻击。仙人、千岩军、术士伯阳戎昭兄弟在此与魔物苦战，死伤惨重。这场战斗被后世称为“层岩巨渊之难”。</p><p>以下关于层岩巨渊之难的内容，根据世界任务“夜叉之愿”、剧情pv《护法仙众夜叉录》、千岩套圣遗物、辰砂套圣遗物、五星武器息灾以及2.7剧情整理得出：<br>当年的五大护法夜叉中，浮舍夜叉是雷属性，长着四只胳膊。他依岩王帝君的命令，与魔神怨念作战，保护璃月民众。但他目睹火、岩、水三位夜叉被魔神怨念折磨致死后，有了退隐江湖的心思。再加上自己也饱受魔神怨念摧残，还没有和帝君辞行，便失去记忆出走了。（世界任务夜叉之愿，浮舍在失忆前留下自己的财宝给后世有缘人）层岩巨渊之难发生前，此时已经有深渊魔物出现并伤害山民。浮舍夜叉正好流浪到层岩巨渊附近。山民们认出了四只胳膊的夜叉，拿出了他们能酿出的最好的酒，去求夜叉帮他们消除灾厄。退隐的夜叉没有说话，默默地把杯中并不好喝的村酿酒一饮而尽，然后头也不回地出发了。夜叉没有和山民订立书面或者口头的契约，却为了保护民众战死。战后的民众把那只酒杯视为夜叉和民众订立契约的证物，这便是辰砂套圣遗物的杯子“结契之刻”。</p><p>同时，一支千岩军受命赶来与深渊魔物作战，他们看到魔物的数量和破坏力，自知很难在这场战斗中幸存。他们与浮舍夜叉并肩作战，掩护山民和矿工们撤退，在民众撤走后，千岩军、浮舍和伯阳把敌群引到层岩巨渊深处，自己也战死在了那里。浮舍在生命的最后一刻，总算想起了自己是护法夜叉浮舍，自己还有四个兄弟姐妹。。。</p><p>再讲一讲千岩军视角，战前，这支千岩军全体将士，饮下了最后一杯家乡的酒。用来盛酒的金爵成为了千岩套圣遗物的杯子“盟誓金爵”。这支千岩军的将军的头盔则是千岩套圣遗物的“将帅兜鍪”。在战斗中，浮舍夜叉身上杀业过重，千岩军士兵不能长时间待在他身边，于是将军手持一枚时计，命令千岩军分为几队，轮流和浮舍一起扛住战线，时间到了就换上另一批。千岩军士兵训练有素，步调一致，使这个战术成功发挥作用，他们这才能撑那么长的时间。这枚时计便是千岩套圣遗物中的“金铜时晷”。当岩王帝君赶到时，战斗已经结束了，他对长眠地下的夜叉和千岩军沉默良久。为纪念牺牲的夜叉和千岩军，后世的千岩军佩戴昭武翎羽和勋绩之花来纪念他们。</p><p>一位参加战斗的千岩军幸存了下来，但很可惜残疾了。他既对自己的人生感到绝望，又思念逝去的战友们，想放弃自己的生命。岩神阻止了他，把他骂醒（我还挺想看看钟离骂人的样子的），这位千岩军转职为一名医生，救死扶伤获得了大家的认可。他把自己服役时穿的一套四星千岩圣遗物埋在层岩巨渊的一处，等待后人发掘。浮舍夜叉生前使用的兵器，是名为“息灾”的长枪。浮舍夜叉之后，这把枪换了好几个主人，他们的结局按世俗眼光都不算好。但这些人都是无需与民众签订契约就甘愿守护民众，哪怕牺牲后不留下姓名也心甘情愿的人，他们对命运的安排无怨无悔。息灾这把枪目前的主人是申鹤。她因“孤辰劫煞”的命格和父亲被魔神残渣蛊惑，有一个非常不幸的童年，幸而被留云借风真君救下并收为徒弟。师父告诉她，只有当她有了为他人使用力量的想法，她才能真正融入人类社会。于是申鹤像息灾的前几任主人那样，哪怕没有契约也愿为璃月而战。她在璃月港讨伐跋掣一战中表现神勇。</p><h1 id="岩神篇五、终结契约"><a href="#岩神篇五、终结契约" class="headerlink" title="岩神篇五、终结契约"></a>岩神篇五、终结契约</h1><p>岩神从降生至今已经有6000年，从归离原迁回天衡山以南建立璃月也有3700年，实在太久太久了。他可以把所有竞争魔神都打败，却无法抗拒时间带给他的磨损。<br>有一天，钟离在港口听到一个商人对他的伙计说：“你完成了你的职责，现在去休息吧。”钟离在人群中驻足良久，反思自己的职责是否已经完成。但他考虑如何让自己退下神位时，发现他还有不能离开的理由，他不确定失去神明的璃月还能不能独立摆平危机。他计划创造一次考察机会，然后再做决定。而在这时，至冬国的冰神向他开出了不能告诉主角的条件，他决定利用愚人众做一个局，将璃月七星和仙人都拉进来，用一场可以由他兜底的战斗，来考验没有神明帮助的璃月能不能度过危机。如果七星、仙人的表现令他满意，他将履行和冰神的契约——作为岩神的最后一份契约。</p><p>事情的走向和结果好于岩神的预期，仙人在信息不明的情况下压住怒火，没有冲动镇压璃月港；凝光为了保护璃月，甘愿献出群玉阁；璃月的仙人和凡人，搁置争议协力击退了漩涡魔神奥赛尔；就连愚人众的“女士”，作为契约的合作方也对“公子”保持沉默没有泄密，“女士”尽管立场不同，但也对岩神的良苦用心给予了正面评价。<br>不过也不是所有事都被岩神算到了，出乎岩神意料之外的，是七星在迅速应对危机之后，抓住神权的真空期，迅速掌握了璃月的权力——这意味着如果摩拉克斯真的死了，璃月会诞生出新的岩神，而七星是不会给二代岩神权力的，他们同时也没有给仙人权力。</p><p>岩神对七星的这一大胆行为并不恼怒，反而很赞同。只是，最早提出仙人的时代已经过去，要由人类管理璃月的是刻晴，而最终执掌大权的却是凝光。岩神对此感到迷惑，看来由人治理国家，所遵循的规则和神治并不一样。岩神以钟离的身份过人类的日子，还得花点时间去适应，尤其是摩拉的问题。不过总的而言，从摩拉克斯成功变成钟离，卸下几千年的重担，对他而言是一件大好事。他在璃月主线的最后，也难得的笑了。</p><p>后来璃月港又用击退跋掣的战绩，证明人类不靠仙人也可以保护好自己。但璃月还有别的潜在威胁，通过“公子”的pv和传说任务可以得知，至冬国的北国银行仗着实力雄厚，在璃月搞无息贷款（北国银行贷给盗宝团吴老大，不要利息只要还本，要是连本都不还，执行官很快就到你家门口），把璃月本地钱庄商行淘汰了不少。璃月的金融命脉已经被捏在至冬国手上，璃月本地钱庄岌岌可危。<br>以前璃月垄断全提瓦特铸币权，还不必担心丧失金融主权的问题，但现在岩神“死了”，负责铸造摩拉的黄金屋短期内无法恢复铸币，璃月也失去了垄断提瓦特铸币权的货币霸权。这对凝光而言是个很大的危机。</p><p>当然说不定冰神和岩神那份契约中，有“让璃月继续垄断铸币权”的这条呢？冰神到底开出了什么条件来交换岩神之心，这是璃月剧情最后的悬念。</p>]]></content>
    
    
    <categories>
      
      <category>ACG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原神</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】自学整理</title>
    <link href="/2023/01/11/pythonLearn/"/>
    <url>/2023/01/11/pythonLearn/</url>
    
    <content type="html"><![CDATA[<blockquote><p>你可以将余生都用来学习Python和编程的纷繁难懂之处，但这样你什么项目都完不成。不要企图编写完美无缺的代码；先编写行之有效的代码，再决定是对其做进一步改进，还是转而去编写新代码。<br>————Eric Matthes</p></blockquote><hr><p>Python之禅</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt;&gt;&gt; import this<br>The Zen <span class="hljs-keyword">of</span> Python, <span class="hljs-keyword">by</span> Tim Peters<br><br>Beautiful <span class="hljs-keyword">is</span> better than ugly.<br>Explicit <span class="hljs-keyword">is</span> better than implicit.<br>Simple <span class="hljs-keyword">is</span> better than complex.<br>Complex <span class="hljs-keyword">is</span> better than complicated.<br>Flat <span class="hljs-keyword">is</span> better than nested.<br>Sparse <span class="hljs-keyword">is</span> better than dense.<br>Readability counts.<br>Special cases aren&#x27;t special enough <span class="hljs-keyword">to</span> break <span class="hljs-keyword">the</span> rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In <span class="hljs-keyword">the</span> face <span class="hljs-keyword">of</span> ambiguity, refuse <span class="hljs-keyword">the</span> temptation <span class="hljs-keyword">to</span> guess.<br>There should be one<span class="hljs-comment">-- and preferably only one --obvious way to do it.</span><br>Although <span class="hljs-keyword">that</span> way may <span class="hljs-keyword">not</span> be obvious <span class="hljs-keyword">at</span> <span class="hljs-keyword">first</span> unless you&#x27;re Dutch.<br>Now <span class="hljs-keyword">is</span> better than never.<br>Although never <span class="hljs-keyword">is</span> often better than *right* now.<br>If <span class="hljs-keyword">the</span> implementation <span class="hljs-keyword">is</span> hard <span class="hljs-keyword">to</span> explain, <span class="hljs-keyword">it</span>&#x27;s a bad idea.<br>If <span class="hljs-keyword">the</span> implementation <span class="hljs-keyword">is</span> easy <span class="hljs-keyword">to</span> explain, <span class="hljs-keyword">it</span> may be a good idea.<br>Namespaces are one honking great idea <span class="hljs-comment">-- let&#x27;s do more of those!</span><br></code></pre></td></tr></table></figure><p>Let’s start with————<code>print(&quot;Hello,world!&quot;)</code></p><hr><h1 id="第一部分-基础知识"><a href="#第一部分-基础知识" class="headerlink" title="第一部分 基础知识"></a>第一部分 基础知识</h1><h2 id="第一章-起步"><a href="#第一章-起步" class="headerlink" title="第一章 起步"></a>第一章 起步</h2><h3 id="安装及配置环境-略"><a href="#安装及配置环境-略" class="headerlink" title="安装及配置环境_略"></a>安装及配置环境_略</h3><p><code>vscode is good</code></p><p>访问浏览Python.org ，以浏览<del>天书</del></p><p><a href="https://docs.python.org/zh-cn/3/">https://docs.python.org/zh-cn/3/</a></p><h2 id="第二章-变量和简单数据类型"><a href="#第二章-变量和简单数据类型" class="headerlink" title="第二章 变量和简单数据类型"></a>第二章 变量和简单数据类型</h2><h3 id="变量的命名与使用"><a href="#变量的命名与使用" class="headerlink" title="变量的命名与使用"></a>变量的命名与使用</h3><p>变量在程序中可以随时修改其值，而Python将始终记录变量的最新值。</p><p>有关变量的规则：</p><ul><li>变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为 <code>message_1</code>，但不能将其命名为 <code>1_message</code>。</li><li>变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名 <code>greeting_message</code>可行，但变量名 <code>greeting message</code>会引发错误。</li><li>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词如print (请参见附录A.4)。</li><li>变量名应既简短又具有描述性。例如，<code>name</code>比 <code>n</code>好，<code>student_name</code>比 <code>s_n</code>好，<code>name_length</code>比 <code>length_of_persons_name</code>好。</li><li>慎用小写字母1和大写字母O，因为它们可能被人错看成数字1和0。</li></ul><p>使用变量时避免命名错误</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>在Python中，用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号，如下所示：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-string">&quot;This is a string.&quot;</span><br><span class="hljs-symbol">&#x27;This</span> <span class="hljs-keyword">is</span> a <span class="hljs-built_in">string</span>.&#x27;<br></code></pre></td></tr></table></figure><p>这种灵活性能让你能够在字符串中包含 <code>&quot; &quot;</code>和 <code>&#39; &#39;</code>:</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-string">&quot;I told my friend,&#x27;</span>C++ is one of the best language!<span class="hljs-string">&#x27;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="使用方法修改字符串大小写"><a href="#使用方法修改字符串大小写" class="headerlink" title="使用方法修改字符串大小写"></a>使用方法修改字符串大小写</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">name = <span class="hljs-string">&quot;ada lovelace&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name.title()</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name.upper()</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name.lower()</span></span>)<br></code></pre></td></tr></table></figure><p>输出依次为:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Ada Lovelace</span><br><span class="hljs-attribute">ADA LOVELACE</span><br><span class="hljs-attribute">ada lovelace</span><br></code></pre></td></tr></table></figure><p>在print()语句中，方法 <code>title()</code>出现在这个变量的后面。 方法Method是Python可对数据执行的操作。在name.title()中， name后面的句点 <code>.</code>让Python对变量name执行方法 <code>title()</code>指定的操作。每个方法后面都跟着一对括号，这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。函数 <code>title()</code>不需要额外的信息，因此它后面的括号是空的。</p><p>存储数据时，方法lower()很有用。很多时候，你无法依靠用户来提供正确的大小写，因此需要将字符串先转换为小写，再存储它们。以后需要显示这些信息时，再将其转换为最合适的大小写方式。</p><h4 id="合并、拼接字符串"><a href="#合并、拼接字符串" class="headerlink" title="合并、拼接字符串"></a>合并、拼接字符串</h4><p>Python使用加号 <code>+</code>来合并字符串,这种合并字符串的方法称为拼接。通过拼接，可使用存储在变量中的信息来创建完整的消息,例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile">first_name = <span class="hljs-string">&quot;ada&quot;</span><br>last_name = <span class="hljs-string">&quot;lovelace&quot;</span><br>full_name = first_name + <span class="hljs-string">&quot; &quot;</span> + last_name<br>message = <span class="hljs-string">&quot;Hello, &quot;</span> + full_name.title() + <span class="hljs-string">&quot;!&quot;</span><br>print(message)<br></code></pre></td></tr></table></figure><h4 id="使用制表符或换行符来添加空白"><a href="#使用制表符或换行符来添加空白" class="headerlink" title="使用制表符或换行符来添加空白"></a>使用制表符或换行符来添加空白</h4><p>空白泛指任何非打印字符，如空格、制表符 <code>\t</code>和换行符 <code>\n</code>。</p><p>反斜杠 <code>\</code>用于转义。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">&gt;&gt;&gt;</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Languages:<span class="hljs-subst">\n</span><span class="hljs-subst">\t</span>Python<span class="hljs-subst">\n</span><span class="hljs-subst">\t</span>C<span class="hljs-subst">\n</span><span class="hljs-subst">\t</span>JavaScript&quot;</span>)<br><span class="hljs-type">Languages</span>:<br>    <span class="hljs-type">Python</span><br>    <span class="hljs-type">C</span><br>    <span class="hljs-type">JavaScript</span><br></code></pre></td></tr></table></figure><p>如果不希望前置 <code>\</code>的字符转义成特殊字符，可以使用 原始字符串，在引号前添加 <code>r</code> 即可：<br><img src="/../img/mk-2023-01-13-20-36-30.png"></p><h4 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h4><p>对变量调用方法 <code>rstrip()</code>后，多余的空格将被删除。然而，这种删除只是暂时的，接下来再次访问变量值时仍然有空格，要永久删除这个字符串中的空白，必须将删除操作的结果存回到变量中。分别使用方法 <code>lstrip()</code>和 <code>strip()</code>可以删除变量左端（开头）和右端（末尾）的空格，例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">favorite_language = <span class="hljs-string">&#x27; python &#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">favorite_language.rstrip()</span><br>&#x27; python&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">favorite_language.lstrip()</span><br>&#x27;python &#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">favorite_language.strip()</span><br>&#x27;python&#x27;<br></code></pre></td></tr></table></figure><h4 id="避免语法错误"><a href="#避免语法错误" class="headerlink" title="避免语法错误"></a>避免语法错误</h4><p>语法错误（SyntaxError: invalid syntax）是一种时不时会遇到的错误。程序中包含非法的Python代码时，就会导致语法错误。<br>例如，在用单引号括起的字符串中，如果包含撇号，就将导致错误。这是因为这会导致Python将第一个单引号和撇号之间的内容视为一个字符串，进而将余下的文本视为Python代码，从而引发错误。</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="整数（int）"><a href="#整数（int）" class="headerlink" title="整数（int）"></a>整数（int）</h4><p>运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 的用法和其他大部分语言一样；括号 <code>( )</code> 用来分组;用 <code>**</code>运算符计算乘方;等号 <code>=</code>用于给变量赋值,赋值后，下一个交互提示符的位置不显示任何结果。</p><p>注：<code>**</code> 比 <code>-</code> 的优先级更高, 所以 <code>-3**2</code> 会被解释成 <code>-(3**2)</code> ，因此，结果是 -9。要避免这个问题，并且得到 9, 可以用 <code>(-3)**2</code>。</p><h4 id="浮点数（float"><a href="#浮点数（float" class="headerlink" title="浮点数（float)"></a>浮点数（float)</h4><p>Python 全面支持浮点数；混合类型运算数的运算会把整数转换为浮点数；交互模式下，上次输出的表达式会赋给变量 <code>_</code>。把 Python 当作计算器时，用该变量实现下一步计算更简单，例如：</p><p>如果变量未定义（即，未赋值），使用该变量会提示错误：<code>NameError: name &#39;n&#39; is not defined</code>。</p><p>交互模式下，上次输出的表达式会赋给变量 _。把 Python 当作计算器时，用该变量实现下一步计算更简单，例如：<br><img src="/../img/mk-2023-01-12-19-05-50.png"></p><p>但需要注意的是，结果包含的小数位数可能是不确定的：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">0.2</span> + <span class="hljs-number">0.1</span></span><br>0.30000000000000004<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">3</span> * <span class="hljs-number">0.1</span></span><br>0.30000000000000004<br></code></pre></td></tr></table></figure><p>所有语言都存在这种问题，没有什么可担心的。 Python会尽力找到一种方式，以尽可能精确地表示结果，但鉴于计算机内部表示数字的方式，这在有些情况下很难。就现在而言，暂时忽略多余的小数位数即可；在第二部分的项目中，你将学习在需要时处理多余小数位的方式。</p><h4 id="函数str-的使用"><a href="#函数str-的使用" class="headerlink" title="函数str()的使用"></a>函数str()的使用</h4><p>函数str()让Python将非字符串值表示为字符串。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>在Python中，注释用井号 <code>#</code>标识,井号后面的内容都会被Python解释器忽略。<br>编写注释的主要目的是阐述代码要做什么，以及是如何做的。在开发项目期间，你对各个部分如何协同工作了如指掌，但过段时间后，有些细节你可能不记得了。当然，你总是可以通过研究代码来确定各个部分的工作原理，但通过编写注释，以清晰的自然语言对解决方案进行概述，可节省很多时间。要成为专业程序员或与其他程序员合作，就必须编写有意义的注释。当前，大多数软件都是合作编写的，编写者可能是同一家公司的多名员工，也可能是众多致力于同一个开源项目的人员。<br>训练有素的程序员都希望代码中包含注释，因此你最好从现在开始就在程序中添加描述性注释。作为新手，最值得养成的习惯之一是，<strong>在代码中编写清晰、简洁的注释</strong>。如果不确定是否要编写注释，就问问自己，找到合理的解决方案前，是否考虑了多个解决方案。如果答案是肯定的，就编写注释对你的解决方案进行说明吧。相比回过头去再添加注释，删除多余的注释要容易得多。</p><blockquote><p>最喜欢的事情：别人写注释<br>最讨厌的事情：<del>自己写注释</del></p></blockquote><h2 id="第三章-列表"><a href="#第三章-列表" class="headerlink" title="第三章 列表"></a>第三章 列表</h2><h3 id="列表是什么"><a href="#列表是什么" class="headerlink" title="列表是什么"></a>列表是什么</h3><p>在Python中，用方括号（ []）来表示列表，并用逗号来分隔其中的元素。下面是一个简单的列表示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt;bicycles = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]</span><br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(bicycles)<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]</span><br></code></pre></td></tr></table></figure><h4 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h4><p>列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉Python即可。要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内。当你请求获取列表元素时，Python只返回该元素，而不包括方括号和引号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;bicycles = [<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;<span class="hljs-built_in">print</span>(bicycles[0])</span><br>trek<br></code></pre></td></tr></table></figure><h4 id="索引从0开始"><a href="#索引从0开始" class="headerlink" title="索引从0开始"></a>索引从0开始</h4><p>在Python中，第一个列表元素的索引为0，而不是1。在大多数编程语言中都是如此，这与列表操作的底层实现相关。<br>Python为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后的元素。这种约定也适用于其他负数索引，例如，索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。</p><h3 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h3><p>你创建的大多数列表都将是<em>动态</em>的，这意味着列表创建后，将随着程序的运行增删元素。</p><h4 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h4><p>修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改<br>的元素的索引，再指定该元素的新值。<br>例如，依旧是上述列表 <code>bicycles = [&#39;trek&#39;, &#39;cannondale&#39;, &#39;redline&#39;, &#39;specialized&#39;]</code>，修改第一个元素的值的操作如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt;bicycles = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;trek&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]</span><br>&gt;&gt;&gt;bicycles<span class="hljs-selector-attr">[0]</span> = <span class="hljs-string">&#x27;unknown&#x27;</span><br>&gt;&gt;&gt;<span class="hljs-built_in">print</span>(bicycles)<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;unknown&#x27;</span>, <span class="hljs-string">&#x27;cannondale&#x27;</span>, <span class="hljs-string">&#x27;redline&#x27;</span>, <span class="hljs-string">&#x27;specialized&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p>你可以修改任何列表元素的值，而不仅仅是第一个元素的值。</p><h4 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h4><h5 id="在列表末尾添加元素"><a href="#在列表末尾添加元素" class="headerlink" title="在列表末尾添加元素"></a>在列表末尾添加元素</h5><p>在列表中添加新元素时，最简单的方式是将元素附加到列表末尾。使用方法 <code>append()</code>给列表附加元素时，它将添加到列表末尾。例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">motorcycles = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(motorcycles)</span></span><br>motorcycles<span class="hljs-selector-class">.append</span>(<span class="hljs-string">&#x27;ducati&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(motorcycles)</span></span><br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;honda</span>&#x27;, <span class="hljs-symbol">&#x27;yamaha</span>&#x27;, <span class="hljs-symbol">&#x27;suzuki</span>&#x27;]<br>[<span class="hljs-symbol">&#x27;honda</span>&#x27;, <span class="hljs-symbol">&#x27;yamaha</span>&#x27;, <span class="hljs-symbol">&#x27;suzuki</span>&#x27;, <span class="hljs-symbol">&#x27;ducati</span>&#x27;]<br></code></pre></td></tr></table></figure><p>方法 <code>append()</code>让动态地创建列表易如反掌，例如，你可以先创建一个空列表，再使用一系列的 <code>append()</code>语句添加元素。这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪些数据。为控制用户，可首先创建一个空列表，用于存储用户将要输入的值，然后将用户提供的每个新值附加到列表中。</p><h5 id="在列表中插入元素"><a href="#在列表中插入元素" class="headerlink" title="在列表中插入元素"></a>在列表中插入元素</h5><p>使用方法 <code>insert()</code>可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">列表名.<span class="hljs-built_in">insert</span>(元素位置 , 新元素值)<br></code></pre></td></tr></table></figure><p>插入到该位置后，该位置及其之后的所有元素往后移一位。</p><h4 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h4><h5 id="使用del语句删除元素"><a href="#使用del语句删除元素" class="headerlink" title="使用del语句删除元素"></a>使用del语句删除元素</h5><p>使用del可删除任何位置处的列表元素，条件是知道其索引。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">del</span> 列表名<span class="hljs-selector-attr">[元素索引]</span><br></code></pre></td></tr></table></figure><h4 id="使用方法pop-删除元素"><a href="#使用方法pop-删除元素" class="headerlink" title="使用方法pop()删除元素"></a>使用方法pop()删除元素</h4><p>方法 <code>pop()</code>可删除列表末尾的元素，并让你能够接着使用它。术语弹出（pop）源自这样的类比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。<br>下面从列表motorcycles中弹出一款摩托车：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">motorcycles = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(motorcycles)</span></span><br>popped_motorcycle = motorcycles<span class="hljs-selector-class">.pop</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(motorcycles)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(popped_motorcycle)</span></span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>, <span class="hljs-string">&#x27;suzuki&#x27;</span>]</span><br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;honda&#x27;</span>, <span class="hljs-string">&#x27;yamaha&#x27;</span>]</span><br>suzuki<br></code></pre></td></tr></table></figure><h4 id="弹出列表中任何位置处的元素"><a href="#弹出列表中任何位置处的元素" class="headerlink" title="弹出列表中任何位置处的元素"></a>弹出列表中任何位置处的元素</h4><p>实际上，你可以使用pop()来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。</p><p><em>p.s:如果你不确定该使用del语句还是pop()方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()。</em></p><h4 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h4><p>如果你只知道要删除的元素的值，可使用方法 <code>remove()</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">列表名.<span class="hljs-built_in">remove</span>(元素值)<br></code></pre></td></tr></table></figure><p><em>注意：方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。</em></p><h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><h4 id="使用方法sort-对列表进行永久性排序"><a href="#使用方法sort-对列表进行永久性排序" class="headerlink" title="使用方法sort()对列表进行永久性排序"></a>使用方法sort()对列表进行永久性排序</h4><p>Python方法 <code>sort()</code>让你能够较为轻松地对列表进行排序。<br>例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cars = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;bmw&#x27;</span>, <span class="hljs-string">&#x27;audi&#x27;</span>, <span class="hljs-string">&#x27;toyota&#x27;</span>, <span class="hljs-string">&#x27;subaru&#x27;</span>]</span><br>cars<span class="hljs-selector-class">.sort</span>()<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(cars)</span></span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;audi</span>&#x27;, <span class="hljs-symbol">&#x27;bmw</span>&#x27;, <span class="hljs-symbol">&#x27;subaru</span>&#x27;, <span class="hljs-symbol">&#x27;toyota</span>&#x27;]<br></code></pre></td></tr></table></figure><p><code>sort(*, key=None, reverse=False)</code>此方法会对列表进行<strong>原地排序</strong>，只使用 &lt; 来进行各项间比较。异常不会被屏蔽————如果有任何比较操作失败，整个排序操作将失败（而列表可能会处于被部分修改的状态）。<br><code>reverse</code>为一个布尔值。如果设为 <code>True</code>，则每个列表元素将按反向顺序比较进行排序，例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cars = [<span class="hljs-string">&#x27;bmw&#x27;</span>, <span class="hljs-string">&#x27;audi&#x27;</span>, <span class="hljs-string">&#x27;toyota&#x27;</span>, <span class="hljs-string">&#x27;subaru&#x27;</span>]<br>cars.sort(<span class="hljs-attribute">reverse</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(cars)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;toyota</span>&#x27;, <span class="hljs-symbol">&#x27;subaru</span>&#x27;, <span class="hljs-symbol">&#x27;bmw</span>&#x27;, <span class="hljs-symbol">&#x27;audi</span>&#x27;]<br></code></pre></td></tr></table></figure><h4 id="使用函数-sorted-对列表进行临时排序"><a href="#使用函数-sorted-对列表进行临时排序" class="headerlink" title="使用函数 sorted()对列表进行临时排序"></a>使用函数 sorted()对列表进行临时排序</h4><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数 <code>sorted()</code>。函数 <code>sorted()</code>让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sorted</span><span class="hljs-params">(列表名)</span></span><br></code></pre></td></tr></table></figure><p><em>p.s:在并非所有的值都是小写时，按字母顺序排列列表要复杂些。决定排列顺序时，有多种解读大写字母的方式，要指定准确的排列顺序，可能比我们这里所做的要复杂。然而，大多数排序方式都基于本节介绍的知识。</em></p><h4 id="倒着打印列表"><a href="#倒着打印列表" class="headerlink" title="倒着打印列表"></a>倒着打印列表</h4><p>要反转列表元素的排列顺序，可使用方法reverse()。注意， reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序。方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">列表名.<span class="hljs-keyword">reverse</span>()<br></code></pre></td></tr></table></figure><h4 id="确定列表长度"><a href="#确定列表长度" class="headerlink" title="确定列表长度"></a>确定列表长度</h4><p>使用函数len()可快速获悉列表的长度。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">(列表名)</span></span><br></code></pre></td></tr></table></figure><p><em>Python计算列表元素数时从1开始，因此确定列表长度时，应该不会遇到差一错误。</em></p><h3 id="使用列表时避免索引错误"><a href="#使用列表时避免索引错误" class="headerlink" title="使用列表时避免索引错误"></a>使用列表时避免索引错误</h3><p>索引错误 <code>IndexError: list index out of range</code>。索引错误意味着Python无法理解你指定的索引。每当需要访问最后一个列表元素时，都可使用索引-1。这在绝大多数情况下都行之有效，仅当列表为空时，这种访问最后一个元素的方式才会导致错误。</p><p><em>发生索引错误却找不到解决办法时，请尝试将列表或其长度打印出来。列表可能与你以为的截然不同，在程序对其进行了动态处理时尤其如此。通过查看列表或其包含的元素数，可帮助你找出这种逻辑错误。</em></p><h2 id="第四章-操作列表"><a href="#第四章-操作列表" class="headerlink" title="第四章 操作列表"></a>第四章 操作列表</h2><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">for 变量名 in 列表名</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># 缩进后书写语句</span><br></code></pre></td></tr></table></figure><p>刚开始使用循环时请牢记，对列表中的每个元素，都将执行循环指定的步骤，而不管列表包含多少个元素。在for循环后面，没有缩进的代码都只执行一次，而不会重复执行。</p><h4 id="使用列表时常出现的错误"><a href="#使用列表时常出现的错误" class="headerlink" title="使用列表时常出现的错误"></a>使用列表时常出现的错误</h4><p>Python根据缩进来判断代码行与前一个代码行的关系。Python通过使用缩进让代码更易读；简单地说，它要求你使用缩进让代码整洁而结构清晰。在较长的Python程序中，你将看到缩进程度各不相同的代码块，这让你对程序的组织结构有大致的认识。</p><h5 id="忘记缩进"><a href="#忘记缩进" class="headerlink" title="忘记缩进"></a>忘记缩进</h5><p><code>IndentationError: expected an indented block</code>通常，将紧跟在for语句后面的代码行缩进，可消除这种缩进错误。</p><h5 id="忘记缩进额外的代码行"><a href="#忘记缩进额外的代码行" class="headerlink" title="忘记缩进额外的代码行"></a>忘记缩进额外的代码行</h5><p>这是一个逻辑错误。从语法上看，这些Python代码是合法的，但由于存在逻辑错误，结果并不符合预期。</p><h5 id="不必要的缩进"><a href="#不必要的缩进" class="headerlink" title="不必要的缩进"></a>不必要的缩进</h5><p><code>IndentationError: unexpected indent</code>为避免意外缩进错误，请只缩进需要缩进的代码。</p><h5 id="遗漏了冒号"><a href="#遗漏了冒号" class="headerlink" title="遗漏了冒号"></a>遗漏了冒号</h5><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><h4 id="使用函数range-创建数字列表"><a href="#使用函数range-创建数字列表" class="headerlink" title="使用函数range()创建数字列表"></a>使用函数range()创建数字列表</h4><p>Python函数 <code>range()</code>让你能够轻松地生成一系列的数字。<br>要打印数字1~5，需要使用range(1,6)：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(value)</span></span><br></code></pre></td></tr></table></figure><p>这样，输出将从1开始，到5结束：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>3<br>4<br>5<br></code></pre></td></tr></table></figure><p>数range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止。</p><p>要创建数字列表，可使用函数list()将range()的结果直接转换为列表。</p><p>使用函数range()时，还可指定步长。例如，下面的代码打印1~10内的偶数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">even_numbers<span class="hljs-selector-class">.py</span><br>even_numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(even_numbers)</span></span><br></code></pre></td></tr></table></figure><p>在这个示例中，函数range()从2开始数，然后不断地加2，直到达到或超过终值（11），因此输出如下：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure><h4 id="对数字列表执行简单的统计计算"><a href="#对数字列表执行简单的统计计算" class="headerlink" title="对数字列表执行简单的统计计算"></a>对数字列表执行简单的统计计算</h4><p>有几个专门用于处理数字列表的Python函数。例如，你可以轻松地找出数字列表的最大值、最小值和总和：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">digits = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">min</span>(digits)</span><br>0<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">max</span>(digits)</span><br>9<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">sum</span>(digits)</span><br>45<br></code></pre></td></tr></table></figure><h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h4><p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。<br>例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">squares = <span class="hljs-selector-attr">[value**2 for value in range(1,11)]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(squares)</span></span><br></code></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为 <code>value**2</code>，它计算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。在这个示例中，for循环为 <code>for value in range(1,11)</code>，它将值1~10提供给表达式 <code>value**2</code>。请注意，这里的for<br>语句末尾没有冒号。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></code></pre></td></tr></table></figure><h3 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h3><p>你可以处理列表的部分元素——Python称之为切片。</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">列表名[索引<span class="hljs-comment">;索引]</span><br></code></pre></td></tr></table></figure><p>你可以生成列表的任何子集，需要注意的是，<strong>函数range()一样， Python在到达你指定的第二个索引前面的元素后停止</strong>。<br>如果你没有指定第一个索引， Python将自动从列表开头开始 <code>列表名[;索引]</code>；要让切片终止于列表末尾，也可使用类似的语法 <code>列表名[索引;]</code>,无论列表多长，这种语法都能够让你输出从特定位置到列表末尾的所有元素。<br>负数索引返回离列表末尾相应距离的元素，因此你可以输出列表末尾的任何切片。例如，如果你要输出列表最后三个元素，可使用切片 <code>列表名[-3:]</code>。</p><h5 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h5><p>如果要遍历列表的部分元素，可在for循环中使用切片，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> player in players[:<span class="hljs-number">3</span>]:<br></code></pre></td></tr></table></figure><h5 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h5><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引 <code>[:]</code>。这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。</p><h4 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h4><p>元组看起来犹如列表，但使用圆括号而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。<br>例如，如果有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中，从而确保它们是不能修改的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dimensions = (<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(dimensions[<span class="hljs-number">0</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(dimensions[<span class="hljs-number">1</span>])</span></span><br></code></pre></td></tr></table></figure><p>我们首先定义了元组dimensions，为此我们使用了圆括号而不是方括号。接下来，我<br>们分别打印该元组的各个元素：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">200<br>50<br></code></pre></td></tr></table></figure><p>下面来尝试修改元组dimensions中的一个元素:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dimensions</span> = (<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-attribute">dimensions</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">250</span><br></code></pre></td></tr></table></figure><p>代码试图修改第一个元素的值，导致Python返回类型错误消息。由于试图修改元组的<br>操作是被禁止的，因此Python指出不能给元组的元素赋值：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Traceback (most recent <span class="hljs-keyword">call</span> last):<br>File <span class="hljs-string">&quot;dimensions.py&quot;</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>dimensions[<span class="hljs-number">0</span>] = <span class="hljs-number">250</span><br><span class="hljs-symbol">TypeError:</span> <span class="hljs-comment">&#x27;tuple&#x27; object does not support item assignment</span><br></code></pre></td></tr></table></figure><p>代码试图修改矩形的尺寸时， Python报告错误。</p><h4 id="遍历元组中的所有值"><a href="#遍历元组中的所有值" class="headerlink" title="遍历元组中的所有值"></a>遍历元组中的所有值</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">for 变量名 in 元组名</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><h4 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h4><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。因此，如果要修改前述矩形的尺寸，可重新定义整个元组。这次， Python不会报告任何错误，因为给元组变量赋值是合法的：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">dimensions</span> = (<span class="hljs-number">200</span>, <span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Original dimensions:&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dimension</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dimensions</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dimension</span>)<br><br><span class="hljs-built_in">dimensions</span> = (<span class="hljs-number">400</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nModified dimensions:&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dimension</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dimensions</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dimension</span>)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Original </span><span class="hljs-keyword">dimensions:</span><br><span class="hljs-keyword"></span><span class="hljs-number">200</span><br><span class="hljs-number">50</span><br><br>Modified <span class="hljs-keyword">dimensions:</span><br><span class="hljs-keyword"></span><span class="hljs-number">400</span><br><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。</p><h3 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h3><p>随着你编写的程序越来越长，有必要了解一些代码格式设置约定。请花时间让你的代码尽可能易于阅读；让代码易于阅读有助于你掌握程序是做什么的，也可以帮助他人理解你编写的代码。为确保所有人编写的代码的结构都大致一致， Python程序员都遵循一些格式设置约定。学会编写整洁的Python后，就能明白他人编写的Python代码的整体结构——只要他们和你遵循相同的指南。要成为专业程序员，应从现在开始就遵循这些指南，以养成良好的习惯。</p><h4 id="格式设置指南"><a href="#格式设置指南" class="headerlink" title="格式设置指南"></a>格式设置指南</h4><p>若要提出Python语言修改建议，需要编写Python改进提案（ Python Enhancement Proposal，PEP）。 PEP 8是最古老的PEP之一，它向Python程序员提供了代码格式设置指南。 PEP 8的篇幅很<br>长，但大都与复杂的编码结构相关。Python格式设置指南的编写者深知，代码被阅读的次数比编写的次数多。代码编写出来后，调试时你需要阅读它；给程序添加新功能时，需要花很长的时间阅读代码；与其他程序员分享代码时，这些程序员也将阅读它们。如果一定要在让代码易于编写和易于阅读之间做出选择， Python程序员几乎总是会选择后者。下面的指南可帮助你从一开始就编写出清晰的代码。</p><h5 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h5><p>PEP 8建议每级缩进都使用四个空格，这既可提高可读性，又留下了足够的多级缩进空间。在字处理文档中，大家常常使用制表符而不是空格来缩进。对于字处理文档来说，这样做的效果很好，但混合使用制表符和空格会让Python解释器感到迷惑。每款文本编辑器都提供了一种设置，可将输入的制表符转换为指定数量的空格。你在编写代码时应该使用制表符键，但一定要对编辑器进行设置，使其在文档中插入空格而不是制表符。在程序中混合使用制表符和空格可能导致极难解决的问题。如果你混合使用了制表符和空格，可将文件中所有的制表符转换为空格，大多数编辑器都提供了这样的功能。</p><h5 id="行长"><a href="#行长" class="headerlink" title="行长"></a>行长</h5><p>很多Python程序员都建议每行不超过80字符。最初制定这样的指南时，在大多数计算机中，终端窗口每行只能容纳79字符；当前，计算机屏幕每行可容纳的字符数多得多，为何还要使用79字符的标准行长呢？这里有别的原因。专业程序员通常会在同一个屏幕上打开多个文件，使用标准行长可以让他们在屏幕上并排打开两三个文件时能同时看到各个文件的完整行。 PEP 8还建议注释的行长都不超过72字符，因为有些工具为大型项目自动生成文档时，会在每行注释开头添加格式化字符。PEP 8中有关行长的指南并非不可逾越的红线，有些小组将最大行长设置为99字符。在学习期间，你不用过多地考虑代码的行长，但别忘了，协作编写程序时，大家几乎都遵守PEP 8指南。在大多数编辑器中，都可设置一个视觉标志——通常是一条竖线，让你知道不能越过的界线在什么地方。</p><h5 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h5><p>要将程序的不同部分分开，可使用空行。你应该使用空行来组织程序文件，但也不能滥用；只要按本书的示例展示的那样做，就能掌握其中的平衡。例如，如果你有5行创建列表的代码，还有3行处理该列表的代码，那么用一个空行将这两部分隔开是合适的。然而，你不应使用三四个空行将它们隔开。空行不会影响代码的运行，但会影响代码的可读性。 Python解释器根据水平缩进情况来解读代码，但不关心垂直间距。</p><h4 id="其他格式设置指南"><a href="#其他格式设置指南" class="headerlink" title="其他格式设置指南"></a>其他格式设置指南</h4><p>PEP 8还有很多其他的格式设置建议，但这些指南针对的程序大都比目前为止本书提到的程序复杂。等介绍更复杂的Python结构时，我们再来分享相关的PEP 8指南。请访问 <a href="">https://python.org/dev/peps/pep-0008/</a>，阅读 PEP 8 格式设置指南。当前，这些指南适用的不多，但可以大致浏览一下.</p><h2 id="第五章-if语句"><a href="#第五章-if语句" class="headerlink" title="第五章 if语句"></a>第五章 if语句</h2><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。 Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为 <code>True</code>，Python就执行紧跟在if语句后面的代码；如果为 <code>False</code>， Python就忽略这些代码。</p><h4 id="检查是否相等"><a href="#检查是否相等" class="headerlink" title="检查是否相等"></a>检查是否相等</h4><p>大多数条件测试都将一个变量的当前值同特定值进行比较。最简单的条件测试检查变量的值是否与特定值相等： <code>变量A == 变量B</code><br>在Python中检查是否相等时区分大小写，例如，两个大小写不同的值会被视为不相等。</p><h4 id="检查是否不相等"><a href="#检查是否不相等" class="headerlink" title="检查是否不相等"></a>检查是否不相等</h4><p>要判断两个值是否不等，可结合使用惊叹号和等号 <code>!=</code>，其中的惊叹号表示不，在很多编程语言中都如此。</p><h4 id="比较数字"><a href="#比较数字" class="headerlink" title="比较数字"></a>比较数字</h4><p>条件语句中可包含各种数学比较，如等于 <code>==</code>、不等于 <code>!=</code>、小于 <code>&lt;</code>、小于等于 <code>&lt;=</code>、大于 <code>&gt;</code>、大于等于 <code>&gt;=</code>。</p><h4 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h4><h5 id="使用and检查多个条件"><a href="#使用and检查多个条件" class="headerlink" title="使用and检查多个条件"></a>使用and检查多个条件</h5><p>要检查是否两个条件都为True，可使用关键字and将两个条件测试合而为一；如果每个测试都通过了，整个表达式就为True；如果至少有一个测试没有通过，整个表达式就为False。</p><h5 id="使用or检查多个条件"><a href="#使用or检查多个条件" class="headerlink" title="使用or检查多个条件"></a>使用or检查多个条件</h5><p>关键字or也能够让你检查多个条件，但只要至少有一个条件满足，就能通过整个测试。仅当两个测试都没有通过时，使用or的表达式才为False。</p><h4 id="检查特定值是否包含在列表中"><a href="#检查特定值是否包含在列表中" class="headerlink" title="检查特定值是否包含在列表中"></a>检查特定值是否包含在列表中</h4><p>要判断特定的值是否已包含在列表中，可使用关键字 <code>in</code>。条件表达式为 <code>元素 in 列表</code>。<br>关键字 <code>in</code>让Python检查列表中是否包含特定元素。这让你能够在创建一个列表后，轻松地检查其中是否包含特定的值。</p><p>有些时候，确定特定的值未包含在列表中很重要；在这种情况下，可使用关键字 <code>not in</code>，条件表达式与in类似。</p><h4 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h4><p>随着对编程的了解越来越深入，将遇到术语布尔表达式，它不过是条件测试的别名。与条件表达式一样，布尔表达式的结果要么为True，要么为False。布尔值通常用于记录条件，如游戏是否正在运行，或用户是否可以编辑网站的特定内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">game_active</span> = <span class="hljs-literal">True</span><br><span class="hljs-attr">can_edit</span> = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>在跟踪程序状态或程序中重要的条件方面，布尔值提供了一种高效的方式。</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>理解条件测试后，就可以开始编写if语句了。<br>最简单的if语句只有一个测试和一个操作：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span> conditional_test:<br>    <span class="hljs-keyword">do</span> something<br>    <span class="hljs-meta"># 注意这里的缩进</span><br></code></pre></td></tr></table></figure><p>在第1行中，可包含任何条件测试，而在紧跟在测试后面的缩进代码块中，可执行任何操作。如果条件测试的结果为True， Python就会执行紧跟在if语句后面的代码；否则Python将忽略这些代码。在紧跟在if语句后面的代码块中，可根据需要包含任意数量的代码行。</p><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><p>经常需要在条件测试通过了时执行一个操作，并在没有通过时执行另一个操作；在这种情况下，可使用Python提供的if-else语句。 if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">if</span> conditional_test:<br>    <span class="hljs-keyword">do</span> something<br><span class="hljs-keyword">else</span>：<br>    <span class="hljs-keyword">do</span> something_else<br></code></pre></td></tr></table></figure><h4 id="if-elif-else结构"><a href="#if-elif-else结构" class="headerlink" title="if-elif-else结构"></a>if-elif-else结构</h4><p>经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。 Python只执行if-elif-else结构中的一个代码块，它依次检查每个条件测试，直到遇到通过了的条件测试。测试通过后， Python将执行紧跟在它后面的代码，并跳过余下的测试。<br>在现实世界中，很多情况下需要考虑的情形都超过两个。例如，来看一个根据年龄段收费的游乐场：</p><ul><li>4岁以下免费；</li><li>4~18岁收费5美元；</li><li>18岁（含）以上收费10美元。<br>如果只使用一条if语句，如何确定门票价格呢？下面的代码确定一个人所属的年龄段，并打印一条包含门票价格的消息：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">age</span> = <span class="hljs-number">12</span><br><span class="hljs-attribute">if</span> age &lt; <span class="hljs-number">4</span>:<br>    <span class="hljs-attribute">price</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">elif</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-attribute">price</span> = <span class="hljs-number">5</span><br><span class="hljs-attribute">else</span>:<br>    <span class="hljs-attribute">price</span> = <span class="hljs-number">10</span><br><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;Your admission cost is $&quot;</span> + str(price) + <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><p>可根据需要使用任意数量的elif代码块。<br>Python并不要求if-elif结构后面必须有else代码块。在有些情况下， else代码块很有用；而在其他一些情况下，使用一条elif语句来处理特定的情形更清晰。<br><strong>else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行，这可能会引入无效甚至恶意的数据。如果知道最终要测试的条件，应考虑使用一个elif代码块来代替else代码块。这样，你就可以肯定，仅当满足相应的条件时，你的代码才会执行。</strong></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>if-elif-else结构功能强大，但仅适合用于只有一个条件满足的情况：遇到通过了的测试后，Python就跳过余下的测试。这种行为很好，效率很高，让你能够测试一个特定的条件。<br>总之，如果你只想执行一个代码块，就使用if-elif-else结构；如果要运行多个代码块，就使用一系列独立的if语句。</p><h3 id="使用if语句处理列表"><a href="#使用if语句处理列表" class="headerlink" title="使用if语句处理列表"></a>使用if语句处理列表</h3><p>通过结合使用if语句和列表，可完成一些有趣的任务：对列表中特定的值做特殊处理；高效地管理不断变化的情形。</p><h4 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">for</span> 变量名 <span class="hljs-keyword">in</span> 列表名:<br>    <span class="hljs-keyword">if</span> 特殊元素 == 列表元素：<br>        <span class="hljs-keyword">do</span> something <br></code></pre></td></tr></table></figure><h4 id="确定列表不是空的"><a href="#确定列表不是空的" class="headerlink" title="确定列表不是空的"></a>确定列表不是空的</h4><p>到目前为止，对于处理的每个列表都做了一个简单的假设，即假设它们都至少包含一个元素。我们马上就要让用户来提供存储在列表中的信息，因此不能再假设循环运行时列表不是空的。有鉴于此，在运行for循环前确定列表是否为空很重要。<br>在if语句中将列表名用在条件表达式中时， Python将在列表至少包含一个元素时返回True，并在列表为空时返回False。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">if 列表名</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><h2 id="第六章-字典"><a href="#第六章-字典" class="headerlink" title="第六章 字典"></a>第六章 字典</h2><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>在Python中， 字典是一系列键—值对(key-value)。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。</p><h4 id="定义字典"><a href="#定义字典" class="headerlink" title="定义字典"></a>定义字典</h4><p>在Python中，字典用放在花括号{}中的一系列键—值对表示，如示例所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">alien_0</span> = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>键—值对是两个相关联的值。指定键时， Python将返回与之相关联的值。键和值之间用冒号分隔，而键—值对之间用逗号分隔。在字典中，你想存储多少个键—值对都可以。</p><h4 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h4><p>要获取与键相关联的值，可依次指定字典名和放在方括号内的键 <code>字典名[键名]</code>，如示例所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">alien_0<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;color&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p>这将返回字典alien_0中与键’color’相关联的值。</p><h4 id="添加key-value对"><a href="#添加key-value对" class="headerlink" title="添加key-value对"></a>添加key-value对</h4><p>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值，格式为 <code>字典名[新的键] = 值</code>。<br><strong>注意，键—值对的排列顺序与添加顺序不同。 Python不关心键—值对的添加顺序，而只关心键和值之间的关联关系。</strong></p><h4 id="先创建一个空字典"><a href="#先创建一个空字典" class="headerlink" title="先创建一个空字典"></a>先创建一个空字典</h4><p>有时候，在空字典中添加键—值对是为了方便，而有时候必须这样做。为此，可先使用一对空的花括号定义一个字典，再分行添加各个键—值对。<br>例如，下例演示了如何以这种方式创建字典 <code>alien_0</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">alien_0 = &#123;&#125;<br><br>alien_0<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;color&#x27;</span>]</span> = <span class="hljs-string">&#x27;green&#x27;</span><br>alien_0<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;points&#x27;</span>]</span> = <span class="hljs-number">5</span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(alien_0)</span></span><br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><p>使用字典来存储用户提供的数据或在编写能自动生成大量键—值对的代码时，通常都需要先定义一个空字典。</p><h4 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h4><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值，类似于创建新的键-值对。</p><h4 id="删除key-value对"><a href="#删除key-value对" class="headerlink" title="删除key-value对"></a>删除key-value对</h4><p>对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。使用 <code>del</code>语句时，必须指定字典名和要删除的键。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">del</span> 字典名<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;键名&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p><strong>删除的键—值对永远消失了。</strong></p><p>确定需要使用多行来定义字典时，在输入左花括号后按回车键，再在下一行缩进四个空格，指定第一个键—值对，并在它后面加上一个逗号。此后你再次按回车键时，文本编辑器将自动缩进后续键—值对，且缩进量与第一个键—值对相同。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">favorite_languages</span> = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;ruby&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    &#125;<br></code></pre></td></tr></table></figure><p>定义好字典后，在最后一个键—值对的下一行添加一个右花括号，并缩进四个空格，使其与字典中的键对齐。另外一种不错的做法是在最后一个键—值对后面也加上逗号，为以后在下一行添加键—值对做好准备。<br>对于较长的列表和字典，大多数编辑器都有以类似方式设置其格式的功能。对于较长的字典，还有其他一些可行的格式设置方式，因此在你的编辑器或其他源代码中，你可能会看到稍微不同的格式设置方式。</p><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><p>一个Python字典可能只包含几个键—值对，也可能包含数百万个键—值对。鉴于字典可能包含大量的数据， Python支持对字典遍历。字典可用于以各种方式存储信息，因此有多种遍历字典的方式：可遍历字典的所有键—值对、键或值。</p><h4 id="遍历所有key-value对"><a href="#遍历所有key-value对" class="headerlink" title="遍历所有key-value对"></a>遍历所有key-value对</h4><p>要编写用于遍历字典的for循环，可声明两个变量，用于存储键—值对中的键和值。对于这两个变量，可使用任何名称，一般来说，会使用与字典储存元素相关的描述性名称作为变量名，给阅读代码带来便利。<br>可以使用方法 <code>items()</code>，它返回一个键—值对列表。接下来，for循环依次将每个键—值对存储到指定的两个变量中。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">for key , value in 字典名<span class="hljs-string">.items</span><span class="hljs-params">()</span>:<br></code></pre></td></tr></table></figure><p><strong>注意，即便遍历字典时，键—值对的返回顺序也与存储顺序不同。 Python不关心键—值对的存储顺序，而只跟踪键和值之间的关联关系。</strong></p><h4 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h4><p>在不需要使用字典中的值时，方法 <code>keys()</code>很有用。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">for 变量名 in 字典名<span class="hljs-string">.keys</span><span class="hljs-params">()</span>:<br></code></pre></td></tr></table></figure><p>遍历字典时，会默认遍历所有的键，因此，如果将上述代码中的 <code>for name in favorite_languages.keys():</code>替换为 <code>for name in favorite_languages:</code>，输出将不变。<br>如果显式地使用方法 <code>keys()</code>可让代码更容易理解，你可以选择这样做，但如果你愿意，也可省略它。在这种循环中，可使用当前键来访问与之相关联的值。</p><p>我们像前面一样遍历字典中的名字，但在名字为指定朋友的名字时，打印一条消息，指出其喜欢的语言：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">favorite_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;ruby&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    &#125;<br><br>friends = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;phil&#x27;</span>, <span class="hljs-string">&#x27;sarah&#x27;</span>]</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> favorite_languages<span class="hljs-selector-class">.keys</span>():<br>    <span class="hljs-built_in">print</span>(name<span class="hljs-selector-class">.title</span>())<br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> friends:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; Hi &quot;</span> + name<span class="hljs-selector-class">.title</span>() +<br>            <span class="hljs-string">&quot;, I see your favorite language is &quot;</span> +<br>            favorite_languages<span class="hljs-selector-attr">[name]</span><span class="hljs-selector-class">.title</span>() + <span class="hljs-string">&quot;!&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们创建了一个列表，其中包含我们要通过打印消息，指出其喜欢的语言的朋友。在循环中，我们打印每个人的名字，并检查当前的名字是否在列表friends中。如果在列<br>表中，就打印一句特殊的问候语，其中包含这位朋友喜欢的语言。为访问喜欢的语言，我们使用了字典名，并将变量name的当前值作为键。每个人的名字都会被打印，但只对朋友打印特殊消息：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">Edward<br>Phil<br>Hi Phil, I <span class="hljs-meta">see</span> your favorite language <span class="hljs-keyword">is</span> Python!<br>Sarah<br>Hi Sarah, I <span class="hljs-meta">see</span> your favorite language <span class="hljs-keyword">is</span> C!<br>Jen<br></code></pre></td></tr></table></figure><p><strong>方法 <code>keys()</code>并非只能用于遍历；实际上，它返回一个列表，其中包含字典中的所有键。</strong></p><h4 id="按顺序遍历字典中的所有键"><a href="#按顺序遍历字典中的所有键" class="headerlink" title="按顺序遍历字典中的所有键"></a>按顺序遍历字典中的所有键</h4><p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。这不是问题，因为通常你想要的只是获取与键相关联的正确的值。<br>要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。为此，可使用函数 <code>sorted()</code>来获得按特定顺序排列的键列表的副本：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> 变量名 <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">sorted</span>(字典名.keys())</span><br></code></pre></td></tr></table></figure><p>这条for语句类似于其他for语句，但对方法 <code>dictionary.keys()</code>的结果调用了函数sorted()。这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。</p><h4 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h4><p>如果你感兴趣的主要是字典包含的值，可使用方法 <code>values()</code>，它返回一个值列表，而不包含任何键。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">for 变量名 in 字典名<span class="hljs-string">.values</span><span class="hljs-params">()</span>:<br></code></pre></td></tr></table></figure><p>这条for语句提取字典中的每个值，并将它们依次存储到变量中。<br>这种做法提取字典中所有的值，而没有考虑是否重复。涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。为剔除重复项，可使用集合 <code>set</code>。集合类似于列表，但每个元素都必须是独一无二的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> 变量名 <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>(字典名.<span class="hljs-keyword">values</span>()):<br></code></pre></td></tr></table></figure><p>通过对包含重复元素的列表调用 <code>set()</code>，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合。</p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p><h4 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h4><p>在下面的示例中，我们使用range()生成了30个外星人：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 创建一个用于存储外星人的空列表</span><br>aliens = []<br><span class="hljs-meta"># 创建30个绿色的外星人</span><br><span class="hljs-function"><span class="hljs-keyword">for</span> alien_number <span class="hljs-keyword">in</span> <span class="hljs-title">range</span>(<span class="hljs-params"><span class="hljs-number">30</span></span>):</span><br><span class="hljs-function">    new_alien</span> = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;speed&#x27;</span>: <span class="hljs-string">&#x27;slow&#x27;</span>&#125;<br>    aliens.append(new_alien)<br></code></pre></td></tr></table></figure><p>在这个示例中，首先创建了一个空列表，用于存储接下来将创建的所有外星人。range()返回一系列数字，其唯一的用途是告诉Python我们要重复这个循环多少次。每次执行这个循环时，都创建一个外星人，并将其附加到列表aliens末尾。</p><p>经常需要在列表中包含大量的字典，而其中每个字典都包含特定对象的众多信息。在这个列表中，所有字典的结构都相同，因此你可以遍历这个列表，并以相同的方式处理其中的每个字典。</p><h4 id="在字典中储存列表"><a href="#在字典中储存列表" class="headerlink" title="在字典中储存列表"></a>在字典中储存列表</h4><p>有时候，需要将列表存储在字典中，而不是将字典存储在列表中。<br>每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表，例：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">favorite_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;ruby&#x27;</span>],<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: [<span class="hljs-string">&#x27;c&#x27;</span>],<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: [<span class="hljs-string">&#x27;ruby&#x27;</span>, <span class="hljs-string">&#x27;go&#x27;</span>],<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;haskell&#x27;</span>],<br>    &#125;<br></code></pre></td></tr></table></figure><p><em>列表和字典的嵌套层级不应太多。</em></p><h4 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h4><p>可在字典中嵌套字典，但这样做时，代码可能很快复杂起来。例如，如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># many_users.py</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">users </span>= &#123;<br>    <span class="hljs-string">&#x27;aeinstein&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;albert&#x27;</span>,<br>        <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;einstein&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;princeton&#x27;</span>,<br>        &#125;,<br>    <span class="hljs-string">&#x27;mcurie&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;marie&#x27;</span>,<br>        <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;curie&#x27;</span>,<br>        <span class="hljs-string">&#x27;location&#x27;</span>: <span class="hljs-string">&#x27;paris&#x27;</span>,<br>        &#125;,<br>    &#125;<br><br><span class="hljs-keyword">for</span> username, user_info <span class="hljs-keyword">in</span> users.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nUsername: &quot;</span> + username)<br>    full_name = user_info[<span class="hljs-string">&#x27;first&#x27;</span>] + <span class="hljs-string">&quot; &quot;</span> + user_info[<span class="hljs-string">&#x27;last&#x27;</span>]<br>    location = user_info[<span class="hljs-string">&#x27;location&#x27;</span>]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\tFull name: &quot;</span> + full_name.title())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\tLocation: &quot;</span> + location.title())<br></code></pre></td></tr></table></figure><p>我们首先定义了一个名为users的字典，其中包含两个键：用户名’aeinstein’和’mcurie’；与每个键相关联的值都是一个字典，其中包含用户的名、姓和居住地。在处，我们遍历字典users，让Python依次将每个键存储在变量username中，并依次将与当前键相关联的字典存储在变量user_info中。在主循环内部，我们将用户名打印出来。<br>接下来开始访问内部的字典。变量user_info包含用户信息字典，而该字典包含三个键’first’、 ‘last’和’location’；对于每位用户，我们都使用这些键来生成整洁的姓名和居住地，然后打印有关用户的简要信息：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">aeinstein</span><br><span class="hljs-attribute">Full name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Albert Einstein</span><br><span class="hljs-attribute">Location</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Princeton</span><br><span class="hljs-attribute">Username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mcurie</span><br><span class="hljs-attribute">Full name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Marie Curie</span><br><span class="hljs-attribute">Location</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Paris</span><br></code></pre></td></tr></table></figure><p><em>请注意，表示每位用户的字典的结构都相同，</em>虽然Python并没有这样的要求，但这使得嵌套的字典处理起来更容易。倘若表示每位用户的字典都包含不同的键， for循环内部的代码将更复杂。</p><h2 id="第七章-用户输入和while循环"><a href="#第七章-用户输入和while循环" class="headerlink" title="第七章 用户输入和while循环"></a>第七章 用户输入和while循环</h2><p>大多数程序都旨在解决最终用户的问题，为此通常需要从用户那里获取一些信息。</p><h3 id="函数input-的工作原理"><a href="#函数input-的工作原理" class="headerlink" title="函数input()的工作原理"></a>函数input()的工作原理</h3><p>函数 <code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后， Python将其<strong>存储在一个变量中</strong>，以方便你使用。函数 <code>input()</code>接受一个参数：即要向用户显示的提示或说明，让用户知道该如何做。程序等待用户输入，并在用户按回车键后继续运行。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">变量名 = <span class="hljs-function"><span class="hljs-title">input</span>(变量名)</span><br></code></pre></td></tr></table></figure><h4 id="编写清晰的程序"><a href="#编写清晰的程序" class="headerlink" title="编写清晰的程序"></a>编写清晰的程序</h4><p>每当你使用函数input()时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息——指出用户该输入任何信息的提示都行。通过在提示末尾包含一个空格，可将提示与用户输入分开，让用户清楚地知道其输入始于何处。</p><p>有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数input()。这样，即便提示超过一行， input()语句也非常清晰。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># greeter.py</span><br>prompt = <span class="hljs-string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span><br>prompt += <span class="hljs-string">&quot;\nWhat is your first name? &quot;</span><br><br>name = input(prompt)<br>print(<span class="hljs-string">&quot;\nHello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="使用int-来获取数值输入"><a href="#使用int-来获取数值输入" class="headerlink" title="使用int()来获取数值输入"></a>使用int()来获取数值输入</h4><p>使用函数input()时， Python将用户输入解读为字符串。请看下面让用户输入其年龄的解释器会话：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How old are you? &quot;</span>)</span><br>How old are you? 21<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">age</span><br>&#x27;21&#x27;<br></code></pre></td></tr></table></figure><p>用户输入的数值被以字符串表示。离谱想让Python将输入视为数值，可使用函数int()，函数int()将数字的字符串表示转换为数值表示。</p><h4 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符%"></a>求模运算符%</h4><p>处理数值信息时， 求模运算符（ %）是一个很有用的工具，它将两个数相除并返回余数。求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。如果一个数可被另一个数整除，余数就为0，因此求模运算符将返回0。你可利用这一点来判断一个数是奇数还是偶数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"># even_or_odd.<span class="hljs-keyword">py</span><br><span class="hljs-keyword">number</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a number, and I&#x27;ll tell you if it&#x27;s even or odd: &quot;</span>)<br><span class="hljs-keyword">number</span> = <span class="hljs-keyword">int</span>(<span class="hljs-keyword">number</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">number</span> % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;\nThe number &quot;</span> + str(<span class="hljs-keyword">number</span>) + <span class="hljs-string">&quot; is even.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;\nThe number &quot;</span> + str(<span class="hljs-keyword">number</span>) + <span class="hljs-string">&quot; is odd.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while 语句用于在表达式保持为真的情况下重复地执行:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">while</span><span class="hljs-number">_</span>stmt ::=  <span class="hljs-string">&quot;while&quot;</span> assignment<span class="hljs-number">_</span>expression <span class="hljs-string">&quot;:&quot;</span> suite<br>                [<span class="hljs-string">&quot;else&quot;</span> <span class="hljs-string">&quot;:&quot;</span> suite]<br></code></pre></td></tr></table></figure><p>这将重复地检验表达式，并且如果其值为真就执行第一个子句体；如果表达式值为假（这可能在第一次检验时就发生）则如果 else 子句体存在就会被执行并终止循环。</p><h4 id="让用户选择何时退出"><a href="#让用户选择何时退出" class="headerlink" title="让用户选择何时退出"></a>让用户选择何时退出</h4><p>例：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sas">prompt = <span class="hljs-string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span><br>prompt += <span class="hljs-string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span><br><br><span class="hljs-keyword">message</span> = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">message</span> != <span class="hljs-string">&#x27;quit&#x27;</span>:<br>    <span class="hljs-keyword">message</span> = <span class="hljs-meta">input</span>(prompt)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">message</span> != <span class="hljs-string">&#x27;quit&#x27;</span>:<br>        pr<span class="hljs-meta">int</span>(<span class="hljs-keyword">message</span>)<br></code></pre></td></tr></table></figure><p>等到用户终于输入’quit’后， Python停止执行while循环，而整个程序也到此结束。</p><h4 id="使用标志"><a href="#使用标志" class="headerlink" title="使用标志"></a>使用标志</h4><p>在前一个示例中，我们让程序在满足指定条件时就执行特定的任务。但在更复杂的程序中，很多不同的事件都会导致程序停止运行；在这种情况下，该怎么办呢？例如，在游戏中，多种事件都可能导致游戏结束，如玩家一艘飞船都没有了或要保护的城市都被摧毁了。导致程序结束的事件有很多时，如果在一条while语句中检查所有这些条件，将既复杂又困难。<br>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为标志，充当了程序的交通信号灯。你可让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。这样，在while语句中就只需检查一个条件——标志的当前值是否为True，并将所有测试（是否发生了应将标志设置为False的事件）都放在其他地方，从而让程序变得更为整洁。<br>下面来在前一节的程序中添加一个标志。我们把这个标志命名为active（可给它指定任何名称），它将用于判断程序是否应继续运行：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">prompt</span> = <span class="hljs-string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span><br><span class="hljs-variable">prompt</span> += <span class="hljs-string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span><br><span class="hljs-variable">active</span> = <span class="hljs-variable"><span class="hljs-literal">True</span></span><br><span class="hljs-variable"><span class="hljs-keyword">while</span></span> <span class="hljs-variable">active</span>:<br>    <span class="hljs-variable">message</span> = <span class="hljs-function"><span class="hljs-title">input</span>(<span class="hljs-variable">prompt</span>)</span><br><br>    <span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">message</span> == <span class="hljs-string">&#x27;quit&#x27;</span>:<br>        <span class="hljs-variable">active</span> = <span class="hljs-variable"><span class="hljs-literal">False</span></span><br>    <span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">message</span>)</span><br></code></pre></td></tr></table></figure><p>而在这个程序中，我们使用了一个标志来指出程序是否处于活动状态，这样如果要添加测试（如elif语句）以检查是否发生了其他导致active变为False的事件，将很容易。在复杂的程序中，如很多事件都会导致程序停止运行的游戏中，标志很有用：在其中的任何一个事件导致活动标志变成False时，主游戏循环将退出，此时可显示一条游戏结束消息，并让用户选择是否要重新玩。</p><h4 id="使用break退出循环"><a href="#使用break退出循环" class="headerlink" title="使用break退出循环"></a>使用break退出循环</h4><p>要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。 break语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码。</p><p><em>在任何Python循环中都可使用break语句。例如，可使用break语句来退出遍历列表或字典的for循环。</em></p><h4 id="在循环中使用continue"><a href="#在循环中使用continue" class="headerlink" title="在循环中使用continue"></a>在循环中使用continue</h4><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环。<br>例如，来看一个从1数到10，但只打印其中偶数的循环：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># counting.py</span><br><span class="hljs-attribute">current_number</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">while</span> current_number &lt; <span class="hljs-number">10</span>:<br>    <span class="hljs-attribute">current_number</span> += <span class="hljs-number">1</span><br>    <span class="hljs-attribute">if</span> current_number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">continue</span><br>    <span class="hljs-attribute">print</span>(current_number)<br></code></pre></td></tr></table></figure><h4 id="避免无限循环"><a href="#避免无限循环" class="headerlink" title="避免无限循环"></a>避免无限循环</h4><p>每个while循环都必须有停止运行的途径，这样才不会没完没了地执行下去。每个程序员都会偶尔因不小心而编写出无限循环，在循环的退出条件比较微妙时尤其如此。<br>如果程序陷入无限循环，可按Ctrl + C，也可关闭显示程序输出的终端窗口。要避免编写无限循环，务必对每个while循环进行测试，确保它按预期那样结束。如果你希望程序在用户输入特定值时结束，可运行程序并输入这样的值；如果在这种情况下程序没有结束，请检查程序处理这个值的方式，确认程序至少有一个这样的地方能让循环条件为False或让break语句得以执行。</p><h3 id="使用while循环来处理列表和字典"><a href="#使用while循环来处理列表和字典" class="headerlink" title="使用while循环来处理列表和字典"></a>使用while循环来处理列表和字典</h3><p>到目前为止，我们每次都只处理了一项用户信息：获取用户的输入，再将输入打印出来或作出应答；循环再次运行时，我们获悉另一个输入值并作出响应。然而，要记录大量的用户和信息，需要在while循环中使用列表和字典。<br>for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。</p><h4 id="在列表之间移动元素"><a href="#在列表之间移动元素" class="headerlink" title="在列表之间移动元素"></a>在列表之间移动元素</h4><p>假设有一个列表，其中包含新注册但还未验证的网站用户；验证这些用户后，如何将他们移到另一个已验证用户列表中呢？一种办法是使用一个while循环，在验证用户的同时将其从未验证用户列表中提取出来，再将其加入到另一个已验证用户列表中。代码可能类似于下面这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">confirmed_users.py<br><span class="hljs-comment"># 首先，创建一个待验证用户列表和一个用于存储已验证用户的空列表</span><br>unconfirmed_users = [<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;brian&#x27;</span>, <span class="hljs-string">&#x27;candace&#x27;</span>]<br>confirmed_users = []<br><br><span class="hljs-comment"># 验证每个用户，直到没有未验证用户为止，将每个经过验证的列表都移到已验证用户列表中</span><br><span class="hljs-keyword">while</span> unconfirmed_users:<br>    current_user = unconfirmed_users.pop()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Verifying user: &quot;</span> + current_user.title())<br>    confirmed_users.append(current_user)<br><br><span class="hljs-comment"># 显示所有已验证的用户</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nThe following users have been confirmed:&quot;</span>)<br><span class="hljs-keyword">for</span> confirmed_user <span class="hljs-keyword">in</span> confirmed_users:<br>    <span class="hljs-built_in">print</span>(confirmed_user.title())<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Verifying user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Candace</span><br><span class="hljs-attribute">Verifying user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Brian</span><br><span class="hljs-attribute">Verifying user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Alice</span><br><br><span class="hljs-attribute">The following users have been confirmed</span><span class="hljs-punctuation">:</span><br>Candace<br>Brian<br>Alice<br></code></pre></td></tr></table></figure><h4 id="删除包含特定值的所有列表元素"><a href="#删除包含特定值的所有列表元素" class="headerlink" title="删除包含特定值的所有列表元素"></a>删除包含特定值的所有列表元素</h4><p>我们使用函数remove()来删除列表中的特定值，这之所以可行，是因为要删除的值在列表中只出现了一次。如果要删除列表中所有包含特定值的元素，可不断运行一个while循环，直到列表中不再包含特定值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pets = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(pets)</span></span><br>while <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets:<br>    pets<span class="hljs-selector-class">.remove</span>(<span class="hljs-string">&#x27;cat&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(pets)</span></span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;dog</span>&#x27;, <span class="hljs-symbol">&#x27;cat</span>&#x27;, <span class="hljs-symbol">&#x27;dog</span>&#x27;, <span class="hljs-symbol">&#x27;goldfish</span>&#x27;, <span class="hljs-symbol">&#x27;cat</span>&#x27;, <span class="hljs-symbol">&#x27;rabbit</span>&#x27;, <span class="hljs-symbol">&#x27;cat</span>&#x27;]<br>[<span class="hljs-symbol">&#x27;dog</span>&#x27;, <span class="hljs-symbol">&#x27;dog</span>&#x27;, <span class="hljs-symbol">&#x27;goldfish</span>&#x27;, <span class="hljs-symbol">&#x27;rabbit</span>&#x27;]<br></code></pre></td></tr></table></figure><h4 id="使用用户输入来填充字典"><a href="#使用用户输入来填充字典" class="headerlink" title="使用用户输入来填充字典"></a>使用用户输入来填充字典</h4><p>可使用while循环提示用户输入任意数量的信息。下面来创建一个调查程序，其中的循环每次执行时都提示输入被调查者的名字和回答。我们将收集的数据存储在一个字典中，以便将回答同被调查者关联起来：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs hsp">responses = &#123;&#125;<br><br><span class="hljs-meta"># 设置一个标志，指出调查是否继续</span><br>polling_active = True<br><br><span class="hljs-keyword">while</span> polling_active:<br><span class="hljs-meta"># 提示输入被调查者的名字和回答</span><br>    name = <span class="hljs-keyword">input</span>(<span class="hljs-string">&quot;\nWhat is your name? &quot;</span>)<br>    response = <span class="hljs-keyword">input</span>(<span class="hljs-string">&quot;Which mountain would you like to climb someday? &quot;</span>)<br><br><span class="hljs-meta"># 将答卷存储在字典中</span><br>    responses[name] = response<br><span class="hljs-meta"># 看看是否还有人要参与调查</span><br>    <span class="hljs-keyword">repeat</span> = <span class="hljs-keyword">input</span>(<span class="hljs-string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">repeat</span> == <span class="hljs-string">&#x27;no&#x27;</span>:<br>    polling_active = False<br><br><span class="hljs-meta"># 调查结束，显示结果</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;\n--- Poll Results ---&quot;</span>)<br><span class="hljs-keyword">for</span> name, response in responses.items():<br>    <span class="hljs-keyword">print</span>(name + <span class="hljs-string">&quot; would like to climb &quot;</span> + response + <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果你运行这个程序，并输入一些名字和回答，输出将类似于下面这样：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">What <span class="hljs-built_in">is</span> your name? Eric<br>Which mountain would you <span class="hljs-built_in">like</span> <span class="hljs-keyword">to</span> climb someday? Denali<br>Would you <span class="hljs-built_in">like</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">let</span> another person respond? (yes/ no) yes<br>What <span class="hljs-built_in">is</span> your name? Lynn<br>Which mountain would you <span class="hljs-built_in">like</span> <span class="hljs-keyword">to</span> climb someday? Devil<span class="hljs-comment">&#x27;s Thumb</span><br>Would you <span class="hljs-built_in">like</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">let</span> another person respond? (yes/ no) no<br>--- Poll Results ---<br>Lynn would <span class="hljs-built_in">like</span> <span class="hljs-keyword">to</span> climb Devil<span class="hljs-comment">&#x27;s Thumb.</span><br>Eric would <span class="hljs-built_in">like</span> <span class="hljs-keyword">to</span> climb Denali.<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用该函数。需要在程序中多次执行同一项任务时，无需反复编写完成该任务的代码，而只需调用执行该任务的函数，让Python运行其中的代码。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>下面是一个打印问候语的简单函数，名为greet_user()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br><br>greet_user()<br></code></pre></td></tr></table></figure><p>这个示例演示了最简单的函数结构。 Ø处的代码行使用关键字def来告诉Python你要定义一个函数。这是函数定义，向Python指出了函数名，还可能在括号内指出函数为完成其任务需要什么样的信息。在这里，函数名为greet_user()，它不需要任何信息就能完成其工作，因此括号是空的（<strong>即便如此，括号也必不可少</strong>）。最后，定义以冒号结尾。<br>紧跟在def greet_user():后面的所有缩进行构成了函数体。 此处的文本是被称为文档字符串（ docstring）的注释，描述了函数是做什么的。文档字符串用三引号 <code>&quot;&quot;&quot;  &quot;&quot;&quot;</code>括起， Python使用它们来生成有关程序中函数的文档。<br>函数调用让Python执行函数的代码。要调用函数，可依次指定函数名以及用括号括起的必要信息</p><h4 id="向函数传递信息"><a href="#向函数传递信息" class="headerlink" title="向函数传递信息"></a>向函数传递信息</h4><p>可在函数定义def greet_user()的括号内添加username。通过在这里添加username，<br>就可让函数接受你给username指定的任何值。现在，这个函数要求你调用它时给username指定一个值。调用greet_user()时，可将一个名字传递给它，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + username.title() + <span class="hljs-string">&quot;!&quot;</span>)<br><br>greet_user(<span class="hljs-string">&#x27;elysia&#x27;</span>)<br></code></pre></td></tr></table></figure><p>你可以根据需要调用函数greet_user()任意次，调用时无论传入什么样的名字，都会生成相应的输出。</p><h4 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h4><p>在函数greet_user()的定义中，变量username是一个形参——函数完成其工作所需的一项信息。在代码greet_user(‘jesse’)中，值’elysia’是一个实参。实参是调用函数时传递给函数的信息。</p><h3 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h3><p>鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。</p><h4 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h4><p>调用函数时， Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。 为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。<br>为明白其中的工作原理，来看一个显示宠物信息的函数。这个函数指出一个宠物属于哪种动物以及它叫什么名字，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">animal_type, pet_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nI have a &quot;</span> + animal_type + <span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My &quot;</span> + animal_type + <span class="hljs-string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="hljs-string">&quot;.&quot;</span>)<br><br>describe_pet(<span class="hljs-string">&#x27;hamster&#x27;</span>, <span class="hljs-string">&#x27;harry&#x27;</span>)<br>describe_pet(<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;willie&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">I have a hamster.<br>My hamste<span class="hljs-string">r&#x27;s name is Harry.</span><br><span class="hljs-string"></span><br><span class="hljs-string">I have a dog.</span><br><span class="hljs-string">My dog&#x27;</span>s name <span class="hljs-keyword">is</span> Willie.<br></code></pre></td></tr></table></figure><h5 id="调用函数多次"><a href="#调用函数多次" class="headerlink" title="调用函数多次"></a>调用函数多次</h5><p>调用函数多次是一种效率极高的工作方式。在函数中，可根据需要使用任意数量的位置实参， Python将按顺序将函数调用中的实参关联到函数定义中相应的形参。</p><h5 id="位置实参的顺序很重要"><a href="#位置实参的顺序很重要" class="headerlink" title="位置实参的顺序很重要"></a>位置实参的顺序很重要</h5><p>请确认函数调用中实参的顺序与函数定义中形参的顺序一致。</p><h4 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h4><p>关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。<br>下面来重新编写pets.py，在其中使用关键字实参来调用describe_pet()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">animal_type, pet_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nI have a &quot;</span> + animal_type + <span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My &quot;</span> + animal_type + <span class="hljs-string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="hljs-string">&quot;.&quot;</span>)<br>describe_pet(animal_type=<span class="hljs-string">&#x27;hamster&#x27;</span>, pet_name=<span class="hljs-string">&#x27;harry&#x27;</span>)<br></code></pre></td></tr></table></figure><p>函数describe_pet()还是原来那样，但调用这个函数时，我们向Python明确地指出了各个实参对应的形参。看到这个函数调用时， Python知道应该将实参’hamster’和’harry’分别存储在形参animal_type和pet_name中。输出正确无误，它指出我们有一只名为Harry的仓鼠。<br>关键字实参的顺序无关紧要，因为Python知道各个值该存储到哪个形参中。<em>使用关键字实参时，务必准确地指定函数定义中的形参名。</em></p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时， Python将使用指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。<br>例如，如果你发现调用describe_pet()时，描述的大都是小狗，就可将形参animal_type的默认值设置为’dog’。这样，调用describe_pet()来描述小狗时，就可不提供这种信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_pet</span>(<span class="hljs-params">pet_name, animal_type=<span class="hljs-string">&#x27;dog&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nI have a &quot;</span> + animal_type + <span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My &quot;</span> + animal_type + <span class="hljs-string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="hljs-string">&quot;.&quot;</span>)<br>    describe_pet(pet_name=<span class="hljs-string">&#x27;willie&#x27;</span>)<br></code></pre></td></tr></table></figure><p>请注意，在这个函数的定义中，修改了形参的排列顺序。由于给 <code>animal_type</code>指定了默认值，无需通过实参来指定动物类型，因此在函数调用中只包含一个实参——宠物的名字。然而， Python依然将这个实参视为位置实参，因此如果函数调用中只包含宠物的名字，这个实参将关联到函数定义中的第一个形参。这就是需要将 <code>pet_name</code>放在形参列表开头的原因所在。<br>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。<br>这让Python依然能够正确地解读位置实参。</p><h4 id="等效的函数调用"><a href="#等效的函数调用" class="headerlink" title="等效的函数调用"></a>等效的函数调用</h4><p>鉴于可混合使用位置实参、关键字实参和默认值，通常有多种等效的函数调用方式。<br>请看下面的 <code>函数describe_pets()</code>的定义，其中给一个形参提供了默认值：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">def describe<span class="hljs-constructor">_pet(<span class="hljs-params">pet_name</span>, <span class="hljs-params">animal_type</span>=&#x27;<span class="hljs-params">dog</span>&#x27;)</span>:<br></code></pre></td></tr></table></figure><p>基于这种定义，在任何情况下都必须给pet_name提供实参；指定该实参时可以使用位置方式，也可以使用关键字方式。如果要描述的动物不是小狗，还必须在函数调用中给animal_type提供实参；同样，指定该实参时可以使用位置方式，也可以使用关键字方式。</p><p>下面对这个函数的所有调用都可行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 一条名为Willie的小狗</span><br>describe_pet(<span class="hljs-string">&#x27;willie&#x27;</span>)<br>describe_pet(<span class="hljs-attribute">pet_name</span>=<span class="hljs-string">&#x27;willie&#x27;</span>)<br><span class="hljs-comment"># 一只名为Harry的仓鼠</span><br>describe_pet(<span class="hljs-string">&#x27;harry&#x27;</span>, <span class="hljs-string">&#x27;hamster&#x27;</span>)<br>describe_pet(<span class="hljs-attribute">pet_name</span>=<span class="hljs-string">&#x27;harry&#x27;</span>, <span class="hljs-attribute">animal_type</span>=<span class="hljs-string">&#x27;hamster&#x27;</span>)<br>describe_pet(<span class="hljs-attribute">animal_type</span>=<span class="hljs-string">&#x27;hamster&#x27;</span>, <span class="hljs-attribute">pet_name</span>=<span class="hljs-string">&#x27;harry&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用哪种调用方式无关紧要，只要函数调用能生成你希望的输出就行。使用对你来说最<br>容易理解的调用方式即可。</p><h4 id="避免实参错误"><a href="#避免实参错误" class="headerlink" title="避免实参错误"></a>避免实参错误</h4><p>等你开始使用函数后，如果遇到实参不匹配错误，不要大惊小怪。你提供的实参多于或少于函数完成其工作所需的信息时，将出现实参不匹配错误。<br>如果调用函数describe_pet()时没有指定任何实参，结果将如下————</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;pets.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">6</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>    describe_pet()<br>TypeError: describe_pet() missing <span class="hljs-number">2</span> required positional arguments: <span class="hljs-string">&#x27;animal_type&#x27;</span> <span class="hljs-built_in">and</span> <span class="hljs-string">&#x27;pet_name</span><br></code></pre></td></tr></table></figure><p>traceback指出了问题出在什么地方，让我们能够回过头去找出函数调用中的错误。如果这个函数存储在一个独立的文件中，我们也许无需打开这个文件并查看函数的代码，就能重新正确地编写函数调用。<br>Python读取函数的代码，并指出我们需要为哪些形参提供实参，这提供了极大的帮助。这也是应该给变量和函数指定描述性名称的另一个原因；如果你这样做了，那么无论对于你，还是可能使用你编写的代码的其他任何人来说， Python提供的错误消息都将更有帮助。<br>如果提供的实参太多，将出现类似的traceback，帮助你确保函数调用和函数定义匹配。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序</p><h4 id="返回简单值"><a href="#返回简单值" class="headerlink" title="返回简单值"></a>返回简单值</h4><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span><br>    full_name = first_name + <span class="hljs-string">&#x27; &#x27;</span> + last_name<br>    <span class="hljs-keyword">return</span> full_name.title()<br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br></code></pre></td></tr></table></figure><p>调用返回值的函数时，需要提供一个变量，用于存储返回的值。<br>我们原本只需编写下面的代码就可输出整洁的姓名，相比于此，前面做的工作好像太多了：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;Jimi Hendrix&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>但在需要分别存储大量名和姓的大型程序中，像get_formatted_name()这样的函数非常有用。</p><h4 id="让实参变成可选的"><a href="#让实参变成可选的" class="headerlink" title="让实参变成可选的"></a>让实参变成可选的</h4><p>有时候，需要让实参变成可选的，这样使用函数的人就只需在必要时才提供额外的信息。可使用默认值来让实参变成可选的。<br>例如，假设我们要扩展函数get_formatted_name()，使其还处理中间名。为此，可将其修改成类似于下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, middle_name, last_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span><br>    full_name = first_name + <span class="hljs-string">&#x27; &#x27;</span> + middle_name + <span class="hljs-string">&#x27; &#x27;</span> + last_name<br>    <span class="hljs-keyword">return</span> full_name.title()<br><br>musician = get_formatted_name(<span class="hljs-string">&#x27;john&#x27;</span>, <span class="hljs-string">&#x27;lee&#x27;</span>, <span class="hljs-string">&#x27;hooker&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br></code></pre></td></tr></table></figure><p>只要同时提供名、中间名和姓，这个函数就能正确地运行。然而，并非所有的人都有中间名，但如果你调用这个函数时只提供了名和姓，它将不能正确地运行。为让中间名变成可选的，可给实参middle_name指定一个默认值——空字符串，并在用户没有提供中间名时不使用这个实参。 为让get_formatted_name()在没有提供中间名时依然可行，<br>可给实参middle_name指定一个默认值——空字符串，并将其移到形参列表的末尾:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_formatted_name</span>(<span class="hljs-params">first_name, last_name, middle_name=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> middle_name:<br>        full_name = first_name + <span class="hljs-string">&#x27; &#x27;</span> + middle_name + <span class="hljs-string">&#x27; &#x27;</span> + last_name<br>    <span class="hljs-keyword">else</span>:<br>        full_name = first_name + <span class="hljs-string">&#x27; &#x27;</span> + last_name<br>    <span class="hljs-keyword">return</span> full_name.title()<br></code></pre></td></tr></table></figure><p>Python将非空字符串解读为True，因此如果函数，调用中提供了中间名，<code>if middle_name</code>将为True。</p><h4 id="返回字典"><a href="#返回字典" class="headerlink" title="返回字典"></a>返回字典</h4><p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。例如，下面的函数接受姓名的组成部分，并返回一个表示人的字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># person.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_person</span>(<span class="hljs-params">first_name, last_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span><br>    person = &#123;<span class="hljs-string">&#x27;first&#x27;</span>: first_name, <span class="hljs-string">&#x27;last&#x27;</span>: last_name&#125;<br>    <span class="hljs-keyword">return</span> person<br><br>musician = build_person(<span class="hljs-string">&#x27;jimi&#x27;</span>, <span class="hljs-string">&#x27;hendrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(musician)<br></code></pre></td></tr></table></figure><p>这个函数接受简单的文本信息，将其放在一个更合适的数据结构中，让你不仅能打印这些信息，还能以其他方式处理它们。当前，字符串’jimi’和’hendrix’被标记为名和姓。你可以轻松地扩展这个函数，使其接受可选值，如中间名、年龄、职业或你要存储的其他任何信息。</p><h4 id="结合使用函数和while循环"><a href="#结合使用函数和while循环" class="headerlink" title="结合使用函数和while循环"></a>结合使用函数和while循环</h4><h1 id="第二部分-实战演练"><a href="#第二部分-实战演练" class="headerlink" title="第二部分 实战演练"></a>第二部分 实战演练</h1><h2 id="批量发送邮件-方案已废弃-新实现见Python-smtp发送邮件"><a href="#批量发送邮件-方案已废弃-新实现见Python-smtp发送邮件" class="headerlink" title="批量发送邮件 (方案已废弃 新实现见Python smtp发送邮件)"></a>批量发送邮件 (方案已废弃 新实现见Python smtp发送邮件)</h2><p>步骤：</p><ol><li>批量读取文件内容；</li><li>通过账号密码登录邮箱；</li><li>设置邮件收件人等信息；</li><li>配置邮件正文和附件并发送。</li></ol><h3 id="批量读取文件内容"><a href="#批量读取文件内容" class="headerlink" title="批量读取文件内容"></a>批量读取文件内容</h3><p>在 Windows 系统的路径中，我们使用反斜线 <code>\</code> 分隔各个文件夹和文件名。同时，在路径的最前面，是盘符的字母和一个英文冒号，表示文件或文件夹具体是在哪个盘的路径下。变量 sender 存储发件人邮箱，字典 receiverDict 的键是收件人名字，对应的值为收件人的邮箱。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 发件人、收件人</span><br>sender = <span class="hljs-string">&quot;aLing@qq.com&quot;</span><br>receiverDict = &#123;<span class="hljs-string">&quot;xixi&quot;</span>:<span class="hljs-string">&quot;adc@yequ.com&quot;</span>, <span class="hljs-string">&quot;kiki&quot;</span>:<span class="hljs-string">&quot;def@yequ.com&quot;</span>, <span class="hljs-string">&quot;feifei&quot;</span>:<span class="hljs-string">&quot;hij@yequ.com&quot;</span>, <span class="hljs-string">&quot;bobo&quot;</span>:<span class="hljs-string">&quot;klm@yequ.com&quot;</span>, <span class="hljs-string">&quot;cici&quot;</span>:<span class="hljs-string">&quot;opq@yequ.com&quot;</span>, <span class="hljs-string">&quot;huahua&quot;</span>:<span class="hljs-string">&quot;rst@yequ.com&quot;</span>, <span class="hljs-string">&quot;yeye&quot;</span>:<span class="hljs-string">&quot;uvw@yequ.com&quot;</span>, <span class="hljs-string">&quot;jingjing&quot;</span>:<span class="hljs-string">&quot;xyz@yequ.com&quot;</span>, <span class="hljs-string">&quot;tongtong&quot;</span>:<span class="hljs-string">&quot;yza@yequ.com&quot;</span>&#125;<br><br><span class="hljs-comment"># 将文件路径，赋值给变量path</span><br>path = r<span class="hljs-string">&quot;F:\Users\aLing&quot;</span><br><br><span class="hljs-comment"># 使用print()输出变量path</span><br><span class="hljs-keyword">print</span>(path)<br></code></pre></td></tr></table></figure><p>使用 Windows 系统需要注意路径前要加一个 <code>r</code>，表示字符串不需要转义。</p><p>可以使用字符串拼接的方式，获得图片的路径。收件人姓名该如何获取呢？在这里，可以通过 for 循环遍历字典 receiverDict，得到字典的键。<em>自然，这需要整理联系人与文件名时批量处理。</em></p><h4 id="批量获得图片路径"><a href="#批量获得图片路径" class="headerlink" title="批量获得图片路径"></a>批量获得图片路径</h4><p>接着，通过字符串拼接的方式，就可以批量获得图片路径。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># for 循环遍历字典receiverDict，将键赋值给变量receiver</span><br><span class="hljs-keyword">for</span> receiver <span class="hljs-keyword">in</span> receiverDict:<br>    # 将字符串path + <span class="hljs-string">&quot;/&quot;</span>+ receiver + <span class="hljs-string">&quot;.jpg&quot;</span>拼接，赋值给变量filePath<br>    filePath = path + <span class="hljs-string">&quot;/&quot;</span>+ receiver + <span class="hljs-string">&quot;.jpg&quot;</span><br>    # 使用<span class="hljs-built_in">print</span>()输出filePath<br>    <span class="hljs-built_in">print</span>(filePath)<br></code></pre></td></tr></table></figure><p>可以使用 with…as 语句配合 open() 函数的方式，打开图片</p><blockquote><p>open() 函数用于打开一个文件，并返回文件对象。通常，open() 函数常用形式是接收两个参数：文件路径和打开方式。rb 表示以只读的方式读取二进制文件，即 Read Binary 的缩写。open() 函数还可以对文件进行写入。</p></blockquote><p>open() 函数在读取文件时，有时候会发生异常。为了能在发生异常时，自动释放打开的文件资源，我们可以搭配使用 <code>with...as...</code>语句。使用 <code>with...as...</code>语句，首先执行 with 后面的 open() 函数，返回值会赋给 as 后面的变量。</p><p>当我们要打开一张图片就需要这几个部分：<br><img src="/../img/mk-2023-01-30-17-16-11.png" alt="img"></p><p><em>常见文件后缀名Filename Extension</em><br><img src="/../img/mk-2023-01-30-17-03-31.png"></p><h4 id="批量读取图片。"><a href="#批量读取图片。" class="headerlink" title="批量读取图片。"></a>批量读取图片。</h4><p>在这里，我们可以调用 read() 函数，read() 函数可以逐个字节（或者逐个字符）读取文件中的内容。由于是以二进制格式打开图片，所以读取的图片内容是二进制格式。<br><img src="/../img/mk-2023-01-30-17-19-30.png"><br>这样，所有图片就以二进制格式保存下来。</p><h3 id="通过账号密码登录邮箱"><a href="#通过账号密码登录邮箱" class="headerlink" title="通过账号密码登录邮箱"></a>通过账号密码登录邮箱</h3><p>为了登录邮箱，我们先导入 smtplib 模块，smtplib 模块负责登录和发送邮箱的操作。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> smtplib<br></code></pre></td></tr></table></figure><p>邮箱服务器的功能：当发件人发出邮件时，会根据邮件地址发送给邮件服务器。之后，收件人登录自己的邮箱时，会从邮件服务器获取邮件，就能够查看到刚才发件人发出的邮件了。每个服务器有多个端口，只有通过端口号，程序才能访问到该服务器。</p><p>其他邮箱一般使用帐号和密码。而在代码中，需要用到帐号和授权码。授权码就是用于登录第三方客户端专用的密码，以QQ邮箱为案例，学习如何获取QQ邮箱中的授权码。</p><h4 id="QQ邮箱设置"><a href="#QQ邮箱设置" class="headerlink" title="QQ邮箱设置"></a>QQ邮箱设置</h4><ol><li>在浏览器中打开网址mail.qq.com，输入自己的帐号和密码，登录邮箱并找到「设置」<br>2.点击「设置」，找到「账户」。</li><li>滑动页面找到「SMTP服务」，选择第二项，点击「开启」。<br>4.「短信验证」点击「开启」后会弹出验证密保，需要用自己的手机号发送指定内容，发送完成后，点击「我已发送」。</li><li>完成验证后，将会获得一个「授权码」（授权码不要告诉其他人），复制并保存授权码， 这样我们就拿到了授权码。</li></ol><p>在代码中需要先连接邮箱服务器，再登录邮箱。</p><ol><li>smtplib.SMTP_SSL(服务器地址, 端口号) —— 负责连接邮箱服务器。</li><li>login(帐号, 授权码) —— 负责登录邮箱。</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 使用<span class="hljs-keyword">import</span>导入smtplib模块<br><span class="hljs-keyword">import</span> smtplib<br><br># 邮箱帐号设置，<span class="hljs-string">&quot;aLing@qq.com&quot;</span>赋值给mailUser<br>mailUser = <span class="hljs-string">&quot;aLing@qq.com&quot;</span><br># 邮箱授权码设置，<span class="hljs-string">&quot;abcnawckdujkdace&quot;</span>赋值给mailPass <br>mailPass = <span class="hljs-string">&quot;abcnawckdujkdace&quot;</span><br><br># 使用 smtplib.SMTP_SSL() 实例化对象<br># 传入服务器和端口号参数，赋值给smtpObj<br>smtpObj = smtplib.SMTP_SSL(<span class="hljs-string">&quot;smtp.qq.com&quot;</span>, <span class="hljs-number">465</span>)<br># 使用login()函数传入邮箱账户和授权码，登录邮箱<br>smtpObj.login(mailUser, mailPass)<br></code></pre></td></tr></table></figure><p><img src="/../img/mk-2023-01-31-12-05-20.png"></p><h3 id="设置邮件收件人等信息"><a href="#设置邮件收件人等信息" class="headerlink" title="设置邮件收件人等信息"></a>设置邮件收件人等信息</h3><p>编辑收件人等信息需要用到 email 模块，该模块中封装了很多方法。负责编辑收件人、发件人、主题等信息。<br>需要从 <code>email.header</code>中导入 Header 类，用于编辑发件人；从 <code>email.mime.multipart</code>中导入 <code>MIMEMultipart</code>类，用于整合邮件信息。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> email.<span class="hljs-keyword">header</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">Header</span><br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br></code></pre></td></tr></table></figure><ol><li>Header 负责编辑邮件内容。<br><code>message[&quot;From&quot;] = Header(&quot;阿玲&lt;aLing@qq.com&gt;&quot;)</code>表示先实例化一个 Header 对象，传入发件人信息；然后将发件人信息，赋值给 message[“From”]。<br>其他内容的编辑方式类似，实例化一个 Header 对象，将收件人信息写入 message 中的[“To”]字段中。将主题信息写入 message 中的[“Subject”]字段中。</li><li>MIMEMultipart 负责整合邮件内容。<br><code>message = MIMEMultipart()</code> —— 表示实例化一个 MIMEMultipart 对象，赋值给 message ，便于后面将邮件信息写入变量中。</li></ol><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sas"># for 循环遍历字典receiverDict，将键赋值给变量receiver<br>for receiver <span class="hljs-keyword">in</span> receiverDict:<br>    # 实例化 MIMEMultipart 对象，赋值给<span class="hljs-keyword">message</span><br>    <span class="hljs-keyword">message</span> = MIMEMultipart()<br>    # 将发件人信息写入 <span class="hljs-keyword">message</span>[<span class="hljs-string">&quot;From&quot;</span>]<br>    <span class="hljs-keyword">message</span>[<span class="hljs-string">&quot;From&quot;</span>] = Header(f<span class="hljs-string">&quot;阿玲&lt;&#123;sender&#125;&gt;&quot;</span>)<br>    # 将收件人信息写入 <span class="hljs-keyword">message</span>[<span class="hljs-string">&quot;To&quot;</span>]<br>    <span class="hljs-keyword">message</span>[<span class="hljs-string">&quot;To&quot;</span>] = Header(f<span class="hljs-string">&quot;&#123;receiver&#125;&lt;&#123;receiverDict[receiver]&#125;&gt;&quot;</span>)<br>    # 将主题写入 <span class="hljs-keyword">message</span>[<span class="hljs-string">&quot;Subject&quot;</span>]<br>    <span class="hljs-keyword">message</span>[<span class="hljs-string">&quot;Subject&quot;</span>] = Header(f<span class="hljs-string">&quot;&#123;receiver&#125;-年会邀请函&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><p>发送邮件使用 sendmail()，传入三个参数：</p><ol><li>发件人邮箱 sender；</li><li>收件人邮箱 receiverDict[receiver]；</li><li>邮件内容 message.as_string()，使用 as_string() 方法将message设置为文本格式。<br><img src="/../img/mk-2023-01-31-12-23-44.png"></li></ol><h3 id="配置邮件正文和附件并发送"><a href="#配置邮件正文和附件并发送" class="headerlink" title="配置邮件正文和附件并发送"></a>配置邮件正文和附件并发送</h3><p>邮件正文需要使用 email.mime.text 下的 MIMEText 类。邮件正文需要创建 MIMEText 实例，传入三个参数：</p><ol><li>正文：”Dear xx，邀请你参加年会。”；（可根据实际情况编辑内容。）</li><li>文本类型：”plain”；</li><li>编码：”utf-8”。<br><img src="/../img/mk-2023-01-31-12-26-44.png"></li></ol><h4 id="图片附件的处理"><a href="#图片附件的处理" class="headerlink" title="图片附件的处理"></a>图片附件的处理</h4><p>文件内容读取后，我们需要将图片文件编辑为邮件中需要的格式。从 email.mime.image 中导入 MIMEImage 类，用于图片附件的处理。</p><p>先创建 MIMEImage 实例，传递图片内容参数，再调用 add_header() 设置名称。</p><ol><li>参数：”Content-Disposition”</li><li>参数：”attachment”</li><li>参数：filename&#x3D;”邀请函.jpg”（文件名可根据实际情况编辑）。<br><img src="/../img/mk-2023-01-31-12-31-48.png"></li></ol><p>正文和图片需要使用 message 调用 attach() 方法，传入相应的参数。<br><img src="/../img/mk-2023-01-31-12-45-07.png"></p><p>全部代码实现示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入所需模块</span><br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.image <span class="hljs-keyword">import</span> MIMEImage<br><br><span class="hljs-comment"># 邮箱帐号和授权码，连接和登录邮箱</span><br>mailUser = <span class="hljs-string">&quot;aLing@qq.com&quot;</span><br>mailPass = <span class="hljs-string">&quot;abcnawckdujkdace&quot;</span><br>smtpObj = smtplib.SMTP_SSL(<span class="hljs-string">&quot;smtp.qq.com&quot;</span>, <span class="hljs-number">465</span>)<br>smtpObj.login(mailUser, mailPass)<br><br><span class="hljs-comment"># 发件人、收件人</span><br>sender = <span class="hljs-string">&quot;aLing@qq.com&quot;</span><br>receiverDict = &#123;<span class="hljs-string">&quot;xixi&quot;</span>:<span class="hljs-string">&quot;adc@yequ.com&quot;</span>, <span class="hljs-string">&quot;kiki&quot;</span>:<span class="hljs-string">&quot;def@yequ.com&quot;</span>,<span class="hljs-string">&quot;tongtong&quot;</span>:<span class="hljs-string">&quot;yza@yequ.com&quot;</span>&#125;<br><br><span class="hljs-comment"># 文件路径</span><br>path = <span class="hljs-string">&quot;/Users/aLing&quot;</span><br><br><span class="hljs-keyword">for</span> receiver <span class="hljs-keyword">in</span> receiverDict:<br>    <span class="hljs-comment"># 编辑并整合发件人、收件人、主题信息</span><br>    message = MIMEMultipart()<br>    message[<span class="hljs-string">&quot;From&quot;</span>] = Header(<span class="hljs-string">f&quot;阿玲&lt;<span class="hljs-subst">&#123;sender&#125;</span>&gt;&quot;</span>)<br>    message[<span class="hljs-string">&quot;To&quot;</span>] = Header(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;receiver&#125;</span>&lt;<span class="hljs-subst">&#123;receiverDict[receiver]&#125;</span>&gt;&quot;</span>)<br>    message[<span class="hljs-string">&quot;Subject&quot;</span>] = Header(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;receiver&#125;</span>-年会邀请函&quot;</span>)<br>  <br>    <span class="hljs-comment"># 编辑邮件正文</span><br>    mailContent = MIMEText(<span class="hljs-string">f&quot;Dear <span class="hljs-subst">&#123;receiver&#125;</span> 邀请你参加年会&quot;</span>, <span class="hljs-string">&quot;plain&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>)<br><br>    <span class="hljs-comment"># 读取图片文件</span><br>    filePath = path + <span class="hljs-string">&quot;/&quot;</span> + receiver + <span class="hljs-string">&quot;.jpg&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filePath, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> imageFile:<br>        fileContent = imageFile.read()<br>  <br>    <span class="hljs-comment"># 编辑附件信息</span><br>    att = MIMEImage(fileContent)<br>    att.add_header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment&quot;</span>, filename=<span class="hljs-string">&quot;邀请函.jpg&quot;</span>)<br>  <br>    <span class="hljs-comment"># 整合正文和图片</span><br>    message.attach(mailContent)<br>    message.attach(att)<br>  <br>    <span class="hljs-comment"># 发送邮件</span><br>    smtpObj.sendmail(sender, receiverDict[receiver], message.as_string())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发送成功&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Python-smtp发送邮件"><a href="#Python-smtp发送邮件" class="headerlink" title="Python smtp发送邮件"></a>Python smtp发送邮件</h2><p>详见 <a href="https://docs.python.org/zh-cn/3/library/email.examples.html">https://docs.python.org/zh-cn/3/library/email.examples.html</a></p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。python的smtplib提供了一种很方便的途径发送电子邮件。它对smtp协议进行了简单的封装。<br>Python创建 SMTP 对象语法如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import smtplib<br>smtpObj = smtplib.<span class="hljs-constructor">SMTP( [<span class="hljs-params">host</span> [, <span class="hljs-params">port</span> [, <span class="hljs-params">local_hostname</span>]]] )</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如:runoob.com，这个是可选参数。</li><li>port: 如果你提供了 host 参数, 你需要指定 SMTP 服务使用的端口号，一般情况下SMTP端口号为25。</li><li>local_hostname: 如果SMTP在你的本机上，你只需要指定服务器地址为 localhost 即可。</li></ul><p>Python SMTP对象使用sendmail方法发送邮件，语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">SMTP<span class="hljs-selector-class">.sendmail</span>(from_addr, to_addrs, msg<span class="hljs-selector-attr">[, mail_options, rcpt_options]</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>from_addr: 邮件发送者地址。</li><li>to_addrs: 字符串列表，邮件发送地址。</li><li>msg: 发送消息<br>这里要注意一下第三个参数，msg是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。</li></ul><h3 id="使用QQ邮箱SMTP的简单实现："><a href="#使用QQ邮箱SMTP的简单实现：" class="headerlink" title="使用QQ邮箱SMTP的简单实现："></a>使用QQ邮箱SMTP的简单实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.utils <span class="hljs-keyword">import</span> formataddr<br> <br>my_sender=<span class="hljs-string">&#x27;xxx&#x27;</span>    <span class="hljs-comment"># 发件人邮箱账号</span><br>my_pass = <span class="hljs-string">&#x27;xxx&#x27;</span>    <span class="hljs-comment"># 发件人邮箱密码</span><br>my_user=<span class="hljs-string">&#x27;xxx&#x27;</span>      <span class="hljs-comment"># 收件人邮箱账号</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mail</span>():<br>    ret=<span class="hljs-literal">True</span><br>    <span class="hljs-keyword">try</span>:<br>        msg=MIMEText (<span class="hljs-string">&quot;This is a Python smtp test, please do not reply.&quot;</span>,<span class="hljs-string">&#x27;plain&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        msg[<span class="hljs-string">&#x27;From&#x27;</span>]=formataddr([<span class="hljs-string">&quot;xxx&quot;</span>,my_sender])  <span class="hljs-comment"># 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br>        msg[<span class="hljs-string">&#x27;To&#x27;</span>]=formataddr([<span class="hljs-string">&quot;receiver&quot;</span>,my_user])              <span class="hljs-comment"># 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br>        msg[<span class="hljs-string">&#x27;Subject&#x27;</span>]=<span class="hljs-string">&quot;Python smtp test&quot;</span>                <span class="hljs-comment"># 邮件的主题</span><br> <br><br> <br>        server=smtplib.SMTP_SSL(<span class="hljs-string">&quot;smtp.qq.com&quot;</span>, <span class="hljs-number">465</span>)  <span class="hljs-comment"># 发件人邮箱中的SMTP服务器，端口是465</span><br>        server.login(my_sender, my_pass)  <span class="hljs-comment"># 括号中对应的是发件人邮箱账号、邮箱密码</span><br>        server.sendmail(my_sender,[my_user,],msg.as_string())  <span class="hljs-comment"># 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span><br>        server.quit()  <span class="hljs-comment"># 关闭连接</span><br>    <span class="hljs-keyword">except</span> Exception:  <span class="hljs-comment"># 如果 try 中的语句没有执行，则会执行下面的 ret=False</span><br>        ret=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> ret<br> <br>ret=mail()<br><span class="hljs-keyword">if</span> ret:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送成功&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送失败&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="发送HTML格式的邮件"><a href="#发送HTML格式的邮件" class="headerlink" title="发送HTML格式的邮件"></a>发送HTML格式的邮件</h3><p>Python发送HTML格式的邮件与发送纯文本消息的邮件不同之处就是将MIMEText中_subtype设置为html。具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br> <br>sender = <span class="hljs-string">&#x27;from@runoob.com&#x27;</span><br>receivers = [<span class="hljs-string">&#x27;429240967@qq.com&#x27;</span>]  <span class="hljs-comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span><br> <br>mail_msg = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span><br><span class="hljs-string">&lt;p&gt;&lt;a href=&quot;http://www.runoob.com&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>message = MIMEText(mail_msg, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;To&#x27;</span>] =  Header(<span class="hljs-string">&quot;测试&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br>subject = <span class="hljs-string">&#x27;Python SMTP 邮件测试&#x27;</span><br>message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br> <br><span class="hljs-keyword">try</span>:<br>    smtpObj = smtplib.SMTP(<span class="hljs-string">&#x27;localhost&#x27;</span>)<br>    smtpObj.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;邮件发送成功&quot;</span>)<br><span class="hljs-keyword">except</span> smtplib.SMTPException:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Error: 无法发送邮件&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="发送带附件的邮件"><a href="#发送带附件的邮件" class="headerlink" title="发送带附件的邮件"></a>发送带附件的邮件</h3><p>发送带附件的邮件，首先要创建MIMEMultipart()实例，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp发送。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br> <br>sender = <span class="hljs-string">&#x27;from@runoob.com&#x27;</span><br>receivers = [<span class="hljs-string">&#x27;429240967@qq.com&#x27;</span>]  <span class="hljs-comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span><br> <br><span class="hljs-comment">#创建一个带附件的实例</span><br>message = MIMEMultipart()<br>message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;To&#x27;</span>] =  Header(<span class="hljs-string">&quot;测试&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>subject = <span class="hljs-string">&#x27;Python SMTP 邮件测试&#x27;</span><br>message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br><span class="hljs-comment">#邮件正文内容</span><br>message.attach(MIMEText(<span class="hljs-string">&#x27;这是菜鸟教程Python 邮件发送测试……&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br> <br><span class="hljs-comment"># 构造附件1，传送当前目录下的 test.txt 文件</span><br>att1 = MIMEText(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read(), <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>att1[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&#x27;application/octet-stream&#x27;</span><br><span class="hljs-comment"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span><br>att1[<span class="hljs-string">&quot;Content-Disposition&quot;</span>] = <span class="hljs-string">&#x27;attachment; filename=&quot;test.txt&quot;&#x27;</span><br>message.attach(att1)<br> <br><span class="hljs-comment"># 构造附件2，传送当前目录下的 runoob.txt 文件</span><br>att2 = MIMEText(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;runoob.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read(), <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>att2[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&#x27;application/octet-stream&#x27;</span><br>att2[<span class="hljs-string">&quot;Content-Disposition&quot;</span>] = <span class="hljs-string">&#x27;attachment; filename=&quot;runoob.txt&quot;&#x27;</span><br>message.attach(att2)<br> <br><span class="hljs-keyword">try</span>:<br>    smtpObj = smtplib.SMTP(<span class="hljs-string">&#x27;localhost&#x27;</span>)<br>    smtpObj.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;邮件发送成功&quot;</span>)<br><span class="hljs-keyword">except</span> smtplib.SMTPException:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Error: 无法发送邮件&quot;</span>)<br></code></pre></td></tr></table></figure><p>更多内容详见 <a href="https://www.runoob.com/python3/python3-smtp.html">https://www.runoob.com/python3/python3-smtp.html</a></p><h2 id="Simpel-AI-samples"><a href="#Simpel-AI-samples" class="headerlink" title="Simpel AI samples"></a>Simpel AI samples</h2><h3 id="Introduction-to-Artificial-Intelligence"><a href="#Introduction-to-Artificial-Intelligence" class="headerlink" title="Introduction to Artificial Intelligence"></a>Introduction to Artificial Intelligence</h3><h4 id="人工智能之父"><a href="#人工智能之父" class="headerlink" title="人工智能之父"></a>人工智能之父</h4><p>“让机器像人类一样思考”最早是由英国数学家艾伦·图灵于1950年发表的《计算机与智能》中提出。因此，图灵被称为计算机科学与人工智能之父。(图灵被印刷在50面额的英镑中)判断一个机器是否具有智能，可以使用图灵测试。<br><img src="/../img/2023-02-20-00-22-30.png"></p><h4 id="图灵测试——模仿游戏"><a href="#图灵测试——模仿游戏" class="headerlink" title="图灵测试——模仿游戏"></a>图灵测试——模仿游戏</h4><p>图灵提出，要测试一个机器是否具有智能，只需要看它是否能成为一个“人类模仿大师”。测试具有聊天功能的机器人是否“智能”，我们可以让它模仿人类的说话习惯，然后与不同的测试人员聊天。<br>判断结果：若在规定的时间内，大部分测试人员没有意识到与他聊天的是机器人，那我们就认为该机器人是“人类聊天模仿大师”，即它是具有智能的。</p><p>图灵的想法引起多位学者的重视，开启了探讨人工智能的热潮。基于设定好的条件规则，能够进行自动判断的程序问世，从而搭建了问题处理系统。专家系统就是其中之一，它被认为是最早期的“人工智能”。</p><h4 id="专家系统-Expert-system"><a href="#专家系统-Expert-system" class="headerlink" title="专家系统 Expert system"></a>专家系统 Expert system</h4><p>定义：将某个领域专家水平的知识作为数据存储起来形成“知识库”，并把其经验设定为规则条件，就构成了一个能够自动解决该领域问题的程序。该程序称为专家系统。<br>简单来说，早期的“人工智能”程序由大量的字典等内容组成数据储备，并用固定数量的条件规则作为逻辑。机器在遇到问题时，通过规则从数据中查找答案。<strong>因为所有的规则都由人工录入，所以机器并没有真的“思考”。</strong><br>为此，美国哲学家约翰·希尔勒提出了“中文房间”的实验。</p><h4 id="中文房间"><a href="#中文房间" class="headerlink" title="中文房间"></a>中文房间</h4><p>对于一个英语母语者来说，若为他提供<em>足够的翻译书籍工具与查阅这些资料的时间</em>，他就能够正常的通过文字与中文使用者交流。但实际上我们认为他并没有学会中文，因为他无法处理数据以外的内容。</p><h4 id="图灵的遗憾"><a href="#图灵的遗憾" class="headerlink" title="图灵的遗憾"></a>图灵的遗憾</h4><p>人们认识到，要想实现真正的人工智能，除了读取固有的数据以外，还需要让电脑对未知的数据进行预测。但限于当时计算机硬件的发展，直到图灵去世都未有一台机器通过图灵测试。<br>时间回到现在，随着计算机硬件大幅度升级，电脑的存储区域呈爆炸性增长。人们提出了以统计学等数学方法为基础的新“人工智能” —— 机器学习。</p><h4 id="机器学习-Machine-Learning"><a href="#机器学习-Machine-Learning" class="headerlink" title="机器学习 Machine Learning"></a>机器学习 Machine Learning</h4><p>定义：机器学习是一门多领域交叉学科。主要通过概率论、统计学等数学方法，让机器从已知数据中模拟或实现人类的学习行为，找出规律并自动生成规则，然后对未知的数据进行预测。这就是机器学习的过程。<br>机器学习是实现人工智能的一种方法，是使计算机具有智能的根本途径。相较于直接使用数据储备，机器学习的目的是<strong>从已有的数据中挖掘规则，从而实现对未知的数据进行“预测”</strong>。<br>机器学习中存在的算法：线性回归、K近邻、朴素贝叶斯、决策树、逻辑回归、聚类算法、支持向量机、EM算法。</p><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>要实现从评价中提取高频关键词，并判别其正负面性，其实是通过人工智能领域中的一个分支：自然语言处理。</p><h4 id="自然语言处理-Natural-Language-Processing（NLP）"><a href="#自然语言处理-Natural-Language-Processing（NLP）" class="headerlink" title="自然语言处理 Natural Language Processing（NLP）"></a>自然语言处理 Natural Language Processing（NLP）</h4><p>自然语言，即人们日常使用的语言，也就是每天包围着我们的文本信息和语音信息。自然语言处理（Natural Language Processing，简称NLP）研究的是如何通过机器学习等技术，让计算机学会处理自然（人类）语言，以完成有意义的任务。它是一门交叉学科，涉及计算机科学、语言学、数学等多个领域的专业知识。<br><img src="/../img/2023-02-20-00-33-52.png"></p><h4 id="相关案例"><a href="#相关案例" class="headerlink" title="相关案例"></a>相关案例</h4><ol><li><p>邮件过滤：<br>系统会根据电子邮件的内容识别电子邮件是否属于三个类别（重要、社交或广告）之一，或者判断一封邮件是否是垃圾邮件。<br>此时就是通过NLP来对这些邮件进行一系列的分类。</p></li><li><p>搜索引擎，如百度、谷歌等。<br>在我们输入2-3个字后，搜索引擎会显示可能的搜索词。或者如果输入了错别字，搜索引擎会自动进行更正。这就是通过NLP技术来实现的搜索自动完成和自动更正功能，帮助我们更有效地找到准确的结果。</p></li><li><p>机器翻译，比如Google、有道翻译。<br>目前所追求的翻译，不再仅仅是通过计算机直接将一种语言转换为另一种语言，而是需要像人类一样能够理解世界知识和上下文。要让电脑像人类一样理解自然语言，必然离不开NLP技术。</p></li><li><p>语音助理，比如Siri、智能音箱等。<br>现在的语音助理，与人类之间的交流不再是简单的你问我答，不少语音助手甚至能和人类进行深度交谈。同样在这背后离不开NLP技术，使得语音助理能够将人类语言转换为机器语言，然后执行相应的操作。<br><img src="/../img/2023-02-20-00-37-14.png"></p></li></ol><h4 id="自然语言处理的意义和难点"><a href="#自然语言处理的意义和难点" class="headerlink" title="自然语言处理的意义和难点"></a>自然语言处理的意义和难点</h4><p>在面对自然语言时，除了单纯地阅读和倾听外，往往会进行更多复杂的操作和处理。但人工处理的代价过于高昂，因此会期望训练计算机来代替人类，这就是自然语言处理的意义。<br>然而，自然语言并没有想象中那么容易处理。与人工语言（编程语言或数学语言等）相比，自然语言有着<strong>多变、非结构化</strong>等各种特殊和复杂的特点。<br>例如：编程语言中的关键词数量是固定的，而自然语言中能使用的词汇量是无限的，甚至还在不断创造新词；编程语言具有结构性，如类和对象，但显然自然语言不具有这样的结构。<br>在自然语言中，不同的语境、句法和语义也会传达出不同的信息。比如，“<em>我瞒着妈妈和姐姐出去玩了</em>”这句话，如果没有指明「和」这个字的词性，就可以被理解为两种意思。</p><ul><li><code>我瞒着</code> <code>妈妈和姐姐</code> <code>出去玩了</code></li><li><code>我瞒着妈妈</code> <code>和姐姐出去玩了</code></li></ul><p>广义上来讲任何处理自然语言的计算机操作都可以被理解为NLP。它可以实现一些简单的功能，比如短语之间的翻译。同时，NLP也致力于完成一些具有挑战性的任务，比如完全 <em><strong>“理解”</strong></em> 人类话语。</p><h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><p>一篇文本是由无数句话组成，而一句话又是由一个个词语组成，因此可以将<strong>词语</strong>看作是自然语言的基本单位。那么在进行NLP时，就需要先将句子中的词语分开。<br>对于英文，只需要按照空格和标点符号就可以将词语分开。但在中文文本里，所有的字都连在一起，计算机并不知道一个字应该与其前后的字连成词语，还是应该自己形成一个词语。因此，需要借助额外的工具将中文文本中的词语分隔开。这项技术被称为中文的<strong>分词</strong>。<br>分词完成后，就可以根据这些词语找到属于这个文本的特点，也就是常说的<strong>特征（feature）</strong>。对于文本而言，词语出现的频率就可以作为一项特征。那么，词频这个特征就能帮我们提取出关键词。在进行NLP时，构造<strong>词袋模型（Bag-of-Words Model）</strong>是一种常用的用于统计词频的技术。</p><h4 id="词袋模型-Bag-of-Words-Model"><a href="#词袋模型-Bag-of-Words-Model" class="headerlink" title="词袋模型 Bag-of-Words Model"></a>词袋模型 Bag-of-Words Model</h4><p>定义：词袋模型是一个描述文本的模型，用于统计每个词在文本中出现的次数。该模型只记录每个词语出现的次数，而忽略语法细节和词语之间的顺序。<br>例如，对于这条评价：<code>满意物流，也满意屏幕大小</code>在构建词袋模型前，需要先进行分词。这条评价按照一定方法分隔后，就变成了：<code>满意 / 物流 / 也 / 满意 / 屏幕 / 大小</code><br>分隔后，词袋模型会统计每个词在文本中出现的次数：<code>满意:2，物流:1，也:1，屏幕:1，大小:1</code><br><img src="/../img/2023-02-20-00-53-25.png"><br>可以看到，通过词袋模型生成的结果，词的顺序和语法都被忽略了，变成了一些词语间的组合，但又在一定程度上保留了主题信息。<strong>将复杂的词句结构降维成体现主题的词语计数，以便计算机进行后续的处理</strong>，这就是词袋模型的基本思想。</p><hr><div class="row">    <embed src="/pdf/Python编程：从入门到实践.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>大学学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>大学</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【程序设计与思想Cpp】课本知识点整理</title>
    <link href="/2023/01/11/cppLearn/"/>
    <url>/2023/01/11/cppLearn/</url>
    
    <content type="html"><![CDATA[<h1 id="C-程序设计——思想与办法"><a href="#C-程序设计——思想与办法" class="headerlink" title="C++程序设计——思想与办法"></a>C++程序设计——思想与办法</h1><p>Tips:<code>标注书页均为《C++程序设计思想与方法（慕课版第3版）》</code></p><hr><p>上来就是第8章 <del>这是为什么呢</del></p><hr><h1 id="第8章-数据封装——结构体"><a href="#第8章-数据封装——结构体" class="headerlink" title="第8章 数据封装——结构体"></a>第8章 数据封装——结构体</h1><p><strong>记录</strong>是一组无序的、异质的数据，在C++语言中被称为<strong>结构体</strong>。</p><h2 id="8-1记录的概念-P186"><a href="#8-1记录的概念-P186" class="headerlink" title="8.1记录的概念 P186"></a>8.1记录的概念 P186</h2><p>记录的组成部分通常被称作字段，或者被称为成员。</p><h2 id="8-2记录的使用-P187"><a href="#8-2记录的使用-P187" class="headerlink" title="8.2记录的使用 P187"></a>8.2记录的使用 P187</h2><p>在C++中记录需要进行如下两个步骤:</p><ol><li>定义一个新的结构体类型。这指明了其变量是由哪些字段组成的</li><li>定义结构体类型的变量。完成了结构体的定义后，可以定义该类型的变量，编译器会参照相应的结构体类型定义分配相应的空间。</li></ol><p><strong>这两步是必不可少的。</strong></p><h3 id="结构体类型的定义"><a href="#结构体类型的定义" class="headerlink" title="结构体类型的定义"></a>结构体类型的定义</h3><p>格式如下。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> 结构体类型名&#123;<br>    字段声明；<br>&#125;；<br></code></pre></td></tr></table></figure><p>在定义结构体类型时，字段名可以与程序中的变量名相同。在不同的结构体中也可以有相同的字段名。<br>结构体成员的类型可以是任意类型。可以是整数、实型，也可以是数组，甚至是<strong>其他结构体类型</strong>。</p><h3 id="结构体类型的变量的定义"><a href="#结构体类型的变量的定义" class="headerlink" title="结构体类型的变量的定义"></a>结构体类型的变量的定义</h3><ul><li>例如，已经有了studentT这个类型，就可以通过下列代码定义该类型的变量、数组或指针。<code>studentT student1, studentArray[10], *sp</code><br><code>studentArray</code>是具有10个 <code>studentT</code>类型的值的数组。<br><code>sp</code>是一个指向 <code>studentT</code>类型的指针,它可以指向 <code>student1</code>，可以指向studentArray中的某个元素。</li><li>结构体类型变量也可以在定义结构体类型的同时定义，格式如下。</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> 结构体类型名&#123;<br>    字段声明；<br>&#125;   结构体变量；<br></code></pre></td></tr></table></figure><ul><li>定义结构体类型变量时也可以为它赋初值。c++用一对花括号将这一组值括起来，表示成一个整体，值与值之间用逗号分开。例如：<br><code>studentT student = &#123; &quot;00001&quot;,&quot;Elysia&quot;,100,90,80 &#125;</code></li></ul><h3 id="结构体类型的变量的使用"><a href="#结构体类型的变量的使用" class="headerlink" title="结构体类型的变量的使用"></a>结构体类型的变量的使用</h3><p>要表示结构体类型的变量中的某一变量，需要写下整个结构体类型的变量名称，后面跟运算符 <code>.</code>及该字段的名称。结构体中的字段可以单独使用，它相当于普通变量。若结构体类型的变量成员还是一个结构体，则可使用 <code>.</code>一级一级分开，逐级访问。</p><ul><li>结构体类型的变量输入通常是通过输入它的每一个成员来实现。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cin &gt;&gt; student1<span class="hljs-selector-class">.no</span> &gt;&gt; student1<span class="hljs-selector-class">.name</span> <br>    &gt;&gt; student1<span class="hljs-selector-class">.score</span><span class="hljs-selector-class">.chinese</span> <br>    &gt;&gt; student1<span class="hljs-selector-class">.score</span>.english<br></code></pre></td></tr></table></figure><ul><li>也可以通过对每一个字段赋值来实现结构体的赋值，如 <code>student1.score.english = 145</code></li><li>当两个结构体变量属于不同结构体类型时，就可以互相赋值，这说明结构体是左值。<br><em>注：数组不是左值。</em></li><li>指针也可以通过指针间接访问。指向结构体的指针可以指向同一个类型的结构体变量，也可以指向一个通过动态内存申请到的一块用于储存同类型的结构体的空间。</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">studentT student1, *sp = &amp;student1;<br>sp = <span class="hljs-keyword">new</span> <span class="hljs-type">studentT</span>;<br></code></pre></td></tr></table></figure><ul><li>要引用sp指向的结构体对象的某个字段，可以表示为 <code>(*sp).chinese</code>。<strong>注意，<code>()</code>是必要的，因为点运算符的优先级比 <code>*</code>高。如果不加括号，编译器会理解为 <code>sp.chinese</code>为一个指针，然后指向该指针指向的内容。</strong><br>但是这种方法过于笨拙，使用者在每一次选取的时候都会使用括号，故而C++提出了另外一个更加简明的运算符 <code>-&gt;</code>，用法如 <code>指针变量名-&gt;字段名</code>表示指针变量指向的结构体的制定字段。</li></ul><p><em>注：数组通常表示一组变量，而结构体通常表示的是一个变量。</em></p><h2 id="8-3结构体作为函数的参数"><a href="#8-3结构体作为函数的参数" class="headerlink" title="8.3结构体作为函数的参数"></a>8.3结构体作为函数的参数</h2><p>结构体的传递和普通内置传递一样都是值传递，由于结构体的特点，这种做法一般既浪费时间也浪费空间，因此常使用<strong>引用传递</strong>。<br>使用引用传递时，由于形式参数和实际参数共享了同一块空间，为了避免对实际参数的修改，可以使用 <code>const</code>的引用传递。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//文件名：8-1.cpp</span><br><span class="hljs-comment">//对平面上点的操作的函数及应用</span><br><span class="hljs-keyword">struct</span> pointT&#123;<br>    double x,y;<br>&#125;;<br>void set<span class="hljs-constructor">Point(<span class="hljs-params">double</span> <span class="hljs-params">x</span>, <span class="hljs-params">double</span> <span class="hljs-params">y</span>, <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span>；<br>double get<span class="hljs-constructor">X(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span>；<br>double get<span class="hljs-constructor">Y(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span>；<br>void show<span class="hljs-constructor">Point(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span>；<br>double distance<span class="hljs-constructor">Point(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p1</span>, <span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p2</span>)</span>；<br><br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    pointT p1, p2;<br><br>    set<span class="hljs-constructor">Point(1,1,<span class="hljs-params">p1</span>)</span>;<br>    set<span class="hljs-constructor">Point(2,2,<span class="hljs-params">p2</span>)</span>;<br><br>    cout &lt;&lt; get<span class="hljs-constructor">X(<span class="hljs-params">p1</span>)</span> &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; get<span class="hljs-constructor">Y(<span class="hljs-params">p2</span>)</span> &lt;&lt; endl; <br>    show<span class="hljs-constructor">Point(<span class="hljs-params">p1</span>)</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> ;<br>    show<span class="hljs-constructor">Point(<span class="hljs-params">p2</span>)</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; distance<span class="hljs-constructor">Point(<span class="hljs-params">p1</span>, <span class="hljs-params">p2</span>)</span> &lt;&lt; endl;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br>void set<span class="hljs-constructor">Point(<span class="hljs-params">double</span> <span class="hljs-params">x</span>, <span class="hljs-params">double</span> <span class="hljs-params">y</span>, <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span><br>&#123;   <br>    p.x = x;<br>    p.y = y;<br>&#125;<br><br>double get<span class="hljs-constructor">X(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span><br>&#123;    return (p.x);   &#125;<br><br>double get<span class="hljs-constructor">Y(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span><br>&#123;    return (p.y);   &#125;<br><br>void show<span class="hljs-constructor">Point(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p</span>)</span><br>&#123;    cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p.x &lt;&lt; <span class="hljs-string">&quot; , &quot;</span> &lt;&lt; p.y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span>;   &#125;<br><br>double distance<span class="hljs-constructor">Point(<span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p1</span>, <span class="hljs-params">const</span> <span class="hljs-params">pointT</span> &amp;<span class="hljs-params">p2</span>)</span><br>&#123;    return sqrt((p1.x-p2.x)*(p1.x-p2.x) + (p1.y-p2.y)<span class="hljs-operator"> * </span>(p1.y-p2.y));   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-4链表-P192"><a href="#8-4链表-P192" class="headerlink" title="8.4链表 P192"></a>8.4链表 P192</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>链表是一种可以动态的进行内存分配的结构。<br>变量head中存储着第一个元素结点的地址，head可以找到第一个结点，第一个可以找到第二个……一直到最后一个结点。最后一个结点的第二部分存放一个空指针。</p><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><p>形式多样。除了单链表外，还有双链表、循环链表等。数据结构中做进一步学习。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>在一个单链表中，每个数据元素被存储在一个结点中。存储一个单链表只需要存储第一个结点的地址，因此<strong>只需要定义一个指向结点的指针</strong>。<br>每个结点由两部分组成：数据元素本身和指向下一结点的指针。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">struct linkNode&#123;<br>    datatype data; <span class="hljs-regexp">//</span>任意一种数据类型<br>    lnkeNode *<span class="hljs-keyword">next</span>; <span class="hljs-regexp">//</span>指向自身类型的一个指针<br>&#125;;    <span class="hljs-regexp">//</span>注意在定义结构体时最后要有分号（；）<br></code></pre></td></tr></table></figure><p>定义 <code>linkNode *head</code>，<code>head</code>就表示了这个单链表。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="创建一个单链表"><a href="#创建一个单链表" class="headerlink" title="创建一个单链表"></a>创建一个单链表</h5><p>包括以下步骤：定义一个单链表创建一个空的单链表，依次从键盘读入数据，链入单链表的表尾。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>文件名：<span class="hljs-number">8</span>-<span class="hljs-number">2</span>.cpp<br><span class="hljs-regexp">//</span>单链表的建立与访问<br><span class="hljs-comment">#include &lt;iostream&gt;</span><br>using namespace std;<br> <br>struct  linkRec &#123;<br>    int  data;  <br>    linkRec *<span class="hljs-keyword">next</span>;<br>&#125;;<br> <br>int main()<br>&#123; <br>    int x;                     <span class="hljs-regexp">//</span>存放输入的值<br>    linkRec *head, *p, *rear;<span class="hljs-regexp">//</span>head为表的头指针，rear指向创建链表时的表尾结点,<br><span class="hljs-regexp">//</span>p是创建和读链表时指向被操作结点的指针<br>  <br>    head = rear = new linkRec;<span class="hljs-regexp">//</span>创建空链表，头结点也是最后一个结点<br> <br>    <span class="hljs-regexp">//</span>创建链表的其他结点<br>    <span class="hljs-keyword">while</span> (true) &#123;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        p = new linkRec;<span class="hljs-regexp">//</span>申请一个结点<br>        p-&gt;data = x;<span class="hljs-regexp">//</span>将x的值存入新结点<br>        rear-&gt;<span class="hljs-keyword">next</span> = p;<span class="hljs-regexp">//</span>将p链到表尾<br>        rear = p;<span class="hljs-regexp">//</span>p作为新的表尾<br>    &#125;<br> <br>    rear-&gt;<span class="hljs-keyword">next</span> = NULL;<span class="hljs-regexp">//</span>设置rear为表尾，其后没有结点了<br> <br>    <span class="hljs-regexp">//</span>读链表<br>    cout &lt;&lt; <span class="hljs-string">&quot;链表的内容为：\n&quot;</span>;<br>    p = head-&gt;<span class="hljs-keyword">next</span>;            <span class="hljs-regexp">//</span>p指向第一个结点<br>    <span class="hljs-keyword">while</span> (p != NULL) &#123;<br>        cout &lt;&lt; p-&gt;data &lt;&lt; <span class="hljs-string">&#x27;\t&#x27;</span>;<br>        p = p-&gt;<span class="hljs-keyword">next</span>;<span class="hljs-regexp">//</span>使p指向下一个结点<br>    &#125;<br>    cout &lt;&lt; endl;<br> <br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">tmp = new ListNode; <span class="hljs-comment">//创建一个新结点</span><br><span class="hljs-function"><span class="hljs-title">tmp</span> -&gt;</span> <span class="hljs-keyword">data</span> = x; <span class="hljs-comment">//把x放入新结点的数据成员中</span><br><span class="hljs-function"><span class="hljs-title">tmp</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = p -&gt;</span> next; <span class="hljs-comment">//把新结点和p的下一结点相连</span><br><span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> next = tmp; <span class="hljs-comment">//把p和新结点连接起来</span><br><br><span class="hljs-comment">// 注意第三、四句不可以互换，这样会导致p后面的节点丢失</span><br></code></pre></td></tr></table></figure><h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><p>可以直接 <code>p-&gt;next = p -&gt;next -&gt;nxet</code>，来删除，但这会导致内存泄露，没有回收被删除节结点的空间。<br>完整的删除应该有两个工作：从链表中删去该结点，回收结点的空间，如下例。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">delPtr = p -&gt; <span class="hljs-keyword">next</span>; <span class="hljs-regexp">//</span>保存被删除结点的地址<br>p-&gt; <span class="hljs-keyword">next</span> = delPtr -&gt; <span class="hljs-keyword">next</span> ; <span class="hljs-regexp">//</span>将此结点从链中删去<br><span class="hljs-keyword">delete</span> delPtr ; <span class="hljs-regexp">//</span>回收被删除结点的空间<br></code></pre></td></tr></table></figure><h2 id="8-5编程规范及常见错误"><a href="#8-5编程规范及常见错误" class="headerlink" title="8.5编程规范及常见错误"></a>8.5编程规范及常见错误</h2><ul><li>结构体是C++的一个类。定义时最好指定名字，便于程序的其他地方也可以定义该类型的变量</li><li>结构体类型定义时在最后的 <code>&#125;</code>后要加一个分号</li><li>结构体类型一旦被定义，就可以将其当做变量使用</li><li>结构体变量可以作为函数的参数，传递方式为值传递。但是结构体采取值传递既浪费时间又浪费空间，故而一般采用引用传递。为了防止引用传递修改了实际参数，可以用 <code>const</code>限定形式参数。</li></ul><h1 id="第10章-创建新的类型"><a href="#第10章-创建新的类型" class="headerlink" title="第10章 创建新的类型"></a>第10章 创建新的类型</h1><h2 id="10-1面向对象程序设计"><a href="#10-1面向对象程序设计" class="headerlink" title="10.1面向对象程序设计"></a>10.1面向对象程序设计</h2><pre><code class="hljs">略</code></pre><h2 id="10-2类的定义-P224"><a href="#10-2类的定义-P224" class="headerlink" title="10.2类的定义 P224"></a>10.2类的定义 P224</h2><p>定义一个类就是定义一组属性和一组对属性进行操作的函数。属性称为类型的<strong>数据成员</strong>，而函数称为类的<strong>成员函数</strong>。类定义的一般形式如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span>&#123;<br><br><span class="hljs-keyword">private</span>：<br><br>    私有数据成员和成员函数；<br><br><span class="hljs-keyword">public</span>：<br><br>    公有数据成员和成员函数；<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>私有成员只能被自己类中的成员函数访问，不能被全局函数或其他类的成员函数访问。这些成员被封装在类的内部，不为外界所知。公有成员能通过 <code>变量名.成员名</code>被程序中其他类的成员函数访问，它是类的对外接口。</p><p>利用private可以封装类型的实现细节。封装是将低层次的元素组合起来形成新的、高层次实体的技术。函数就是封装的一种形式。函数所执行的细节封装在函数本身这个更大的实体中。被封装的元素隐藏了他们的实现细节。类也是封装的一种形式，通常将数据的存储和处理的细节隐藏起来。结构体和类都可以用来定义新的类型，格式也完全相同，唯一区别在于：<strong>结构体中，如果没有指明访问特性，则成员是公有的；在类的定义中，默认情况下，成员是私有的</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>代码清单<span class="hljs-number">10</span><span class="hljs-number">-7</span>　用<span class="hljs-keyword">class</span>定义的DoubleArray类型<br><br><span class="hljs-comment">// 文件名：DoubleArray.h</span><br><br><span class="hljs-comment">// DoubleArray类的定义</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleArray</span>&#123;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-type">int</span> low;  <br><br>    <span class="hljs-type">int</span> high;<br><br>    <span class="hljs-type">double</span> *storage;<br><br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">//根据low和high为数组分配空间。分配成功，返回值为true，否则返回值为false</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-type">int</span> lh, <span class="hljs-type">int</span> rh)</span></span>;<br><br><br>    <span class="hljs-comment">//设置数组元素的值</span><br><br>    <span class="hljs-comment">//返回值为true表示操作正常，返回值为false表示下标越界</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">double</span> value)</span></span>;<br><br><br>    <span class="hljs-comment">//取数组元素的值</span><br><br>    <span class="hljs-comment">//返回值为true表示操作正常，返回值为false表示下标越界</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">fatch</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">double</span> &amp;value)</span></span>;<br><br><br>    <span class="hljs-comment">//回收数组空间</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanup</span><span class="hljs-params">()</span></span>;<br><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>完善类的定义还必须包括所有成员函数的实现。成员函数的实现通常有两种实现表示方法。</p><ol><li>在类的定义时只给出函数原型，而函数的定义时写在一个实现文件（.cpp）中；</li><li>将成员函数的定义直接写在类定义中。<strong>直接定义在类中的函数默认为内联函数</strong>。因此，直接定义在类中的函数都是比较简单的函数。当然，内联函数也可以直接写在实现文件中，用保留字 <code>inline</code>说明。</li></ol><p><em>良好的程序设计习惯是将类定义和成员函数的实现分开，这样可以更好的达到实现隐藏的目的。</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>代码清单<span class="hljs-number">10</span><span class="hljs-number">-8</span>　将成员函数定义为内联函数<br><br><span class="hljs-comment">//文件名：10-8.h</span><br><br><span class="hljs-comment">//将成员函数定义为内联函数</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>¬_DoubleArray</span><br><br>#define_DoubleArray<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleArray</span>&#123;<br><br><span class="hljs-keyword">private</span>:<br><br>    <span class="hljs-type">int</span> low;  <br><br>    <span class="hljs-type">int</span> high;<br><br>    <span class="hljs-type">double</span> *storage;<br><br><br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">//根据low和high为数组分配空间。分配成功，返回值为true，否则返回值为false</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-type">int</span> lh, <span class="hljs-type">int</span> rh)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    </span>&#123;<br><br>       low = lh;<br><br>       high = rh;<br><br>       storage = <span class="hljs-keyword">new</span> <span class="hljs-type">double</span> [high - low + <span class="hljs-number">1</span>];<br><br>       <span class="hljs-keyword">if</span> (storage == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">//设置数组元素的值</span><br><br>    <span class="hljs-comment">//返回值为true表示操作正常，返回值为false表示下标越界</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">double</span> value)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (index &lt; low || index &gt; high) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        storage[index - low] = value;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//取数组元素的值</span><br><br>    <span class="hljs-comment">//返回值为true表示操作正常，返回值为false表示下标越界</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">fatch</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">double</span> &amp;value)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    </span>&#123;<br><br>       <span class="hljs-keyword">if</span> (index &lt; low || index &gt; high) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>       value = storage[index - low] ;<br><br><br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//回收数组空间</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    </span>&#123;  <span class="hljs-keyword">if</span> (storage) <span class="hljs-keyword">delete</span> [] storage;   &#125;<br><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>有些类内部的函数不需要用户调用，这类函数被称为<strong>工具函数</strong>。工具函数通常设计为 <code>private</code>的。</p><h2 id="10-3对象的使用-P228"><a href="#10-3对象的使用-P228" class="headerlink" title="10.3对象的使用 P228"></a>10.3对象的使用 P228</h2><h3 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h3><p>一旦定义了一个类，就可以定义这种类型的变量了。在面向对象的程序设计中，这类变量称为<strong>对象</strong>。对象有两种定义方法：</p><h4 id="1-在程序中直接定义类型为某个类的对象"><a href="#1-在程序中直接定义类型为某个类的对象" class="headerlink" title="1. 在程序中直接定义类型为某个类的对象"></a>1. 在程序中直接定义类型为某个类的对象</h4><p>格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>储存类别 类名 对象列表<br><br></code></pre></td></tr></table></figure><p>例如定义一个静态的 <code>Rational</code>类的对象 <code>r1</code>,可写成：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><br><span class="hljs-keyword">static</span> Rational r1<br><br></code></pre></td></tr></table></figure><h4 id="2-动态对象"><a href="#2-动态对象" class="headerlink" title="2. 动态对象"></a>2. 动态对象</h4><p>要定义一个动态对象必须要有指向对象的指针，然后 <code>new</code>申请一块储存对象的空间，通过 <code>delete</code>释放动态对象占用的空间。例如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br>Rational *rp<span class="hljs-comment">;</span><br><br><span class="hljs-attribute">rp</span> <span class="hljs-operator">=</span> nwe Rational<span class="hljs-comment">;</span><br><br>delete [] rp<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><h3 id="对象的操作"><a href="#对象的操作" class="headerlink" title="对象的操作"></a>对象的操作</h3><p>结构体中默认所有的成员都是公有的，因此都可以用 <code>结构体变量名.成员名</code>来访问，但是在类的对象中，全局函数或其他类的成员函数只能访问公有成员而不能访问私有成员，因此只有公有的成员才能用点运算符 <code>对象名.数据 成员名</code>来访问。</p><p>与结构体类型的变量一样，除了能用对象名访问对象外，还可以用指向对象的指针访问对象。此事可以用 <code>-&gt;</code>运算符；同类对象也可以相互赋值，当把一个对象赋值给另一个对象时，所有的数据成员都会逐位复制。</p><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>一个对象包括数据成员和成员函数。成员函数操作的数据就是本对象的数据成员。由于所有该类对象中的成员函数的代码是完全相同的，C++采取了一个优化手段：无论创建了多少这种类型的对象，成员函数在内存中只有一个副本。所有对象共享这一个副本。</p><p>定义一个对象时，系统只知道为数据层成员分配空间，而C++为成员函数设置了一个隐藏的真相本类型的指针形式参数 <code>this</code>，它指向当前调用成员函数的对象。成员函数中对对象成员的访问是通过this指针实现的。 当通过对象调用成员函数时，编译器会把相应对象的地址传给形参 <code>this</code>。</p><p><em>通常，编译器会自动加上 <code>this</code>，但是如果在成员函数中要把对象作为整体来访问时，必须显式地使用 <code>this</code>指针，即 <code>*this</code>。这种情况在函数中返回一个调用函数的对象的引用时时常出现，11.3节中将给出用法。</em></p><h2 id="10-4对象的构造与析构-P231"><a href="#10-4对象的构造与析构-P231" class="headerlink" title="10.4对象的构造与析构 P231"></a>10.4对象的构造与析构 P231</h2>]]></content>
    
    
    <categories>
      
      <category>大学学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>大学</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>军事理论考点整理</title>
    <link href="/2023/01/07/military_theory/"/>
    <url>/2023/01/07/military_theory/</url>
    
    <content type="html"><![CDATA[<p>1、国防的目的:捍卫国家的主权统一和领土安全</p><p>2、主权是一个国家的最高权利和尊严。是一个国家存在的标志</p><p>3、领土由: 领陆、领海和领空组成。我国陆地面积居世界第三同时陆地上与我国相接的有14个国家。</p><p>4、现代国防的基本类型: 扩张型 (美国) ;自卫型 (中国) ; 联盟型 (美日，北约) ; 中立型 (瑞士)</p><p>5、现代国防的基本特征:职能的双重性;对抗的整体性;目标的层次性 (自卫、区域和全球): 手段的灵活性。</p><p>6、全国人民表大会的国防职权: 决定战争与和平问题</p><p>7、国家主席在国防方面的职权: 宣布战争状态:发布动员令</p><p>8、我国《宪法》规定，武装力量的最高领导机关: 中央军委</p><p>9、我国《宪法》规定，中央军委实行:军委主席负责制。</p><p>10、我军战区的职能是:负责联合作战指挥 (战略方向作战指挥最高机关)。东部、南部、西部、北部和中部战区五大战区</p><p>11、我国“三位一体”战略核力量是:火箭军;海军潜地战略导弹部队;空军远程战略轰炸机部队。</p><p>12、中国解放军海军的三大舰队是:北海舰队、东海舰队和南海舰队。</p><p>我国武装力量的组成由: 中国人民解放军现役部队和预备役13部队、中国人民武装警察部队和民兵组成。</p><p>14、陆军是中国人民解放军的核心力量，目前陆军机动作战部队(即集团军共13个，分布在五大战区)</p><p>15、中国人民解放军现役部队由: 陆军、海军、空军、火箭军战略支援部队和联勤保障部队组成。</p><p>16、战略支援部队是:我军新型作战力量。其组成:航天部队，情报、技术侦察部队，网络攻防部队，电子对抗部队，心理战部队。17、中国人民武装警察部队由: 内卫总队，机动总队，海警总队组成</p><p>18、中国人民武装警察部队职能是:<br>(1)维护社会稳定和治安(2) 海上维权执法; (3) 反恐 (4) 防作战</p><p>19、2015年进行了新一轮军队和国防改革，在部队领导管理上形成了:军委一军种一部队的领导管理体制;在联合作战指挥体制上构建了:军委一战区一部队的作战指挥体系</p><p>20、我国法律主要是从动员规模这一角度，将国防动员分为:总动员和局部动员。</p><p>21、2011年修订的《兵役法》规定: 实行义务兵与志愿兵相结合，民兵与预备役相结合的兵役制度。义务兵服现役的期限是: 2年。</p><p>22、我国《兵役法》规定: 男性公民征集年龄为18-22周岁。高校毕业生征集年龄可放宽到24周岁。</p><p>23、公民履行兵役义务的形式: 服现役;服预备役;参加民兵组织;普通高等学校的学生参加军事技能训练。</p><p>24、总体国家安全观的提出: 国家主席习近平在2014年4月15日中央国家安全委员会第一次会议上提出。</p><p>25、总体国家安全观中最核心和最高层次的安全是: 政治安全</p><p>26、总体国家安全观的五大要素:人民安全为宗旨;政治安全为根本;经济安全为基础;军事、文化和社会安全为保障;国际安全为依托。</p><p>27、总体国家安全观中非传统安全包括:<br>社会安全，文化安全科技安全，信息安全等。</p><p>28、《联合国海洋法公约》规定: 沿海国家拥有12海里 (行使主权)和200海里专属经济区 (行使海洋权益)。我国1996年加入《联合国海洋法公约》</p><p>29、与我国既是陆地邻国，又是海上邻国的是: 朝鲜;越南</p><p>30、目前在陆地上与我国边境线争议最大的国家:印度。</p><p>31、从对外政策看，对我国安全构成威胁最大的是: 美国.</p><p>32、新兴领域的国家安全: 深海安全，网络安全;极地安全;太空安全</p><p>33、目前在海洋上与我国既有海洋主权又有海洋权益争议的国家是日本。</p><p>34、美国武装力量由: 现役部队、预备役部队和军内文职人员组成其特点是:文官控制部队，行政领导与作战分离。</p><p>35、俄罗斯武装力量由: 现役部队、预备役部队和准军事部队组成其兵役制是:义务兵役制和合同兵役制相结合.</p><p>36、军事思想研究的内容:军事哲学 (战争观、认识论和方法论)军事实践的基本方针和原则 (战争指导、军队和国防建设的方针和原则)</p><p>37、军事思想特征是: 阶级性，时代性;继承性;实践性。</p><p>38、外国军事思想:主要是指资产阶级的军事思想。其代表人物主要观点(拿破仑的思想 (4个重视) ;马汉-海军制胜论;杜黑-制空权;富勒-机械化战争理论;克劳塞维茨提出:“战争无非是政治通过另外一种手段的继续“的论断。</p><p>39、《孙子兵法》久盛不衰理由: 哲理性;适应性;借鉴性</p><p>40、《孙子兵法》: 强调进攻速胜，反对持久作战。</p><p>41、我国第一部军事丛书:《武经七书》。</p><p>42、毛泽东人民战争的战略战术思想的基本作战方针是: 歼灭战</p><p>43、人民军队政治工作“三大原则”: 官兵一致，军民一致，瓦解敌军</p><p>44、人民军队任务: 战斗队 ; 工作队，生产队</p><p>45、人民战争属性:正义性; 群众性;组织性。</p><p>46、三种作战形式是: 游击战;: 运动战，阵地战。</p><p>47、抗日战争转入全面抗战的标志是:七七卢沟桥事件.</p><p>48、毛泽东战略思想的核心是: 积极防御</p><p>49、三大纪律、八项注意”是我军严格的纪律，其中“三大纪律的具体内容”是:</p><p>(1) 一切行动听指挥; (2) 不拿群众一针一线; (3) 、一切缴获要归公。</p><p>50、邓小平对战争与和平问题的新认识是:和平与发展是时代主题;当前世界大战可以避免;霸权主义是现代战争根源。</p><p>51、军队正规化建设的独特功能是:增强战斗力</p><p>52、新时期我军以现代化建设为中心。其体现在是 : 军事人才 (关键) ; 武器装备 (基础) ; 体制编制 (保障) ; 军事理论 (先导)</p><p>53、建设强大的现代化正规化革命军队。即“三化”建设。其政治灵魂是革命化;中心是现代化。</p><p>54、江泽民在国防和军队建设方面关注的重大课题是: 打得赢、不变质。</p><p>55、全民国防教育日: 每年9月份第三周周六。</p><p>56、江泽民强调，我军永远不变的军魂是:党对军队的绝对领导</p><p>57、积极推进中国特色军事变革的战略目标是:建信息化军队、打信息化战争</p><p>58、胡锦涛指出，完成多样化军事任务，必须不断提升核心军事能力其核心军事能力是: 打仗能力;威慑能力;实战能力。</p><p>59、习近平指出:党在新时代的强军目标是: 听党指挥，能打胜仗作风优良。</p><p>60、新一代“四有”革命军人是: 有灵魂，有本事，有血性;有品德61、习近平强调，深化国防和军队改革要在重点难点问题上进行突破其改革的重点难点是:领导指挥体制:优化结构;军队政策制度</p><p>62、做好军事斗争准备的根本标准是: 提高战斗力。</p><p>63、习近平要求部队做到“三个绝对”。即绝对忠诚;绝对纯洁;绝对可靠</p><p>64、战争观认为: 战争既有正义战争 (对人类社会发展起积极作用又有非正义战争 (对人类社会发展起消极作用)</p><p>65、战争的特点是: 社会性; 暴力性;对抗性;破坏性。</p><p>66、战争的本质，即战争是政治的继续。其含义是: 政治决定战争;政治支配战争;政治是目的，战争是手段，政治是全局，战争是局部。</p><p>67、无产阶级战争观认为研究和进行的最终目的是: 消灭战争68、无产阶级战争观将战争分为:正义战争和非正义战争</p><p>69、新军事革命的主要动因: 工业社会向信息社会的过渡</p><p>70、新军事革命的直接动力: 军事技术革命</p><p>71、新的作战样式:非对称作战，非接触作战</p><p>72、信息化战争构成的要素: 信息时代，信息化战场;信息化军队;信息化武器装备;信息战，制信息权。</p><p>73、信息化武器装备主要包括: 软杀伤武器(信息战装备) :硬杀伤武器 (信息化弹药) ; 新概念武器</p><p>74、信息战，也称为指挥控制战、决策控制战。就是综合运用军事欺骗、作战保密、心理战、电子战和对敌信息系统的实体摧毁、阻断敌方的信息流，并制造虚假信息，影响和消弱敌方指挥控制能力。其信息贯穿战争全过程。</p><p>75、信息化战争的战场空间是: 多维。作战指挥体系: 扁平化(即扁平形“网”状)。</p><p>76、用于实时为打击目标提供信息的是:<br>预警探测系统</p><p>77、航空侦察系统包括: 固定翼侦察飞机，侦察直升机;无人侦察飞机;动力三角翼飞行器等</p><p>78、情报侦察系统的类型:航天侦察系统 (不受国界和地理条件限制) ;航空侦察系统;海上及水下侦察系统;地面侦察系统。</p><p>79、水下侦察的主要装备是: 声呐。</p><p>80、信息化杀伤武器有: 精确制导武器，新概念武器，核生化武器。</p><p>81、既能在陆地、又能在海上和空中进行侦察的装备: 雷达。</p><p>82、信息化作战平台发展趋势: 无人化;多功能化;隐形化。</p><p>83、具有“发射后不用管”特点的制导有: 惯性制导， 图像匹配制导地形图匹配制导;卫星定位制导;主动寻的制导。</p><p>84、与制导站有关 (即需要制导站) 的制导方式有: 半主动寻的制导，被动寻的制导;无线电指令制导;有线指令制导，电视指令制导，波束制导等。</p><p>85、精确制导武器是指: 采用精确制导技术，直接命中率在50%以上武器。</p><p>86、导弹按弹道特性可分为: 弹道导弹(有主动段和被动段)和巡航导弹 (只有主动段)。</p><p>87、我国“北斗”卫星导航系统独有的功能:短报文通信。88、2015年12月31日成立了:火箭军;战略支援部队; 陆军领导机构。</p>]]></content>
    
    
    <categories>
      
      <category>大学学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记整理</tag>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【高中化学】物质类别和物质表示定义辨析</title>
    <link href="/2023/01/02/chem_1/"/>
    <url>/2023/01/02/chem_1/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/物质类别和物质表示定义辨析.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>高中学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记整理</tag>
      
      <tag>高中</tag>
      
      <tag>化学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【高中地理】个人笔记整理</title>
    <link href="/2023/01/01/geography_1/"/>
    <url>/2023/01/01/geography_1/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/高中地理笔记整理.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>高中学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记整理</tag>
      
      <tag>高中</tag>
      
      <tag>地理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【高中地理】自然地理基础知识点整理</title>
    <link href="/2023/01/01/geography_2/"/>
    <url>/2023/01/01/geography_2/</url>
    
    <content type="html"><![CDATA[<h1 id="高中地理基础知识——自然地理部分"><a href="#高中地理基础知识——自然地理部分" class="headerlink" title="高中地理基础知识——自然地理部分"></a>高中地理基础知识——自然地理部分</h1><h2 id="第一单元-地球、地图专题"><a href="#第一单元-地球、地图专题" class="headerlink" title="第一单元   地球、地图专题"></a>第一单元   地球、地图专题</h2><p>1.经度的递变：向东度数增大为东经度，向西度数增大为西经度。</p><p>2.纬度的递变：向北度数增大为北纬度，向南度数增大为南纬度。</p><p>3.纬线的形状和长度：互相平行的圆，赤道是最长的纬线圈，由此往两极逐渐缩短。</p><p>4.经线的形状和长度：所有经线都是交于南北极点的半圆，长度都相等。</p><p>5.东西经的判断：沿着自转方向增大的是东经，减小的是西经。</p><p>6.南北纬的判断：度数向北增大为北纬，向南增大为南纬。</p><p>7.东西半球的划分：20°W往东至160°E为东半球，20°W往西至160°E为西半球。</p><p>8.东西方向的判断：劣弧定律（例如东经80°在东经1°的东面，在西经170°的西面）</p><p>9.比例尺大小与图示范围：相同图幅，比例尺愈大，表示的范围愈小；比例尺愈小，表示的范围愈大。</p><p>10.地图上方向的确定：一般情况，“上北下南，左西右东”；有指向标的地图，指向标的箭头指向北方；经纬网地图，经线指示南北方向，纬线指示东西方向。</p><p>11.等值线的疏密：同一幅图中等高线越密，坡度越陡；等压线越密，风力越大；等温线越密，温差越大</p><p>12.等高线的凸向与地形：等高线向高处凸出的地方为山谷，向低处凸出的地方为山脊。</p><p>13.等高线的凸向与河流：等高线凸出方向与河流流向相反。</p><p>14.等温线的凸向与洋流：等温线凸出方向与洋流流向相同。</p><h2 id="第二单元-地球运动专题"><a href="#第二单元-地球运动专题" class="headerlink" title="第二单元   地球运动专题"></a>第二单元   地球运动专题</h2><p>1、天体的类别:星云、恒星、流星、彗星、行星、卫星、星际空间的气体、尘埃等。</p><p>2、天体系统的层次:总星系——银河系（河外星系）——太阳系——地月系</p><p>3、大行星按特征分类：类地行星（水金地火）、巨行星（木土）、远日行星（天、海）。</p><p>4、月球：（1）月球的正面永远都是向着地球，也有昼夜更替。</p><p>（2）无大气，故月球表面昼夜的温差大，陨石坑多，无声音、无风，</p><p>（3）月球表面有山脉、平原（即月海）、火山。</p><p>5、地球生命存在的原因: 稳定的光照条件、安全的宇宙环境、适宜的大气和温度、液态水。</p><p>6、太阳外部结构及其相应的太阳活动：光球(黑子)、色球(耀斑)、日冕(太阳风)。</p><p>7、太阳活动——黑子（标志）、耀斑（最激烈），太阳黑子的变化周期11年。</p><p>8.太阳活动的影响：黑子–影响气候，耀斑-－电离层-－无线电通讯，带电粒子流――磁场――磁暴</p><p>9、太阳辐射的影响：①维持地表温度，促进地球上水、大气、生物活动和变化的主要动力。</p><p>②太阳能是我们日常所用能源。</p><p>10.自转方向：自西向东，北极上空俯视呈逆时针方向、南极上空俯视呈顺时针方向</p><p>速度：①线速度（由赤道向两极递减至0）  ②角速度（除两极为0外，各地相等）</p><p>周期：①恒星日（23h56m4s真正周期）②太阳日（24时，昼夜更替周）</p><p>意义：①昼夜更替②不同经度不同的地方时③水平运动物体的偏移（北右南左）</p><p>11、晨昏线：沿自转方向，黑夜向白天过渡为晨线，白天向黑夜过渡为昏线（晨昏线上太阳高度角为0度）。</p><p>12、晨昏线与经线：晨昏线与经线重合—–春秋分；晨昏线与经线交角最大—-夏至、冬至</p><p>13、时间计算：所求时间＝已知时间±区时差＋途中时间</p><p>14、时区＝经度&#x2F;15°（若不整除，则四舍五入）    区时差＝时区差</p><p>15、世界时：以本初子午线（0°）时间为标准时，也称为格林尼治时间，也是零时区的区时。</p><p>16、日期分割：零点经线往东至日界线（180°）为地球上的“今天”，往西至日界线为“昨天”。</p><p>17、日界线：自西向东越过日界线（不完全经过180°经线）日期减一天，自东向西越过日期加一天。</p><p>18、卫星发射基地的区位选择：</p><p>自然因素（①气象条件需要天气晴朗②地球自转的初速度：取决于纬度和地势③地形平坦开阔）；</p><p>人文因素（地广人稀，交通便利，符合国防安全需要）。</p><p>①太原：技术力量强； ②酒泉：大陆性气候，晴天多；③西昌纬度低，发射初速度大；④海南文昌：纬度低，发射初速度大；海运便利。</p><p>19、公转速度：1月初——近日点——速度快，</p><p>7月初——远日点——速度慢。</p><p>意义：①昼夜长短的变化  ②正午太阳高度的变化  ③四季的更替  ④五带的形成</p><p>20、公转与自转形成了黄赤交角（23°26′）：</p><p>①黄赤交角存在—太阳直射点的移动—昼夜长短和正午太阳高度的变化—四季</p><p>黄赤交角存在—太阳直射点的移动—气压带风带的季节移动—地中海气候、热带草原气候的形成</p><p>②五带的划分界线：南北回归线之间为热带、回归线极圈之间为温带、极圈极点之间为寒带</p><p>③若黄赤夹角变大，热带和寒带变大，温带变小；若黄赤夹角变小，热带和寒带变小，温带变大若黄赤交角为零，太阳永远直射赤道，全球昼夜平分，地中海气候、热带草原气候消失。</p><p>21、正午太阳高度变化规律：①由直射点向南北两侧递减</p><p>②正午太阳高度的计算&#x3D;90°—△（直射点与所求点的纬度间隔）</p><p>③夏至日北回归线以北地区正午高度角一年中最大值, 南半球一年中最小值；</p><p>冬至日南回归线以南地区正午高度角一年中最大值，北半球一年中最小值。</p><p>④南北回归线之间的地区—–有两次直射机会—两次最大值</p><p>⑤纬度越高，正午太阳高度角越小，楼房间距越大。</p><p>22、昼夜长短的时间分布：</p><p>①太阳直射点在哪个半球，哪个半球昼长夜短，北半球夏季，太阳直射点在北半球，北半球的昼长夜短。</p><p>②太阳直射点向哪个半球移动，这个半球的昼就渐长，北半球6月22日昼最长，12月22日最短。</p><p>③南北回归线之间昼长最大值与正午太阳高度角最大值不在同一天出现，如海口市。</p><p>23、昼夜长短的纬度分布：</p><p>北半球夏半年，昼长夜短，越向北白昼越长（日出越早日落越晚），如北京﹥上海﹥广州</p><p>北半球冬半年，昼短夜长，越向南白昼越长（日出越早日落越晚）。如海口﹥广州﹥上海，</p><p>24、昼长&#x3D;日落时间—日出时间；昼长&#x3D;24小时—夜长</p><p>日出时间＝12：00－昼长&#x2F;2（或0：00＋夜长&#x2F;2）;赤道上的点的日出时间是6：00</p><p>日落时间＝12：00＋昼长&#x2F;2（或24：00－夜长&#x2F;2）；赤道上的点的日落时间是18：00</p><p>25、地球是个不发光、不透明球体——昼夜现象出现</p><p>地球自转的球体——昼夜更替（自转速度周期影响昼夜温差变化）</p><p>地球倾斜的公转的球体——直射点的移动、正午太阳高度、昼夜长短的变化―四季五带</p><p>26、典型的季节现象</p><p>北半球夏半年；北半球冬半年</p><p>1.地球公转：七月初，远日点附近，地球公转角速度、线速度最慢；一月初，近日点附近，地球公转角速度、线速度最快</p><p>2.正午太阳高度：6月22日左右，北回归线以北地区达最大，赤道及南半球达最小；12月22日左右，南回归线以南地区达最大，赤道及北半球达最小</p><p>3.昼夜长短：昼长夜短，北极圈以内出现极昼；昼短夜长，北极圈以内出现极夜</p><p>4.等温线：陆地等温线均向北凸出；陆地等温线均向南凸出，海洋相反</p><p>5.气压带、风带：随太阳直射点北移；随太阳直射点南移</p><p>6.雪线：雪线上升；雪线下降</p><p>7.北印度洋洋流：受西南季风的影响，洋流呈顺时针流动；受东北季风的影响，洋流呈逆时针流动</p><p>8.我国的降水：夏李风影响，降水多；冬李风影响，降水少</p><p>9.我国的河流：内流河因高温导致冰雪融水多，外流河受夏季风影响，大部分河流进入汛期，东北地区分春汛、夏汛；大部分进入枯水期，秦岭淮河以北的河流有结冰期，部分河流有断流现象</p><p>10.我国的季风：全国大部分地区受来自海洋的夏季风影响，高温多雨；全国大部分地区受来自大陆的冬季风影响，寒冷少雨</p><p>11.我国的农业生产：全国普遍高温，农作物进入生长期，作物熟制自南向北由一年三熟逐渐过渡到两年三熟至一年一熟；北方大部分地区农作物处于越冬期，南方热带地区水热充足，可生产反季节蔬菜、瓜果</p><p>12.气象灾害：旱涝（华北春旱、长江伏旱）、暴雨、台风（表现：强风、暴雨、风暴潮）；寒潮、沙尘暴、干旱、暴雪</p><p>13.地质灾害:滑坡、泥石流较多；较少</p><h2 id="第三单元-大气专题"><a href="#第三单元-大气专题" class="headerlink" title="第三单元   大气专题"></a>第三单元   大气专题</h2><p>1、对流层的特点：①随高度增加气温降低；②大气对流运动（12km）显著；③天气复杂多变。</p><p>2、平流层的特点：①随高度增加温度升高；②大气平稳，以水平运动为主，有利于高空飞行。</p><p>3、大气的热力过程：太阳辐射——地面增温——地面辐射——大气增温——大气（逆）辐射——大气保温</p><p>4、大气对太阳辐射的削弱作用：吸收、反射、散射。</p><p>5、太阳辐射（光照）与天气、地势关系：晴朗的天气、地势高空气稀薄，光照越强；</p><p>我国太阳能的分布青藏高原最高，四川盆地最低。</p><p>6、大气的保温效应：强烈吸收地面长波辐射，并通过大气逆辐射把热量还给地面。</p><p>7、气温与天气：白天多云，气温不高（云层反射作用强）；夜晚多云，气温较高（大气逆辐射强）。</p><p>8、气温的垂直分布：对流层气温随高度的增加而递减</p><p>9、气温的水平分布：①纬度分布：纬度越高，气温越低，我国热量最丰富的地区：海南岛</p><p>②海陆分布：夏季陆地﹥海洋，冬季海洋﹥陆地；</p><p>③气温高的地方，等温线向高纬凸出，反之，气温低的地方，等温线向低纬凸出。</p><p>10、气温年较差：①影响因素：海陆热力性质；地表植被水分状况；云雨多少。</p><p>②变化规律：内陆﹥沿海，大陆性气候﹥海洋性气候，裸地﹥草地﹥林地﹥湖泊，晴天﹥阴天。</p><p>11、热力环流的性质特点</p><p>（1）水平方向相邻地面热的地方——垂直气流上升――低气压（气旋）——阴雨</p><p>（2）水平方向相邻地面冷的地方——垂直气流下沉――高气压（反气旋）——晴朗</p><p>（3）垂直方向的气温气压分布：随海拔升高，虽然气温降低，但是空气变稀，气压降低。</p><p>（4）来自低纬的气流——暖湿</p><p>（5）来自高纬的气流——冷干</p><p>（6）来自海洋的气流——湿</p><p>（7）来自大陆的气流（离陆风）——干</p><p>（8）两种性质不同的气流相遇——锋面——阴雨、风</p><p>12、水平方向气压与气温：近地面，气温高，空气膨胀上升，地面形成低压；反之，气温低，近地面的空气收缩下沉，地面形成高压。</p><p>13.风的形成：大气的水平运动叫风，水平气压梯度力是形成风的直接原因，等压线愈密风速愈大。</p><p>14、风向：（1）风向－—风的来向；</p><p>（2）根据等压线的分布确定风向：以右图为例画A点的风向及其受力</p><p>①确定水平气压梯度力的方向：垂直于等压线并且由高压指向低压</p><p>②确定地转偏向力方向：与风向垂直，北半球右偏，南半球左偏</p><p>③近地面受磨擦力（方向与风向相反）的影响，风向与等压线斜交</p><p>15、高空大气的风向是气压梯度力和地转偏向力共同作用的结果，风向与等压线平行；</p><p>近地面的风，受气压梯度力、地转偏向力和磨擦力的共同影响，风向与等压线之间成一夹角。</p><p>16、锋面与天气（冷暖不同气团作水平运动并相遇）</p><p>①冷锋过境雨区在锋后，出现雨雪、降温天气。过境后，气压升高，气温骤降，天气转晴；</p><p>②暖锋过境雨区在锋前，多为连续性降水。过境后，气温上升，气压下降，天气转晴。</p><p>17、影响我国天气的主要锋面是冷锋：如我国北方夏季的暴雨、冬季我国的寒潮、冬春季节出现的沙尘暴。</p><p>18、气压系统与天气（同一气团作垂直运动）：</p><p>①气旋（低气压）垂直气流上升，天气阴雨。  ②反气旋（高气压）垂直气流下沉，天气晴朗；</p><p>19、三圈环流及气压带风带：</p><p>①三圈环流（垂直分布）</p><p>画出右面三圈环流循环图</p><p>②气压带、风带（水平分布）</p><p>画出右面气压带、风带分布图（“北撇南捺”）</p><p>③长城考察站红旗向西北飘，窗口要避开东南方向；黄河考察站红旗向西南飘，窗口要避开东北方向。</p><p>20、气压带和风带的移动：随太阳直射点的移动而移动。</p><p>移动方向：就北半球而言，大致是夏季北移，冬季南移</p><p>21、季风环流：海陆热力差异使亚洲、太平洋中心随季节变化而变化的情况：</p><p>夏季：亚洲大陆上形成亚洲低压，太平洋上形成夏威夷高压；</p><p>冬季：亚洲大陆上形成亚洲高压，太平洋上形成阿留申低压。</p><p>22、东亚、南亚季风环流：</p><p>东亚：夏季东南风，冬季西北风；主要由海陆热力性质差异引起。</p><p>南亚：夏季西南风，冬季东北风，由风带和气压带季节移动和海陆热力性质差异共同作用形成。</p><p>23、我国的旱涝灾害、雨带的移动与副热带高压的强弱有密切关系。</p><p>①雨带的移动</p><p>春末（5月），雨带在华南（珠江流域）（华北春旱，东北春汛）</p><p>夏初（6—7月），雨带移到长江中下游地区 —梅雨（准静止锋）</p><p>7–8月，雨带移到东北和华北，长江中下游进入“伏旱”（反气旋）</p><p>9月，副高南退，北方雨季结束，南方进入第二个雨季。</p><p>②北方雨季开始晚结束早，雨季短；南方雨季开始早结束晚，雨季长</p><p>③旱涝灾害  副高北移速度偏快（夏季风强），造成北涝南旱</p><p>副高北移速度偏慢（夏季风弱），造成北旱南涝.</p><p>我国水旱灾害发生的根本原因是：夏季风的强弱和进退的早晚。</p><p>24、气候形成因子：太阳辐射、大气环流、下垫面、人类活动</p><p>25、判断气候类型的步骤：①判断南北半球，②判断热量带，③判断雨型。</p><p>①热带的四种气候类型：各月均温在15度以上，降水不同，气候类型差异较大</p><p>热带雨林气候（常年受赤道低压影响，终年高温多雨）</p><p>热带沙漠气候（常年受副高或来自陆地的信风影响，终年高温少雨）</p><p>热带季风气候（南亚地区，冬季盛行东北风，为旱季，夏季刮西南季风，6–9月为雨季）</p><p>热带草原气候（赤道低压移来时，是湿季，信风移来时为旱季，农业活动在雨季播种，旱季收割）</p><p>②亚热带气候类型：冬季最冷月均温在0度以上，全球只有两种气候类型：</p><p>地中海气候：除南极洲外，其他各洲都有分布，在南北纬30°——40°大陆的西岸，位置在西风带和副高之间，冬季温和多雨，夏季炎热干燥</p><p>亚热带季风气候：冬季–偏北风–低温少雨，夏季–夏季风–高温多雨。</p><p>③温带气候类型：除海洋性气候外，冬季最冷月均温以0℃以下。</p><p>温带海洋性气候：分布在南北纬40°–60°大陆西岸（地中海气候高纬一侧），终年受西风控制，终年温和多雨</p><p>温带季风气候：分布在北纬35°–55°大陆东岸（亚热带季风的高纬一侧），受冬季风影响，寒冷干燥，受夏季风影响，高温多雨。</p><p>温带大陆性气候：全年受大陆性气团控制，日较差大、年较差大，降水稀少，降水主要在夏季。</p><p>26、大陆性与海洋性气候的不同特点（以北半球为例分析）：</p><p>大陆性气候气温的日较差、年较差大，气温最高月在7月，最低气温在1月。年降水量少。</p><p>海洋性气候日较差、年较差小，最热月在8月、最冷月在2月，年降水量较多。</p><p>27、主要的气象灾害：是指因暴雨洪涝、干旱、台风、寒潮、大风沙尘、大（浓）雾、高温低温等因素直接造成的灾害。</p><p>1.台风发生在夏秋季节，发源于热带洋面或副热带洋面，影响到我国东部沿海地区，天气变化：强风、特大暴雨、风暴潮。</p><p>2.旱涝灾害发生在春夏秋，影响到除西部一些沙漠地区外的全国范围，天气变化：暴雨、大暴雨或特大暴雨。</p><p>3.寒潮发生在秋末、冬季、初春，发源于蒙古、西伯利亚，影响到除青藏、云贵、海南外的广大地区，天气变化：大风、雨雪、冻雨。</p><p>28、主要的大气环境问题：全球变暖（温室效应CO<del>2</del>）、臭氧层破坏（氟氯烃消耗O<del>3</del>）、酸雨（SO<del>2</del>、NO<del>2</del>）</p><p>29、温室效应</p><p>①大量燃烧矿物燃料——大气中CO<del>2</del>增加——大气逆辐射增强</p><p>②滥砍滥伐森林——光合作用减弱——CO<del>2</del>相对增多——大气逆辐射增强</p><p>③大气逆辐射增强——温室效应——气温升高——全球热量带分布发生变化——经济结构发生调整（农业经济结构调整，中纬受损，高纬受益，使适宜种植业生产地域缩小，粮食减产。）</p><p>④极地冰山融化，沿海地区海海平面上升，沿海地区地下水水质变坏。</p><p>30、绿化的环境效益：</p><p>①通过光合作用保持大气中O<del>2</del>和CO<del>2</del>的平衡，净化空气；</p><p>②绿化植物和防护林可以调节气候、涵养水源、保持水土、防风固沙</p><p>③城市绿地的作用是吸烟除尘、过滤空气、减轻污染、降低噪音、美化环境</p><h2 id="第四单元-水环境"><a href="#第四单元-水环境" class="headerlink" title="第四单元  水环境"></a>第四单元  水环境</h2><p>1、水循环：①按其发生领域分为海陆间大循环、内陆循环和海上内循环。</p><p>②水循环的主要环节有：蒸发，水汽输送，降水，径流。</p><p>③它的重要意义在于：使淡水资源不断补充、更新，使水资源得以再生，维持全球水的动态平衡。</p><p>2、陆地水体的相互关系：</p><p>①以雨水补给为主的的河流其径流的变化与降雨量变化一致：a地中海气候为主的河流，其流量冬季最大；b季风气候为主河流，流量夏季最大;c温带海洋性与热带雨林气候河流流量全年变化小；</p><p>②以冰雪补给为主的河流其径流变化与气温关系密切：冰川融水补给为主的河流，其流量夏季最大.</p><p>③河流水地下水之间可相互补给，湖泊对河流径流起调蓄作用。</p><p>3、我国河流补给的差别：①我国东部河流以降水补给为主（夏汛型，东北春季有积雪融水）</p><p>②我国西北地区河流以冰雪融水补给为主（夏汛型，冬季断流）</p><p>4、海水等温线的判读：①判断南北半球（越北越冷是北半球）</p><p>②洋流流向和海水等温线凸出方向一致：高温流向低温是暖流，反之是寒流。</p><p>5、影响海水温度因素——太阳辐射（收入）、蒸发（支出）、洋流</p><p>6.洋流的形成:定向风（地球上的风带）是形成洋流最基本的动力，</p><p>风海流是最基本的洋流类型。</p><p>7.洋流的分布（画一画右面洋流分布模式图）：</p><p>①中低纬度洋流圈北半球呈顺时针方向、南半球呈反时针方向。</p><p>②北半球中高纬逆时针方向洋流圈</p><p>③南半球40—60度海区形成西风漂流</p><p>④北印度洋形成季风洋流，冬季逆时针，夏季顺时针。</p><p>8.洋流对地理环境的影响：①影响气候（暖流—增温增湿，寒流—减温减湿）</p><p>②影响海洋生物—－渔场  ③影响航海  ④影响海洋污染</p><p>9.世界主要渔场：北海道、北海、纽芬兰渔场—寒暖流交汇；秘鲁渔场――上升流</p><p>10.海洋渔业集中在大陆架的原因：①这里阳光集中，生物光合作用强；</p><p>②入海河流带来丰富的营养盐类，浮游生物繁盛，鱼饵丰富。</p><p>11.海洋灾害是指源于海洋的自然灾害：海啸和风暴潮。</p><p>12.海洋环境问题指源于人类活动的海洋生态破坏：海洋污染、海平面上升、赤潮</p><h2 id="第五单元-陆地环境专题"><a href="#第五单元-陆地环境专题" class="headerlink" title="第五单元   陆地环境专题"></a>第五单元   陆地环境专题</h2><p>1、地球的内部圈层：地壳（地表到莫霍界面）、地幔（莫霍面—古登堡面）、地核（古登堡面以下）</p><p>2、岩石圈范围包括地壳和上地幔顶部（软流层之上）</p><p>3、岩石成因分类：岩浆岩（喷出岩和侵入岩）、沉积岩（层理构造、有化石）、变质岩。</p><p>4、地壳物质循环：岩浆冷却凝固→岩浆岩－外力→沉积岩－变质→变质岩－熔化→岩浆</p><p>5、地质作用：①内力作用（地壳运动、岩浆活动、地震、变质作用）</p><p>②外力作用（风化、侵蚀、搬运、沉积、固结成岩）</p><p>6、地质构造的类型：褶皱（背斜、向斜），断层（上升岩块－地垒、下沉岩块－地堑）</p><p>7、背斜成谷向斜成山的原因：外力侵蚀（在外力侵蚀作用之前背斜成山、向斜成谷）</p><p>背斜顶部受张力，容易被侵蚀成谷地；向斜槽部受到挤压，岩性坚硬不易被侵蚀反而成为山岭。</p><p>8、地垒–庐山、泰山；地堑–东非大裂谷、河平原和汾河谷地。</p><p>9、地质构造对人类生产活动的影响：背斜（储油）、向斜（储水）、大型工程选址，应避开断层</p><p>10．外力作用与常见地貌：</p><p>①流水侵蚀——沟谷、峡谷、瀑布、黄土高原的千沟万壑的地表、溶洞（喀斯特地貌）</p><p>弯曲的河道–凹岸侵蚀，凸岸沉积（港口宜建在凹岸）</p><p>②流水沉积——山麓冲积扇、河口三角洲、河流中下游冲积平原</p><p>③风力侵蚀——风蚀沟谷、风蚀洼地、蘑菇石、风蚀柱、风蚀城堡等</p><p>④风力沉积——沙丘、沙垄、沙漠边缘的黄土堆、黄土高原；</p><p>11、陆地环境的整体性：陆地环境各要素（大气、水、岩石、生物、土壤、地貌）的相互联系、相互制约和相互渗透，构成陆地环境的整体性。例如我国西北地区各环境要素都体现出干旱特征。</p><p>12、陆地环境的地域差异有：①由赤道到两极的地域分异（热量）—――-纬度地带性</p><p>②从沿海到内陆的地域分异（水分）—－-经度地带性</p><p>③山地的垂直地域分异（水分和热量）-－–垂直地带性</p><p>13.影响山地垂直带谱的因素：①山地所处的纬度；②山地的海拔；③阳坡、阴坡；④迎风、背风坡。</p><p>14、影响雪线高低的因素(雪线是指冰雪存在的下限的海拔高度)</p><p>主要影响因素有两个：一是0℃等温线的海拔（阳坡、阴坡）；二是降水量的大小（迎风、背风坡）</p><p>15、非地带性因素：海陆分布、地形起伏、洋流影响等。例如我国西北地区的绿洲。</p><p>16、主要地质灾害：地震、火山、滑坡和泥石流。</p><p>①两大地震带是：环太平洋带、地中海——喜马拉雅带。我国多地震的原因是：我国位于两大地震带中。</p><p>②地质灾害的防御：提高建筑物抗震强度；实施护坡工程，防止滑坡和崩塌；保护植被，改善生态环境；</p><p>高中地理基础知识——人文地理部分</p><h2 id="第六单元-人口与城市"><a href="#第六单元-人口与城市" class="headerlink" title="第六单元  人口与城市"></a>第六单元  人口与城市</h2><p>1、一个地区人口数量的变化包括人口机械增长（人口迁移）和人口自然增长。</p><p>2、影响人口自然增长的因素：自然增长率、出生率、死亡率、生产力水平（根本因素）</p><p>3、人口发展模式：</p><p>原始型（“高高低”）：极高的死亡率，平均寿命短，极低的自然增长率，人口增长慢。</p><p>传统型（“高低高”）：高出生率，低死亡率，高自然增长率（代表：尼日利亚）</p><p>过渡型    死亡率低，出生率高但开始下降，人口压力大（代表：巴西）</p><p>现代型（“三低”）：低出生率，低死亡率，低自然增长率，人口老龄化（代表：德国）</p><p>4、人口发展模式地区分布：</p><p>全世界：属于“过渡型”，正处向“现代型”转变的阶段</p><p>发达国家：“现代型”德国、匈牙利等负增长，美、加、澳、新西兰等国自然增长率稍高，日本等大多发达国家自然增长率接近零增长</p><p>发展中国家：多为“过渡型”，但韩国、新加坡、古巴、乌拉圭、中国已进入或正要进入“现代型”。</p><p>人口一亿以上的国家：中国、印度、美国、印尼、巴西、俄罗斯、日本、孟加拉国、尼日利亚、巴基斯坦</p><p>5、人口增长模式与相应人口问题</p><p>①人口增长阶段人口问题</p><p>发展中国家――增长减缓阶段－—过渡模式－－过渡型——人口压力大</p><p>发达国家――低速增长阶段—－“低低低”模式——现代型－—人口老龄化，劳动力不足</p><p>②承受人口经济压力最大的国家是儿童与老年人比重大的国家。</p><p>③城市人口死亡率高于农村的原因：人口老龄化问题更突出</p><p>6、人口迁移迁出区：发展中国家亚洲、非洲、拉丁美洲，我国的中西部地区、农村，发达国家的城市中心区。</p><p>人口迁移迁入区：发达国家西欧、北美、西亚（中东），我国的东部沿海地区、城市。</p><p>7、环境人口容量：即环境承载力，环境所能容纳的最大人口数。</p><p>影响环境人口容量的因素—－资源、人口消费水平、科技发展水平、地域开放程度</p><p>8、合理人口容量——人口适度规模，一般要小于环境人口容量。</p><p>9、城市化</p><p>①衡量城市化水平的最重要的指标是：城市人口占总人口的百分比</p><p>②不同类型国家城市化的不同进程：</p><p>发达国家特点：起步早；城市化水平高（70%以上）；发展趋缓，出现逆城市化现象(原因？)</p><p>发展中国家特点：起步晚，发展快；城市化水平低（50%以下）；城市发展不合理（个别大城市畸形发展）</p><p>③城市化过程中产生的问题：（根本原因：城市规模的无限制扩大、城市人口的过度集中）</p><p>④城市化问题解决途径：（保护和改善城市环境措施）</p><p>a.建立卫星城，开发新区；b.改善城市交通和居住条件；c.保护和治理城市环境；</p><p>10、区域工业化与城市化：①工业化是推动城市化促进力量。</p><p>②我国区域城市化的典型模式有：珠三角模式――对外开放→吸引外资→工业化、城市化；</p><p>温州模式――小商品经营→个私企业→工业化、城市化；</p><p>苏南模式――大城市扩散→乡镇企业发展→工业化、城市化；</p><p>边贸发展的云南德宏模式；靠资源开发促进城市化发展的东北模式。</p><p>11、城市地域结构</p><p>功能区    地位       分布       特点</p><p>商业区：占地小，大多呈点状或条带状分布于市中心、交通干线两侧或街道路口，是城市经济活动最繁忙之地，人口数量昼夜差别很大，建筑物高大密集</p><p>工业区：占地较大，分布在最小风频的上风向、河流的下游，不断向市区外缘移动，趋向于沿主要交通干线分布</p><p>住宅区：占地最广，分布在最大风频的上风向、河流的上游，高级住宅区和低级住宅区背向发展</p><p>12、不同等级城市提供不同的服务种类和服务范围</p><p>城市等级   服务范围   职能种类   服务级别   城市数目   相互距离</p><p>高级城市   大      多      高      少      远</p><p>低级城市   小      少      低      多      近</p><h2 id="第七单元-人类的生产活动与地理环境"><a href="#第七单元-人类的生产活动与地理环境" class="headerlink" title="第七单元   人类的生产活动与地理环境"></a>第七单元   人类的生产活动与地理环境</h2><p>1、农业的分类：①按生产对象分类：种植业、畜牧业、林业、渔业、副业</p><p>②按投入多少分类：粗放农业（靠天吃饭）；密集农业（劳动密集与资金密集型）</p><p>③按产品用途分类：自给农业；商品农业（考虑市场需求量，主要在发达国家和发展中国家的一些地区）</p><p>2、农业的主要区位：自然区位因素有：气候、地形、土壤、水源</p><p>社会经济区位因素有：市场、交通运输、政策</p><p>3、农业地域类型：①水稻种植业（自给农业，机械化水平低、商品率低、科技水平低、水利工程量大、单产高）  ②商品谷物农业（商品农业，生产规模大、机械化水平高、商品率高）</p><p>③大牧场放牧业（地广人稀，交通便利）④乳畜业（靠近市场）⑤混合农业（对市场的适应性与灵活性）</p><p>4、我国农业发展的制约因素与优势：</p><p>南方：水土流失（水热充沛）华北：土地盐碱化、春旱、夏涝（光照充足）</p><p>东北：热量不足（土壤肥沃、耕地面积广）<br>西北：水资源缺乏（光照充足）</p><p>5、我国农作物分布：①东耕西牧；②南蔗北菜；</p><p>③南稻北麦（冬小麦—秋种夏收—华北平原，春小麦—春种秋收—东北平原）；</p><p>④茶叶—气候湿润的酸性土壤（江南丘陵）；</p><p>⑤温带水果—苹果、梨、桃</p><p>⑥商品粮生产基地：洞庭湖平原、鄱阳湖平原、江汉平原、苏皖北部平原、松嫩平原和三江平原、河西走廊、南疆、宁夏平原（太湖平原、成都平原、珠江三角洲已不再是商品粮基地）</p><p>⑦商品棉基地（热量充足、光照强）：江汉平原、长江下游滨海沿江平原、冀中南、鲁西北和豫北平原、黄淮平原及南疆等</p><p>6、①原料指向型工业：甜菜或甘蔗制糖厂、水产品加工厂、水果罐头厂、新疆的纺织厂</p><p>②市场指向型工业：啤酒厂、家具厂、印刷厂、饮料厂、食品厂、玻璃厂、欧美在中国建芯片厂（汽车厂）</p><p>③动力指向型工业：炼铝厂、有色金属冶炼、火电厂、水电站</p><p>④廉价劳动力指向型工业：纺织厂、普通服装厂、电子装配厂、包带、制伞、制鞋厂</p><p>⑤技术指向型工业：集成电路（芯片）、卫星、飞机制造厂、精密仪表</p><p>7.有污染的工业企业应布局在常年盛行风的下风向，或位于最小风频风的上风向；布局在河流的下游。</p><p>8、传统工业区（丰富的煤、铁资源）：德国鲁尔区、美国东北部工业区、我国东北工业区。</p><p>9、新兴工业区（企业规模小或技术水平高）：意大利新兴工业区、美国的“硅谷”、日本的北九州等</p><p>10、产业转移的原因—选择最佳区位（资源原料供给、劳动力素质、工资水平、市场需求、环境容量、国家政策），降低生产成本，扩大销售市场。发达国家工资水平不断提高、传统工业区环境压力日益沉重，发展中国家工资水平较低、基础设施和投资环境明显改善。</p><p>11、产业转移的方向：英国——德国——美国——日本——东南亚、拉丁美洲、我国沿海（进一步内地）</p><p>12、产业转移的影响：产业转移促进产业的国际分工与合作，促进区域产业结构调整和经济发展。</p><p>①对于转移国来说，可以实现产业升级，但也可能会导致失业人口的增加；</p><p>②对于接受国来说，可以促进经济发展，但也可能会带来严重的环境污染。</p><p>13、促使发达国家向发展中国家设分厂的原因是：廉价的劳动力、广阔的市场、低廉的地价。如跨国公司在中国建芯片生产厂、汽车厂，是因为中国拥有庞大的市场（不是因为中国的廉价劳动力和土地）。</p><p>14、珠三角地区工业化得以迅速发展的原因：①发达国家和地区产业转移的契机；</p><p>②对外开放的优惠政策；</p><p>③东南沿海、毗邻港澳台，靠近东南亚的优越位置；</p><p>④劳动力丰富廉价的优势条件；  ⑤侨乡</p><p>15、珠三角地区工业化过程中问题：对外资吸引力下降，产业升级面临困难，发展后劲不足。</p><p>①珠三角地区产业基础（轻工业为主）先天不足；  ②科研实力比不上长三角地区；</p><p>③市场腹地不够广阔；  ④工资和地价水平提高；</p><p>⑤城市基础设施建设相对滞后，生态环境问题日趋严重</p><p>16、珠三角地区工业化过程中措施：</p><p>①调整产业结构，发展重工业和装备制造业；劳动密集型产业向电子信息产业升级。</p><p>②加强各城市的分工与合作，构筑大珠三角洲城市群；</p><p>③推动泛珠三角区域合作，实现优势互补、协调发展；</p><p>④加强规划和管理，改善投资环境和生态环境。</p><p>17、五种现代运输方式的特点</p><p>铁路：运量大、运速快、运价较低、连续性好；</p><p>公路：灵活性好，但运量少，适于短途运输；</p><p>水运：运量大、运价低，运速慢、灵活性和连续性差；</p><p>管道：连续性好、运量大，投资大、灵活性差。</p><p>空运：运速快，但运量小、运价高；</p><p>18、港口区位：①河港要布局在河宽水深（侵蚀岸一侧）地方；</p><p>②海港要布局在水深（等高线密集处）、泥沙淤积少、风浪小、地形平坦处。</p><p>19、商业中心区位：①市场最优原则，要求位于城市的几何中心；</p><p>②交通最优原则，要求位于市区环行路边缘或市区边缘的高速公路沿线。</p><h2 id="第八单元-区域可持续发展专题"><a href="#第八单元-区域可持续发展专题" class="headerlink" title="第八单元  区域可持续发展专题"></a>第八单元  区域可持续发展专题</h2><p>一、我国重要地理分界线：</p><p>1、秦岭—淮河：一月0°C等温线，800mm降水量线，湿润区与半湿润区，亚热带与暖温带、南方与北方、水田与旱地分界线</p><p>2、大兴安岭：400mm降水量线、半湿润与半干旱、农区与牧区、季风区与非季风区分界线。</p><p>二、主要的区域特征</p><p>1、高原盆地—――①青藏高原（冰川冻融地貌，光照强、热量不足，河谷农业）；</p><p>②内蒙古高原（风力地貌，荒漠化）；③黄土高原（风力沉积、流水侵蚀地貌，水土流失）</p><p>④云贵高原（流水溶蚀地貌，喀斯特地形、多峰林、溶洞，多地震、滑坡、泥石流等地质灾害）</p><p>⑤塔里木盆地（风力地貌，光照强、温差大，水分不足，绿洲农业，荒漠化）</p><p>⑥四川盆地（流水地貌，光照弱、热量足，紫色土）</p><p>2、平原丘陵–①东北平原（地势平坦开阔，沃野千里）；②华北平原（旱涝、盐碱、风沙）、</p><p>③长江中下游平原（湖泊淤积、恢复生态植被、退田还湖）；④江南丘陵（水土流失、红壤、红色荒漠）</p><p>3、我国资源的分布：①南方：水能、有色金属与铁； ②北方：煤、石油、铁；</p><p>③西北：石油、天然气；   ④青藏：太阳能、地热能、水能</p><p>三、资源跨区域调配</p><p>①原因：自然资源分布的不均衡与社会资源分布的地域差异</p><p>②水资源的跨流域调配——南水北调：③能源资源的跨区域调配——西气东输和西电东送、北煤南运。</p><p>④西气东输经过的自然带：温带荒漠带、温带草原带、温带落叶阔叶林、亚热带常绿阔叶林</p><p>经过的气候区：温带大陆性气候、温带季风气候、亚热带季风气候</p><p>川气东输经过的自然带：亚热带常绿阔叶林带</p><p>⑤西电东送：a北路（火电为主）供应京津唐和华北；b中路（水电为主）供应华中、华东和长三角；c南路（水电为主）供应华南和珠三角</p><p>四、河流开发</p><p>①流域治理—修大坝—拦洪蓄水—中下游流量季节变化减小、泥沙淤积量减少—海浪侵蚀作用增强</p><p>②田纳西河流域开发的核心是梯级开发（控制水位，疏通河道，治理洪涝）</p><p>a:――→防洪、灌溉、养殖――农、林、渔等第一产业水平提高</p><p>b:――→航运、旅游业――第三产业发展</p><p>c:――→发电（火电、水电、核电）――发展炼铝、化学高耗能工业――形成工业走廊</p><p>五、山西煤炭资源的综合开发：</p><p>①山西煤炭资源丰富，品质优良，开采便利，且位置靠近东部，成为我国重要的煤炭基地。</p><p>②问题：山西产业结构以煤炭工业为主，十分单一；由于国家优化能源消费结构，将改变过分倚重煤炭的局面；煤炭开采和利用过程中，破坏地表，加剧水土流失，形成严重的大气污染和水污染。</p><p>③措施：提高煤炭的综合利用技术，大力发展洁净煤技术，建立清洁能源生产体系；调整产业结构，重化工业（能源、冶金、化工、建材等）向深加工、高附加值方向发展，大力发展农业、轻纺工业、高新技术产业和旅游业的发展；做好矿区复垦绿化工作，治理环境污染。</p><p>六、荒漠化的防治</p><p>①荒漠化的实质—土地退化；表现→耕地、草地、林地退化→土地沙漠化、石质荒漠化、次生盐碱化</p><p>②我国荒漠化的原因：自然原因—干旱、气候异常</p><p>人为因素—过度樵采、过度放牧、过度开垦</p><p>③防治对策：A、合理利用水资源；   B、利用生物措施和工程措施构筑防护林体系；</p><p>C、调节农林牧之间关系；D、多途径解决农牧区能源问题；E、控制人口增长。</p><p>七、黄土高原水土流失</p><p>①水土流失的主要原因：</p><p>自然原因—气候（降水集中，多暴雨）；土壤（土质疏松，垂直节理发育）；植被（稀少）</p><p>人为原因—人类对资源的不合理利用，过度樵采、过度放牧、过度开垦对地表植被破坏严重</p><p>②水土流失的危害：⑴侵蚀土壤 (跑水跑肥跑土)，农业减产；⑵河湖淤积加重；⑶旱涝灾害增加</p><p>③治理措施：生物措施—－植树种草退耕还林还草—－发展多种经营――恢复植被</p><p>工程措施—－修水库建梯田打坝淤地――蓄水保土</p><p>农业技术措施—－深耕改土选育良种地膜覆盖轮作套种—－蓄水保土</p><p>八、热带雨林的开发与保护：</p><p>①雨林生态系统的脆弱性：雨林生物循环旺盛，土壤肥力较低。</p><p>②雨林对调节全球气候和保护生物多样性具有重要作用，雨林被毁，会加剧全球变暖，导致雨林众多物种的丧失，这对全球人类是一个巨大的损失。</p><p>③目前对雨林最大的破坏来自于雨林的农业活动（迁移农业、过度开垦、放牧）和商业性木材采伐（往往由跨国公司主导）。</p><p>④另一值得关注的生态系统：湿地（含河流、湖泊、滩涂、沼泽、珊瑚礁、红树林、水田、水库等）</p><p>九、地理信息技术</p><p>1.遥感技术(RS)：利用一定技术装备在航空或航天器上对地物进行感知。技术装备：遥感平台、传感器、遥感信息的传输与处理系统。应用：1.资源调查：2.灾害监测与环境监测：（水污染、森林病虫害、大气监测和天气预报、旱涝灾害监测、海洋环境监测、森林火灾监测等）</p><p>2.地理信息系统(GIS)：专门处理地理空间数据的计算机系统。技术装备：计算机软、硬件。应用：资源环境、社会发展等各种信息的统计、分析、评估预测、表达应用等。</p><p>3.全球定位系统(GPS)：利用卫星在全球范围内适时进行导航和定位的系统。技术装备：GPS卫星星座（空间部分）、地面监控系统（地面部分）、GPS信号接收机（用户设备）。应用：军事、交通出行的导航、定位。</p>]]></content>
    
    
    <categories>
      
      <category>高中学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记整理</tag>
      
      <tag>高中</tag>
      
      <tag>地理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【原神】风神简史</title>
    <link href="/2023/01/01/genshin_1/"/>
    <url>/2023/01/01/genshin_1/</url>
    
    <content type="html"><![CDATA[<h1 id="风神篇·序"><a href="#风神篇·序" class="headerlink" title="风神篇·序"></a>风神篇·序</h1><p>很多人都忘了，主角在遇到安柏前，就已经和温迪见过面。他当时在森林中试图安抚中毒的特瓦林，被主角打搅。他很生气地扭头看，发现是主角后什么都没有说，直接传送走了。</p><p>风神非常少见地露出生气的表情<br>耐人寻味的是，温迪角色语音中，“初次见面”的台词是这样的：</p><p>风神和主角之前认识并曾经一起旅行？这些目前没有任何线索。</p><h1 id="风神篇一、逆袭与建国（距今约3000—2600年前）"><a href="#风神篇一、逆袭与建国（距今约3000—2600年前）" class="headerlink" title="风神篇一、逆袭与建国（距今约3000—2600年前）"></a>风神篇一、逆袭与建国（距今约3000—2600年前）</h1><p>三千多年前开始的，蒙德地区的魔神战争，最强大的势力是高塔孤王迭卡拉庇安和北风狼王安德留斯。彼时的蒙德，大部分地区都是雪地和荒原，自然条件十分恶劣。不少人类为了活下去，投奔了高塔孤王，在他的王都中生活——高塔孤王认为自己给人类提供庇护所、用严厉的规则管理人类是爱人的体现，但有的人不这么认为。</p><p>后来有两批人实在无法忍受高塔孤王的高压统治，逃出了王都。一批由法希鲁率领，他们在今天的龙脊雪山地区找到了拥有地脉能量的古树，以及因它带来的宜居环境。他们便在此定居，建立了名为沙尔·芬德尼尔的国家，直到若干年后寒天之钉从天而降，钉死了古树。</p><p>另一批四处寻找宜居地而不得，眼看就要陷入绝境，族长的女儿古恩希尔德的祈祷吸引了风中的精灵。风精灵庇护了他们，拥有了自己最早的子民和眷属。</p><p>书籍《古恩希尔德小传》<br>风精灵还结识了高塔城中渴望自由的绿衣少年、曾一度迷恋高塔孤王但最终认清现实的奴隶弓手阿莫斯（弓叫阿莫斯之弓，可能人的名字不叫阿莫斯）、身为骑士但不认同高塔孤王高压统治的无名红发骑士（莱艮芬德家族的祖先）。他们和古恩希尔德的部族一道，历经血战攻下了王都。高塔孤王就此陨落，而绿衣少年和阿莫斯也不幸在战斗中战死。</p><p>绿衣少年，红发骑士，奴隶弓手和小小的风精灵</p><p>五星武器阿莫斯之弓背景故事<br>值得一提的是，与稻妻境内的大蛇奥罗巴斯等死去的魔神不同，高塔孤王并没有留下怨念或者魔神残渣去危害战后的人们，也许他在最后明白了自己爱人的方式是错误的，心甘情愿地放弃了神位。</p><p>大量的风元素力涌入了风精灵的体内，他成为了新的魔神，巴巴托斯。为了纪念自己的好友，巴巴托斯以绿衣少年的模样作为自己的人类形态。</p><p>而另一强敌北风狼王，自认为无法给人类带来幸福，大度地把自己的力量注入蒙德大地，退出了魔神战争。至此，风精灵逆袭两大对手，赢得魔神战争，成为风神巴巴托斯，被天空岛册封为尘世七执政之一。</p><p>伟大的北风狼王安德留斯<br>成为风神后，巴巴托斯使用神力改造蒙德的地理环境，使得大部分地区都成为宜居的平原和丘陵。创造宜居环境不是唯一的目的，尖帽子峰被吹到与深渊相连的马斯克礁处，背后是另外的良苦用心。新蒙德最终在距今2600多年前建立。</p><p>四星武器宗室长剑背景故事<br>在完成了这些事后，巴巴托斯贯彻自由的精神，选择了沉睡，由人类管理自己。这一睡就是1600多年。（也不一定全在沉睡，比如约2000年前还去璃月串门，但可以确信他长时间没有插手蒙德人的事务）</p><h1 id="风神篇二、革命与改制（距今约1000年前）"><a href="#风神篇二、革命与改制（距今约1000年前）" class="headerlink" title="风神篇二、革命与改制（距今约1000年前）"></a>风神篇二、革命与改制（距今约1000年前）</h1><p>蒙德有一本黑童话儿童邪典，叫《野猪公主》。讲野猪公主和狐狸乌龟两个伙伴一起，穿越冰雪去拯救朋友小狼，找到小狼后困于冰雪陷入绝境。野猪公主和小狼吃掉了狐狸乌龟，从冰雪中活了下来，最后手牵着手回家了。</p><p>这个黑童话被认为是影射以劳伦斯家族为首的贵族，对蒙德的黑暗统治。风神沉睡后，贵族们开始腐朽堕落，鱼肉百姓。曾经和蒙德人一起讨伐高塔孤王、开创新蒙德的贵族人成为了新的恶龙，而在风神苏醒前，既出现了反抗的火苗，也有贵族成员在寻求改良的可能。</p><p>蒙德地区大量的武器和圣遗物的背景故事发生在这一阶段：流浪乐团圣遗物、沉沦之心圣遗物、笛剑、钟剑、西风长枪、流月针、暗巷闪光等等。它们发生在风神苏醒之前，所以在本文不细讲。无论是奋起反抗的流浪乐团、克留兹理德·劳伦斯、帕西法尔，还是不择手段试图掌握权力然后改良贵族的厄伯哈特，他们都失败了。</p><p>终于，风神苏醒了。他扮作吟游诗人温迪进入蒙德，见到了贵族暴政，大感失望。他还结识了武艺超群的穆纳塔族角斗奴温妮莎。温妮莎等奴隶、晨曦骑士莱艮芬德、克留兹理德·劳伦斯的地下情报组织等，联合起来准备推翻贵族的暴政。</p><p>有趣的是，温迪为了减少流血，想办法策反贵族手下士兵：他伪造了邻国岩王帝君的签名和符印，说贵族们为了自己地位不惜卖国给璃月。温迪的假签名虽然骗不过岩神，但骗蒙德士兵绰绰有余。士兵们纷纷倒戈，推翻贵族的目的，以较小的代价达到了。</p><p>风神让岩神背黑锅<br>脾气很好的岩王帝君对此事是什么看法？从温迪角色语音来看，大概他被岩神揍了。。。</p><p>巴巴托斯反思自己的做法，贵族暴政这样的事是自己没有预料到的。他还想到了一个问题：前面那么多反抗者都失败了，只有自己施展神的力量，才推翻了贵族，还给蒙德人自由。</p><p>那么，被神命令的自由，还能称之为自由吗？</p><p>在收服风元素龙特瓦林作为自己的眷属后，风神做出了自己的选择：设置四风守护作为自己的魔神眷属，东风之龙为特瓦林，西风之鹰为西风骑士团集体，南风之狮为狮牙骑士，北风之狼为北风骑士。历代狮、狼骑士出任骑士团正副团长，处理蒙德军政事务。布置完这些后，他便摸鱼去了。</p><h1 id="风神篇三、战争与灾厄（距今500年前）"><a href="#风神篇三、战争与灾厄（距今500年前）" class="headerlink" title="风神篇三、战争与灾厄（距今500年前）"></a>风神篇三、战争与灾厄（距今500年前）</h1><p>这代骑士团出现了一对双子星，“光之狮”艾伦德林和“幼狼”鲁斯坦。艾伦德林没有神之眼，靠惊人力量和绝妙的大剑剑术屡立战功，做到了骑士团团长。</p><p>艾伦德林的副手鲁斯坦更加传奇，鲁斯坦佃户出身，靠武艺和智慧一路做到了副团长。他开创的西风单手剑术流传至今，他的高洁品行令人尊敬，而不为人所知的是，他还是这一代地下情报组织的领袖，为蒙德做一些骑士不方便做的工作。（1000年前开创地下情报组织的克留兹理德、500年前的鲁斯坦和当下的迪卢克，都是蒙德的“正义人”）鲁斯坦还和一位名叫罗莎琳的少女互相爱慕，如果没有后来的灾厄，他们应该会幸福地一起过完一生。</p><p>战争爆发了，一方是天理及七神，另一方是不信神的铁血之国坎瑞亚。而在战争的中后期，坎瑞亚的炼金术士“黄金”莱茵多特，创生出大量魔物袭击七国，其中包括了无比庞大的魔龙杜林。</p><p>杜林外表庞大而恐怖，但其实它的心智相当于初生的婴儿。它想听美妙的琴声和歌声于是来到了蒙德，它在混沌和迷茫中并不知道自己的毒气、黑雨会致人死地，它把蒙德人对它的攻击以为是和自己跳舞。（四星武器龙脊长枪、腐殖之剑背景故事）</p><p>蒙德军民死伤惨重，巴巴托斯和特瓦林闻讯赶来与杜林大战。杜林的意识仍然在混沌中，以为自己在和蒙德人及特瓦林歌唱舞蹈。。。。。直到巴巴托斯的琴声唤醒了它，而下一个瞬间它的咽喉被特瓦林咬穿。</p><p>杜林在死前并不仇恨风神和特瓦林杀死了它，它只是哀叹自己在错误的时间和地点遇到了并无恶意的蒙德人。它正好死在龙脊雪山上，其血液让上文提到的被寒天之钉砸死的地脉古树复苏成为忍冬树，等待着一位旅行者捡取绯红玉髓来沃灌它。（这可能是风神有意为之）</p><p>幸存的人们救治伤员，确认死者。人们发现了鲁斯坦，他在死前挂念不下三个人：艾伦德林，徒弟罗兰和心爱的罗莎琳。（五星武器终末嗟叹之诗背景故事）。</p><p>罗莎琳得知恋人死讯，痛哭不已。她流尽了眼泪，眼睛流出了血，最后居然是液态的火。她成了炎之魔女，疯狂猎杀着魔物，但人们并不因此感激她，而是害怕她扭曲的面容，关紧门窗躲开她，骂她魔女，甚至驱逐她。</p><p>在罗莎琳即将被自己失控的火焰烧死时，一个幸存的坎瑞亚人用冰属性邪眼救下了她。坎瑞亚人叫皮耶罗，代号“丑角”，是至冬国冰神最初的愚人、愚人众执行官第一席。而罗莎琳也自此加入了愚人众，代号“女士”，为执行官第八席。她怨恨风神没有保护好鲁斯坦，她相信实现冰神的愿望后，自己能再次见到鲁斯坦。</p><p>女士：鲁斯坦，我要创造一个有你的世界！<br>鲁斯坦的徒弟罗兰，受师父影响，也是个高洁而纯粹的人，被称为纯白骑士。他同样无法接受鲁斯坦的死去，决意去调查深渊灾厄。当他弄清楚深渊魔物的来源后，认为深渊才是受到不公的一方，遵照自己的骑士道，他选择效忠深渊。（染血套圣遗物背景故事）</p><p>爱慕罗兰的一位少女，拒绝了所有追求者，痴痴地等待着染血的骑士归来。年复一年，岁月流逝。。。（少女套圣遗物背景故事）</p><p>而和鲁斯坦一路相伴的艾伦德林也深受打击。战争爆发前，艾伦德林要率主力部队远征，鲁斯坦为他举酒壮行，祈祷他平安归来（四星圣遗物勇士之心背景故事）。万万没想到，艾伦德林平安归来，而鲁斯坦却不在人世，只给艾伦德林留下送给他的一个小时钟。艾伦德林从此不再以武力为荣耀，平淡地过完自己的余生。（西风大剑背景故事）</p><h1 id="风神篇四、时与风"><a href="#风神篇四、时与风" class="headerlink" title="风神篇四、时与风"></a>风神篇四、时与风</h1><p>特瓦林在和杜林的战斗中，被毒血感染。它在高塔孤王的旧都沉睡，但没有成功代谢掉毒血。过了上百年后醒来的它，仍然饱受毒血的折磨。蒙德人过了上百年和平日子，荒废了供奉它的庙宇。当特瓦林醒来时，蒙德人甚至没有认出特瓦林，而是认定为“风魔龙”，西风骑士团和它交手数次后，才弄清楚风魔龙原来是当年拯救蒙德的功臣。</p><p>特瓦林认为自己被蒙德城背叛，拼命攻击蒙德城和蒙德人。深渊教团趁机蛊惑它，企图把它打造成战争兵器。而蒙德的愚人众，见法尔伽率主力远征后的西风骑士团无力防御风魔龙，向代理团长琴提出由愚人众摆平风魔龙，条件是将蒙德城防移交给愚人众部队。</p><p>形势严峻，风神无法再摸鱼了，他找到了特瓦林，试图安抚它。但即使是风神，他也没有净化毒血的能力。事情的转机，来自一个神秘的旅行者。。。后面的故事，我们都知道了。</p><p>在和旅行者一起拯救东风之龙后，风神故意放水，让“女士”成功偷袭自己取走了神之心。如果至冬冰神真的能成功反抗天理，他是乐于见到这样的结果的。但他绝不愿意把他所珍爱的蒙德绑上至冬的战车，与冰神一起豪赌，于是他做出了这样的选择。</p><p>除了琴、迪卢克之外，绝大多数蒙德人都还以为风神仍在进行持续千年的沉睡，在龙灾结束后，继续自由过着自己的生活。失去神之心的风神，以吟游诗人的身份，过着只买得起散装酒的穷开心生活。</p><p>关于神之眼各属性的含义，米游社考据党大佬们的观点是：火系代表传承意志；水系代表追求纯粹；冰系代表矛盾纠结；雷系代表特立独行和孤独；岩系代表坚守信念。</p><p>而风系代表不再迷茫：魈被岩神和风神帮了两次，琴被古恩希尔德永护蒙德的家训点明，万叶在南十字船队领悟到要用剑救人而非杀生，早柚在老师离开后立志要独当一面，砂糖在失去朋友后决定用炼金术创造童话里的“仙境”。</p><p>主角醒来后，记忆是不连贯的，自己也不知道流浪了多久，救下派蒙后两个月也仍然是浑浑噩噩的。主角虽然没有得到风系神之眼，但通过与风神像共鸣获得了运用风元素力的能力。风神同时也让主角从迷茫中清醒，踏上了寻找亲人的旅途。风神还告诫主角，旅途的终点并不意味着一切，途中的人和故事都是值得多多观察的。</p><p>在蒙德篇开始前，主角即使遇到派蒙也只能浑浑噩噩度过两个月。而当蒙德和璃月篇完结时，主角已经重新形成了自己的价值观，能够自信地回答戴因斯雷布的三个问题。而当稻妻主线结束，主角和戴因在层岩巨渊重逢时，已经不需要再讨论价值观方面的问题了。</p><p>风带来故事的种子，时间使之发芽；风带来新的故事，时间使之成为神话。风神陪伴主角走过旅途的第一站，他给主角的影响将伴随主角的整个旅途，直到主角成为新的神话。</p>]]></content>
    
    
    <categories>
      
      <category>ACG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原神</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
